---
openapi: 3.0.0
info:
  version: 1.0.0
  title: The Confluence Cloud REST API
  termsOfService: http://atlassian.com/terms/
  description: This document describes the REST API and resources provided by Confluence.
    The REST APIs are for developers who want to integrate Confluence into their application
    and for administrators who want to script interactions with the Confluence server.Confluence's
    REST APIs provide access to resources (data entities) via URI paths. To use a
    REST API, your application will make an HTTP request and parse the response. The
    response format is JSON. Your methods will be the standard HTTP methods like GET,
    PUT, POST and DELETE. Because the REST API is based on open standards, you can
    use any web development language to access the API.
tags:
- name: Audit
  description: ''
- name: Content
  description: ''
- description: ''
  name: Contentbody
- name: Experimental
  description: ''
- description: ''
  name: Group
- name: InlineTasks
  description: ''
- description: ''
  name: Longtask
- name: Relation
  description: ''
- description: ''
  name: Search
- description: ''
  name: Settings
- description: ''
  name: Space
- name: Template
  description: ''
- description: ''
  name: User
- description: ''
  name: Dynamic modules
externalDocs:
  description: The online and complete version of the Confluence Cloud REST API docs.
  url: https://developer.atlassian.com/cloud/confluence/rest/
paths:
  "/api/longtask":
    get:
      summary: Get long-running tasks
      tags:
      - Longtask
      operationId: com.atlassian.confluence.plugins.restapi.resources.LongTaskResource.getTasks_get
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/LongTaskStatusArray"
          description: Returned if the requested tasks are returned.
        '401':
          description: Returned if the calling user is not logged in to Confluence.
      x-atlassian-connect-scope: READ
      description: |-
        Returns information about all active long-running tasks (e.g. space export),
        such as how long each task has been running and the percentage of each task
        that has completed.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        Permission to access the Confluence site ('Can use' global permission).
      parameters:
      - description: The starting index of the returned tasks.
        schema:
          default: 0
          type: integer
          minimum: 0
          format: int32
        required: false
        name: start
        in: query
      - in: query
        required: false
        name: limit
        description: |-
          The maximum number of tasks to return per page. Note, this may be
          restricted by fixed system limits.
        schema:
          type: integer
          default: 100
          minimum: 0
          format: int32
  "/api/user/anonymous":
    get:
      description: |-
        Returns information about how anonymous users are represented, like the
        profile picture and display name.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        Permission to access the Confluence site ('Can use' global permission).
      x-atlassian-connect-scope: READ
      parameters:
      - schema:
          type: array
          items:
            type: string
            enum:
            - operations
        description: |-
          A multi-value parameter indicating which properties of the user to
          expand.

            - `operations` returns the operations that the user is allowed to do.
        in: query
        required: false
        name: expand
        style: form
      summary: Get anonymous user
      tags:
      - User
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserAnonymous"
          description: Returned if the anonymous user representation is returned.
        '403':
          description: |-
            Returned if the calling user does not have permission to use
            Confluence.
      operationId: com.atlassian.confluence.plugins.restapi.resources.UserResource.getAnonymousUser_get
  "/api/relation/{relationName}/to/{targetType}/{targetKey}/from/{sourceType}":
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RelationArray"
          description: Returned if the requested relationships are returned.
        '403':
          description: |-
            Returned if the user does not have permission to view the
            relationship
        '404':
          description: Returned if the target entity does not exist.
      security:
      - oAuthDefinitions:
        - read:confluence-content.summary
      x-atlassian-connect-scope: READ
      operationId: com.atlassian.confluence.plugins.restapi.resources.RelationResource.findSourcesForTarget_get
      tags:
      - Relation
      summary: Find target entities related to a source entity
      parameters:
      - description: |-
          The name of the relationship. This method supports relationships created via
          [Create relationship](#api-relation-relationName-from-sourceType-sourceKey-to-targetType-targetKey-put).
          Note, this method does not support 'favourite' relationships.
        schema:
          type: string
        required: true
        in: path
        name: relationName
      - description: The source entity type of the relationship.
        schema:
          type: string
          enum:
          - user
          - content
          - space
        in: path
        required: true
        name: sourceType
      - description: The target entity type of the relationship.
        schema:
          type: string
          enum:
          - user
          - content
          - space
        required: true
        in: path
        name: targetType
      - required: true
        in: path
        name: targetKey
        schema:
          type: string
        description: |-
          The identifier for the target entity:

          - If `targetType` is `user`, then specify either `current` (logged-in user), the user key of the user, or
          the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the
          [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)
          for details.
          - If `targetType` is 'content', then specify the content ID.
          - If `targetType` is 'space', then specify the space key.
      - in: query
        required: false
        name: sourceStatus
        schema:
          type: string
        description: |-
          The status of the source. This parameter is only used when the
          `sourceType` is 'content'.
      - schema:
          type: string
        description: |-
          The status of the target. This parameter is only used when the
          `targetType` is 'content'.
        in: query
        required: false
        name: targetStatus
      - description: |-
          The version of the source. This parameter is only used when the
          `sourceType` is 'content' and the `sourceStatus` is 'historical'.
        schema:
          format: int32
          type: integer
        required: false
        name: sourceVersion
        in: query
      - schema:
          type: integer
          format: int32
        description: |-
          The version of the target. This parameter is only used when the
          `targetType` is 'content' and the `targetStatus` is 'historical'.
        name: targetVersion
        required: false
        in: query
      - description: |-
          A multi-value parameter indicating which properties of the response
          object to expand.

          - `relationData` returns information about the relationship, such as
          who created it and when it was created.
          - `source` returns the source entity.
          - `target` returns the target entity.
        schema:
          items:
            enum:
            - relationData
            - source
            - target
            type: string
          type: array
        style: form
        in: query
        required: false
        name: expand
      - description: The starting index of the returned relationships.
        schema:
          minimum: 0
          format: int32
          default: 0
          type: integer
        required: false
        in: query
        name: start
      - in: query
        required: false
        name: limit
        schema:
          default: 25
          type: integer
          format: int32
          minimum: 0
        description: |-
          The maximum number of relationships to return per page.
          Note, this may be restricted by fixed system limits.
      description: |-
        Returns all target entities that have a particular relationship to the
        source entity. Note, relationships are one way.

        For example, the following method finds all users that have a 'collaborator'
        relationship to a piece of content with an ID of '1234':
        `GET https://your-domain.atlassian.net/wiki/rest/api/relation/collaborator/to/content/1234/from/user`
        Note, 'collaborator' is an example custom relationship type.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        Permission to view both the target entity and source entity.
  "/api/settings/lookandfeel":
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/LookAndFeelSettings"
          description: Returned if the requested look and feel settings are returned.
        '400':
          description: Returned if `spaceKey` is invalid.
        '404':
          description: Returned if there is no space with the given `spaceKey`.
      security:
      - oAuthDefinitions:
        - manage:confluence-configuration
      x-atlassian-connect-scope: READ
      operationId: com.atlassian.confluence.plugins.restapi.resources.LookAndFeelResource.getLookAndFeelSettings_get
      tags:
      - Settings
      summary: Get look and feel settings
      parameters:
      - description: |-
          The key of the space for which the look and feel settings will be
          returned. If this is not set, only the global look and feel settings
          are returned.
        schema:
          type: string
        in: query
        required: false
        name: spaceKey
      description: |-
        Returns the look and feel settings for the site or a single space. This
        includes attributes such as the color scheme, padding, and border radius.

        The look and feel settings for a space can be inherited from the global
        look and feel settings or provided by a theme.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        None
  "/api/content/{id}/label":
    get:
      x-atlassian-connect-scope: READ
      security:
      - oAuthDefinitions:
        - read:confluence-content.summary
      responses:
        '200':
          description: Returned if the requested labels are returned.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/LabelArray"
        '404':
          description: |-
            Returned if;

            - There is no content with the given ID.
            - The calling user does not have permission to view the content.
      description: |-
        Returns the labels on a piece of content.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        'View' permission for the space and permission to view the content if it is a page.
      parameters:
      - schema:
          type: string
        description: The ID of the content to be queried for its labels.
        name: id
        required: true
        in: path
      - schema:
          enum:
          - global
          - my
          - team
          type: string
        description: |-
          Filters the results to labels with the specified prefix. If this parameter
          is not specified, then labels with any prefix will be returned.

          - `global` prefix is used by default when a user adds a label
          via the UI.
          - `my` prefix can be explicitly added by a user when adding a label
          via the UI, e.g. 'my:example-label'. Also, when a page is selected as
          a favourite, the 'my:favourite' label is automatically added.
          - `team` can used when adding labels via [Add labels to content](#api-content-id-label-post)
          but is not used in the UI.
        in: query
        required: false
        name: prefix
      - description: The starting index of the returned labels.
        schema:
          default: 0
          type: integer
          format: int32
          minimum: 0
        in: query
        name: start
      - schema:
          format: int32
          minimum: 0
          type: integer
          default: 200
        description: |-
          The maximum number of labels to return per page. Note,
          this may be restricted by fixed system limits.
        in: query
        name: limit
      tags:
      - Content
      summary: Get labels for content
      operationId: com.atlassian.confluence.plugins.restapi.resources.ContentLabelsResource.getLabelsForContent_get
    delete:
      responses:
        '204':
          description: Returned if the label is removed. The response body will be
            empty.
        '403':
          description: Returned if the calling user can view but not edit the content.
        '404':
          description: |-
            Returned if;

            - There is no content with the given ID.
            - The calling user does not have permission to view the content.
      security:
      - oAuthDefinitions:
        - write:confluence-content
      x-atlassian-connect-scope: DELETE
      operationId: com.atlassian.confluence.plugins.restapi.resources.ContentLabelsResource.removeLabelFromContentUsingQueryParameter_delete
      tags:
      - Content
      summary: Remove label from content using query parameter
      parameters:
      - schema:
          type: string
        description: The ID of the content that the label will be removed from.
        required: true
        name: id
        in: path
      - name: name
        required: false
        in: query
        description: The name of the label to be removed.
        schema:
          type: string
      description: |-
        Removes a label from a piece of content. This is similar to
        [Remove label from content](#api-content-id-label-label-delete)
        except that the label name is specified via a query parameter.

        Use this method if the label name has "/" characters, as
        [Remove label from content using query parameter](#api-content-id-label-delete)
        does not accept "/" characters for the label name.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        Permission to update the content.
    post:
      tags:
      - Content
      summary: Add labels to content
      operationId: com.atlassian.confluence.plugins.restapi.resources.ContentLabelsResource.addLabelsToContent_post
      requestBody:
        description: The labels to add to the content.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/LabelCreateArray"
        required: true
      description: |-
        Adds labels to a piece of content. Does not modify the existing labels.

        Notes:

        - Labels can also be added when creating content ([Create content](#api-content-post)).
        - Labels can be updated when updating content ([Update content](#api-content-id-put)).
        This will delete the existing labels and replace them with the labels in
        the request.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        Permission to update the content.
      parameters:
      - description: The ID of the content that will have labels added to it.
        schema:
          type: string
        required: true
        in: path
        name: id
      responses:
        '200':
          description: Returned if the labels are added to the content.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/LabelArray"
        '404':
          description: |-
            Returned if;

            - There is no content with the given ID.
            - The calling user does not have permission to view the content.
      x-atlassian-connect-scope: WRITE
      security:
      - oAuthDefinitions:
        - write:confluence-content
  "/api/content/{id}/move/{position}/{targetId}":
    put:
      description: |-
        Move a page to a new location relative to a target page:

        * `before` - move the page under the same parent as the target, before the target in the list of children
        * `after` - move the page under the same parent as the target, after the target in the list of children
        * `append` - move the page to be a child of the target

        Caution: This API can move pages to the top level of a space. Top-level pages are difficult to find in the UI
        because they do not show up in the page tree display. To avoid this, never use `before` or `after` positions
        when the `targetId` is a top-level page.
      parameters:
      - in: path
        required: true
        name: id
        description: The ID of the page to be moved
        schema:
          type: string
      - schema:
          type: string
          enum:
          - before
          - after
          - append
        description: |-
          The position to move the page to relative to the target page:
          * `before` - move the page under the same parent as the target, before the target in the list of children
          * `after` - move the page under the same parent as the target, after the target in the list of children
          * `append` - move the page to be a child of the target
        required: true
        name: position
        in: path
      - required: true
        name: targetId
        in: path
        schema:
          type: string
        description: The ID of the target page for this operation
      tags:
      - Content
      summary: Move a page to a new location relative to a target page
      operationId: com.atlassian.confluence.plugins.restapi.resources.movePage_put
      x-atlassian-connect-scope: WRITE
      security:
      - oAuthDefinitions:
        - write:confluence-content
      responses:
        '200':
          description: Page was successfully moved
          content:
            application/json:
              schema:
                properties:
                  pageId:
                    description: The content id of the page that was moved.
                    "$ref": "#/components/schemas/ContentId"
                type: object
        '400':
          description: |-
            Returned if;

            - A page already exists in the target space with the same name.
              User is advised to rename page before moving.
            - The move would create a parent-child loop (page becomes a descendant and ancestor of itself)
            - The page has permission restrictions that the user does not have permission to create in the target space.
              User is advised to remove restrictions before moving.
        '403':
          description: |-
            Returned if;

            - User does not have permission to remove page from current space
            - User does not have permission to create a page in target space
        '404':
          description: |-
            Returned if;

            - The id or targetId refer to non-existent pages
  "/api/settings/lookandfeel/selected":
    put:
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/LookAndFeelSettings"
          description: Returned if the look and feel settings were set.
        '400':
          description: |-
            Returned if;

            - The `spaceKey` is invalid.
            - The look and feel type is invalid.
        '403':
          description: |-
            Returned if the look and feel type is set to 'theme' but the
            space/site doesn't have a theme assigned.
        '404':
          description: Returned if there is no space with the given `spaceKey`.
      x-atlassian-connect-scope: WRITE
      security:
      - oAuthDefinitions:
        - manage:confluence-configuration
      summary: Set look and feel settings
      tags:
      - Settings
      operationId: com.atlassian.confluence.plugins.restapi.resources.LookAndFeelResource.setLookAndFeelSettings_put
      requestBody:
        description: The look and feel settings to be set.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/LookAndFeelType"
        required: true
      description: |-
        Sets the look and feel settings to either the default settings or the
        custom settings, for the site or a single space. Note, the default
        space settings are inherited from the current global settings.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        'Admin' permission for the space.
      parameters:
      - schema:
          type: string
        description: |-
          The key of the space for which the look and feel settings will be
          set. If this is not set, the global look and feel settings will be
          set.
        name: spaceKey
        required: false
        in: query
  "/api/audit":
    get:
      tags:
      - Audit
      summary: Get audit records
      operationId: com.atlassian.confluence.plugins.restapi.resources.AuditResource.getAuditRecords_get
      responses:
        '200':
          description: Returned if the requested records are returned.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AuditRecordArray"
        '403':
          description: |-
            Returned if the calling user does not have permission to view the audit
            log.
      x-atlassian-connect-scope: INACCESSIBLE
      description: |-
        Returns all records in the audit log, optionally for a certain date range.
        This contains information about events like space exports, group membership
        changes, app installations, etc. For more information, see
        [Audit log](https://confluence.atlassian.com/confcloud/audit-log-802164269.html)
        in the Confluence administrator's guide.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        'Confluence Administrator' global permission.
      parameters:
      - required: false
        in: query
        name: startDate
        schema:
          type: string
        description: |-
          Filters the results to the records on or after the `startDate`.
          The `startDate` must be specified as a [timestamp](https://www.unixtimestamp.com/).
      - schema:
          type: string
        description: |-
          Filters the results to the records on or before the `endDate`.
          The `endDate` must be specified as a [timestamp](https://www.unixtimestamp.com/).
        required: false
        in: query
        name: endDate
      - description: |-
          Filters the results to records that have string property values
          matching the `searchString`.
        schema:
          type: string
        required: false
        name: searchString
        in: query
      - required: false
        in: query
        name: start
        description: The starting index of the returned records.
        schema:
          format: int32
          minimum: 0
          default: 0
          type: integer
      - description: |-
          The maximum number of records to return per page.
          Note, this may be restricted by fixed system limits.
        schema:
          type: integer
          default: 1000
          minimum: 0
          format: int32
        required: false
        name: limit
        in: query
    post:
      x-atlassian-connect-scope: INACCESSIBLE
      description: |-
        Creates a record in the audit log.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        'Confluence Administrator' global permission.
      requestBody:
        required: true
        description: The record to be created in the audit log.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/AuditRecordCreate"
      operationId: com.atlassian.confluence.plugins.restapi.resources.AuditResource.createAuditRecord_post
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AuditRecord"
          description: Returned if the record is created in the audit log.
        '400':
          description: Returned if the `remoteAddress` property is not specified.
      summary: Create audit record
      tags:
      - Audit
  "/api/search":
    get:
      tags:
      - Search
      summary: Search content
      operationId: com.atlassian.confluence.plugins.restapi.resources.SearchResource.search_get
      description: |-
        Searches for content using the
        [Confluence Query Language (CQL)](https://developer.atlassian.com/cloud/confluence/advanced-searching-using-cql/)

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        Permission to view the entities. Note, only entities that the user has
        permission to view will be returned.
      parameters:
      - required: true
        name: cql
        in: query
        schema:
          type: string
        description: |-
          The CQL query to be used for the search. See
          [Advanced Searching using CQL](https://developer.atlassian.com/cloud/confluence/advanced-searching-using-cql/)
          for instructions on how to build a CQL query.
      - description: |-
          The space, content, and content status to execute the search
          against.

          - `spaceKey` Key of the space to search against. Optional.
          - `contentId` ID of the content to search against. Optional. Must be
          in the space specified by `spaceKey`.
          - `contentStatuses` Content statuses to search against. Optional.

          Specify these values in an object. For example,
          `cqlcontext={%22spaceKey%22:%22TEST%22, %22contentId%22:%22123%22}`
        schema:
          type: string
        required: false
        name: cqlcontext
        in: query
      - schema:
          format: int32
          minimum: 0
          type: integer
          default: 0
        description: The starting index of the returned content.
        in: query
        required: false
        name: start
      - name: limit
        required: false
        in: query
        description: |-
          The maximum number of content objects to return per page.
          Note, this may be restricted by fixed system limits.
        schema:
          minimum: 0
          format: int32
          type: integer
          default: 25
      - name: includeArchivedSpaces
        required: false
        in: query
        description: Include content from archived spaces in the results.
        schema:
          default: false
          type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SearchPageResponseSearchResult"
          description: Returned if the requested results are returned.
        '400':
          description: Returned if the CQL query cannot be parsed.
        '403':
          description: |-
            Returned if the calling user does not have permission to access
            Confluence.
      x-atlassian-connect-scope: READ
      security:
      - oAuthDefinitions:
        - search:confluence
  "/api/content/{id}":
    get:
      parameters:
      - name: id
        required: true
        in: path
        description: |-
          The ID of the content to be returned. If you don't know the content ID,
          use [Get content](#api-content-get) and filter the results.
        schema:
          type: string
      - schema:
          items:
            type: string
          enum:
          - current
          - trashed
          - draft
          - any
          default: current
          type: array
        explode: true
        description: |-
          Filter the results to a set of content based on their status.
          If set to `any`, content with any status is returned. Note, the
          `historical` status is currently not supported.
        in: query
        required: false
        name: status
      - required: false
        in: query
        name: version
        schema:
          type: integer
          format: int32
        description: The version number of the content to be returned.
      - required: false
        name: embeddedContentRender
        in: query
        schema:
          default: current
          type: string
          enum:
          - current
          - version-at-save
        description: |-
          The version of embedded content (e.g. attachments) to render.

          - <code>current</code> renders the latest version of the embedded content.
          - <code>version-at-save</code> renders the version of the embedded content
          at the time of save.
      - "$ref": "#/components/parameters/contentExpand"
      - name: trigger
        required: false
        in: query
        schema:
          enum:
          - viewed
          type: string
        description: |-
          If set to `viewed`, the request will trigger a 'viewed' event for the content.
          When this event is triggered, the page/blogpost will appear on the 'Recently visited'
          tab of the user's Confluence dashboard.
      description: |-
        Returns a single piece of content, like a page or a blog post.

        By default, the following objects are expanded: `space`, `history`, `version`.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        Permission to view the content. If the content is a blog post, 'View' permission
        for the space is required.
      operationId: com.atlassian.confluence.plugins.restapi.resources.ContentResource.getContentById_get
      tags:
      - Content
      summary: Get content by ID
      security:
      - oAuthDefinitions:
        - read:confluence-content.summary
      x-atlassian-connect-scope: READ
      responses:
        '200':
          description: Returned if the requested content is returned.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Content"
        '401':
          description: |-
            Returned if the authentication credentials are incorrect or missing
            from the request.
        '404':
          description: |-
            Returned if;

            - There is no content with the given ID.
            - The requesting user does not have permission to view the content.
    delete:
      description: |-
        Moves a piece of content to the space's trash or purges it from the trash,
        depending on the content's type and status:

        - If the content's type is `page` or `blogpost` and its status is `current`,
        it will be trashed.
        - If the content's type is `page` or `blogpost` and its status is `trashed`,
        the content will be purged from the trash and deleted permanently. Note,
        you must also set the `status` query parameter to `trashed` in your request.
        - If the content's type is `comment` or `attachment`, it will be deleted
        permanently without being trashed.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        'Delete' permission for the space that the content is in, and permission to edit the content.
      parameters:
      - required: true
        name: id
        in: path
        schema:
          type: string
        description: The ID of the content to be deleted.
      - required: false
        in: query
        name: status
        schema:
          type: string
        description: Set this to `trashed`, if the content's status is `trashed` and
          you want to purge it.
      summary: Delete content
      tags:
      - Content
      operationId: com.atlassian.confluence.plugins.restapi.resources.ContentResource.deleteContent_delete
      x-atlassian-connect-scope: DELETE
      security:
      - oAuthDefinitions:
        - write:confluence-content
      responses:
        '200':
          description: Returned if the content is successfully trashed.
        '204':
          description: Returned if the content is successfully purged.
        '404':
          description: |-
            Returned if;

            - There is no content with the given ID.
            - The requesting user does not have permission to trash or purge the
            content.
    put:
      parameters:
      - name: id
        required: true
        in: path
        description: The ID of the content to be updated.
        schema:
          type: string
      - required: false
        name: status
        in: query
        description: |-
          The updated status of the content. Use this parameter to change the
          status of a piece of content without passing the entire request body.
        schema:
          default: current
          type: string
          enum:
          - current
          - trashed
          - historical
          - draft
      - name: conflictPolicy
        required: false
        in: query
        schema:
          enum:
          - abort
          default: abort
          type: string
        description: |-
          The action that should be taken when conflicts are discovered.
          Only used when publishing a draft page.
      description: |-
        Updates a piece of content. Use this method to update the title or body
        of a piece of content, change the status, change the parent page, and more.

        Note, updating draft content is currently not supported.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        Permission to update the content.
      requestBody:
        required: true
        description: The updated content.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ContentUpdate"
      operationId: com.atlassian.confluence.plugins.restapi.resources.ContentResource.updateContent_put
      summary: Update content
      tags:
      - Content
      security:
      - oAuthDefinitions:
        - write:confluence-content
      x-atlassian-connect-scope: WRITE
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Content"
          description: Returned if the content is updated.
        '400':
          description: |-
            Returned if;

            - The request body is missing required parameters (version, type, title).
            - The type property has been set incorrectly.
        '401':
          description: |-
            Returned if the authentication credentials are incorrect or missing
            from the request.
        '404':
          description: |-
            Returned if a draft with current content cannot be found when setting the status
            parameter to draft and the content status is current.
        '409':
          description: |-
            Returned if;

            - The page is a draft (draft pages cannot be updated).
            - The version property has not been set correctly for the content
            type.
  "/api/content/{id}/version/{versionNumber}":
    get:
      parameters:
      - description: The ID of the content to be queried for its version.
        schema:
          type: string
        in: path
        required: true
        name: id
      - schema:
          type: integer
          format: int32
        description: The number of the version to be retrieved.
        required: true
        name: versionNumber
        in: path
      - schema:
          type: array
          items:
            type: string
            enum:
            - collaborators
            - content
        description: |-
          A multi-value parameter indicating which properties of the content to
          expand. By default, the `content` object is expanded.

          - `collaborators` returns the users that collaborated on the version.
          - `content` returns the content for the version.
        in: query
        required: false
        name: expand
        style: form
      description: |-
        Returns a version for a piece of content.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        Permission to view the content. If the content is a blog post, 'View' permission
        for the space is required.
      operationId: com.atlassian.confluence.plugins.restapi.resources.ContentVersionResource.getContentVersion_get
      summary: Get content version
      tags:
      - Content
      security:
      - oAuthDefinitions:
        - read:confluence-content.summary
      x-atlassian-connect-scope: READ
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Version"
          description: Returned if the version is returned.
        '403':
          description: |-
            Returned if the calling user does not have permission to view the
            content.
        '404':
          description: Returned if the content or version cannot be found.
    delete:
      security:
      - oAuthDefinitions:
        - write:confluence-content
      x-atlassian-connect-scope: DELETE
      responses:
        '204':
          description: Returned if the version is deleted.
        '400':
          description: |-
            Returned if;

            - The content or version cannot be found.
            - The current version is specified.
        '403':
          description: |-
            Returned if the calling user doesn't have permission to edit the
            content.
      parameters:
      - required: true
        in: path
        name: id
        schema:
          type: string
        description: The ID of the content that the version will be deleted from.
      - schema:
          type: integer
          format: int32
        description: |-
          The number of the version to be deleted. The version number starts
          from 1 up to current version.
        required: true
        name: versionNumber
        in: path
      description: |-
        Delete a historical version. This does not delete the changes made to the
        content in that version, rather the changes for the deleted version are
        rolled up into the next version. Note, you cannot delete the current version.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        Permission to update the content.
      operationId: com.atlassian.confluence.plugins.restapi.resources.ContentVersionResource.deleteContentVersion_delete
      summary: Delete content version
      tags:
      - Content
  "/api/content/{id}/property":
    post:
      x-atlassian-connect-scope: WRITE
      security:
      - oAuthDefinitions:
        - write:confluence-props
      responses:
        '200':
          description: Returned if the content property is created.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ContentProperty"
        '400':
          description: |-
            Returned if;

            - The content already has a property with the given key.
            - The key is too long.
            - The key is empty.
        '403':
          description: |-
            Returned if the user does not have permission to edit the content
            with the given ID.
        '413':
          description: Returned if the value is too long.
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ContentPropertyCreate"
        description: The content property to be created.
        required: true
      description: |-
        Creates a property for an existing piece of content. For more information
        about content properties, see [Confluence entity properties](https://developer.atlassian.com/cloud/confluence/confluence-entity-properties/).

        This is the same as [Create content property for key](#api-content-id-property-key-post)
        except that the key is specified in the request body instead of as a
        path parameter.

        Content properties can also be added when creating a new piece of content
        by including them in the `metadata.properties` of the request.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        Permission to update the content.
      parameters:
      - schema:
          type: string
        description: The ID of the content to add the property to.
        in: path
        required: true
        name: id
      summary: Create content property
      tags:
      - Content
      operationId: com.atlassian.confluence.plugins.restapi.resources.ContentPropertyResource.createContentProperty_post
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ContentPropertyArray"
          description: Returned if the requested properties are returned.
        '404':
          description: |-
            Returned if;

            - There is no content with the given ID
            - The calling user does not have permission to view the content.
      security:
      - oAuthDefinitions:
        - read:confluence-props
      x-atlassian-connect-scope: READ
      operationId: com.atlassian.confluence.plugins.restapi.resources.ContentPropertyResource.getContentProperties_get
      tags:
      - Content
      summary: Get content properties
      parameters:
      - in: path
        required: true
        name: id
        schema:
          type: string
        description: The ID of the content to be queried for its properties.
      - schema:
          type: array
          items:
            type: string
            enum:
            - content
            - version
        description: |-
          A multi-value parameter indicating which properties of the content to
          expand. By default, the `version` object is expanded.

          - `content` returns the content that the property is stored against.
          - `version` returns information about the version of the property, such
          as the version number, when it was created, etc.
        required: false
        name: expand
        in: query
        style: form
      - description: The starting index of the returned properties.
        schema:
          format: int32
          minimum: 0
          type: integer
          default: 0
        in: query
        required: false
        name: start
      - schema:
          minimum: 0
          format: int32
          default: 10
          type: integer
        description: |-
          The maximum number of properties to return per page.
          Note, this may be restricted by fixed system limits.
        required: false
        in: query
        name: limit
      description: |-
        Returns the properties for a piece of content. For more information
        about content properties, see [Confluence entity properties](https://developer.atlassian.com/cloud/confluence/confluence-entity-properties/).

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        'View' permission for the space, and permission to view the content if it is a page.
  "/api/group/{groupName}":
    get:
      x-atlassian-connect-scope: READ
      description: |-
        Returns a user group for a given group name.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        Permission to access the Confluence site ('Can use' global permission).
      parameters:
      - schema:
          type: string
        description: |-
          The name of the group. This is the same as the group name shown in
          the Confluence administration console.
        required: true
        name: groupName
        in: path
      tags:
      - Group
      summary: Get group
      operationId: com.atlassian.confluence.plugins.restapi.resources.GroupResource.getGroup_get
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Group"
          description: Returned if the requested group is returned.
        '403':
          description: |-
            Returned if the calling user does not have permission to view
            groups.
  "/api/content/{id}/descendant/{type}":
    get:
      security:
      - oAuthDefinitions:
        - read:confluence-content.summary
      x-atlassian-connect-scope: READ
      responses:
        '200':
          description: Returned if the requested content is returned.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ContentArray"
        '404':
          description: |-
            Returned if;

            - There is no content with the given ID.
            - The calling user does not have permission to view the content.
      parameters:
      - required: true
        name: id
        in: path
        schema:
          type: string
        description: The ID of the content to be queried for its descendants.
      - description: The type of descendants to return.
        schema:
          type: string
          enum:
          - page
          - comment
          - attachment
        required: true
        name: type
        in: path
      - "$ref": "#/components/parameters/contentExpand"
      - schema:
          minimum: 0
          format: int32
          default: 0
          type: integer
        description: The starting index of the returned content.
        name: start
        in: query
      - description: |-
          The maximum number of content to return per page. Note,
          this may be restricted by fixed system limits.
        schema:
          default: 25
          type: integer
          format: int32
          minimum: 0
        name: limit
        in: query
      description: |-
        Returns all descendants of a given type, for a piece of content. This is
        similar to [Get content children by type](#api-content-id-child-type-get),
        except that this method returns child pages at all levels, rather than just
        the direct child pages.

        A piece of content has different types of descendants, depending on its type:

        - `page`: descendant is `page`, `comment`, `attachment`
        - `blogpost`: descendant is `comment`, `attachment`
        - `attachment`: descendant is `comment`
        - `comment`: descendant is `attachment`

        Custom content types that are provided by apps can also be returned.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        'View' permission for the space, and permission to view the content if it
        is a page.
      operationId: com.atlassian.confluence.plugins.restapi.resources.DescendantContentResource.descendantsOfType_get
      summary: Get content descendants by type
      tags:
      - Content
  "/atlassian-connect/1/app/module/dynamic":
    delete:
      description: |-
        Remove all or a list of modules registered by the calling app.

        **[Permissions](#permissions) required:** Only Connect apps can make this request.
      parameters:
      - schema:
          items:
            type: string
          type: array
        description: |-
          The key of the module to remove. To include multiple module keys, provide multiple copies of this parameter.
          For example, `moduleKey=dynamic-attachment-entity-property&moduleKey=dynamic-select-field`.
          Nonexistent keys are ignored.
        in: query
        required: false
        name: moduleKey
      tags:
      - Dynamic modules
      summary: Remove modules
      operationId: DynamicModulesResource.removeModules_delete
      x-experimental: true
      x-atlassian-connect-scope: NONE
      deprecated: false
      responses:
        '204':
          description: Returned if the request is successful.
        '401':
          description: Returned if the call is not from a Connect app.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/DynamicModulesErrorMessage"
            message:
              examples:
                response:
                  value: The request is not from a Connect app.
    get:
      deprecated: false
      x-atlassian-connect-scope: NONE
      responses:
        '200':
          description: Returned if the request is successful.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ConnectModules"
        '401':
          content:
            message:
              examples:
                response:
                  value: The request is not from a Connect app.
            "*/*":
              schema:
                "$ref": "#/components/schemas/DynamicModulesErrorMessage"
          description: Returned if the call is not from a Connect app.
      description: |-
        Returns all modules registered dynamically by the calling app.

        **[Permissions](#permissions) required:** Only Connect apps can make this request.
      x-experimental: true
      operationId: DynamicModulesResource.getModules_get
      summary: Get modules
      tags:
      - Dynamic modules
    post:
      operationId: DynamicModulesResource.registerModules_post
      x-experimental: true
      summary: Register modules
      tags:
      - Dynamic modules
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ConnectModules"
        required: true
      description: |-
        Registers a list of modules. For the list of modules that support dynamic registration, see [Dynamic modules](https://developer.atlassian.com/cloud/confluence/dynamic-modules/).

        **[Permissions](#permissions) required:** Only Connect apps can make this request.
      responses:
        '200':
          description: Returned if the request is successful.
        '400':
          description: |-
            Returned if:
            * any of the provided modules is invalid. For example, required properties are missing.
            * any of the modules conflict with registered dynamic modules or modules defined in the app descriptor. For example, there are duplicate keys.

            Details of the issues encountered are included in the error message.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/DynamicModulesErrorMessage"
            message:
              examples:
                response:
                  value: 'Installation failed. The app com.example.app.key has duplicate
                    module keys: [module-key]. Please contact the app vendor.'
        '401':
          content:
            message:
              examples:
                response:
                  value: The request is not from a Connect app.
            "*/*":
              schema:
                "$ref": "#/components/schemas/DynamicModulesErrorMessage"
          description: Returned if the call is not from a Connect app.
      deprecated: false
      x-atlassian-connect-scope: NONE
  "/api/audit/since":
    get:
      parameters:
      - required: false
        name: number
        in: query
        description: The number of units for the time period.
        schema:
          format: int64
          default: 3
          type: integer
      - name: units
        required: false
        in: query
        schema:
          default: MONTHS
          type: string
          enum:
          - NANOS
          - MICROS
          - MILLIS
          - SECONDS
          - MINUTES
          - HOURS
          - HALF_DAYS
          - DAYS
          - WEEKS
          - MONTHS
          - YEARS
          - DECADES
          - CENTURIES
        description: The unit of time that the time period is measured in.
      - description: |-
          Filters the results to records that have string property values
          matching the `searchString`.
        schema:
          type: string
        required: false
        name: searchString
        in: query
      - schema:
          minimum: 0
          format: int32
          type: integer
          default: 0
        description: The starting index of the returned records.
        required: false
        name: start
        in: query
      - description: |-
          The maximum number of records to return per page.
          Note, this may be restricted by fixed system limits.
        schema:
          minimum: 0
          format: int32
          default: 1000
          type: integer
        required: false
        in: query
        name: limit
      description: |-
        Returns records from the audit log, for a time period back from the current
        date. For example, you can use this method to get the last 3 months of records.

        This contains information about events like space exports, group membership
        changes, app installations, etc. For more information, see
        [Audit log](https://confluence.atlassian.com/confcloud/audit-log-802164269.html)
        in the Confluence administrator's guide.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        'Confluence Administrator' global permission.
      x-atlassian-connect-scope: INACCESSIBLE
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AuditRecordArray"
          description: Returned if the requested records are returned.
        '403':
          description: |-
            Returned if the calling user does not have permission to view the audit
            log.
      operationId: com.atlassian.confluence.plugins.restapi.resources.AuditResource.getAuditRecordsForTimePeriod_get
      tags:
      - Audit
      summary: Get audit records for time period
  "/api/content/{id}/notification/child-created":
    get:
      security:
      - oAuthDefinitions:
        - read:confluence-content.summary
      x-atlassian-connect-scope: READ
      responses:
        '200':
          description: Returned if the requested watches are returned.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/WatchArray"
        '401':
          description: |-
            Returned if the authentication credentials are incorrect or missing
            from the request.
      parameters:
      - required: true
        name: id
        in: path
        schema:
          type: string
        description: The ID of the content to be queried for its watches.
      - required: false
        name: start
        in: query
        schema:
          default: 0
          type: integer
          format: int32
          minimum: 0
        description: The starting index of the returned watches.
      - in: query
        required: false
        name: limit
        description: |-
          The maximum number of watches to return per page.
          Note, this may be restricted by fixed system limits.
        schema:
          default: 200
          type: integer
          format: int32
          minimum: 0
      description: |-
        Returns the watches for a page. A user that watches a page will receive
        receive notifications when the page is updated.

        If you want to manage watches for a page, use the following `user` methods:

        - [Get content watch status for user](#api-user-watch-content-contentId-get)
        - [Add content watch](#api-user-watch-content-contentId-post)
        - [Remove content watch](#api-user-watch-content-contentId-delete)

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        Permission to access the Confluence site ('Can use' global permission).
      operationId: com.atlassian.confluence.plugins.restapi.resources.ContentNotificationsResource.getWatchesForPage_get
      summary: Get watches for page
      tags:
      - Content
  "/api/content/blueprint/instance/{draftId}":
    post:
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Content"
          description: Returned if the draft was successfully published.
        '400':
          description: |-
            Returned if a title is not specified or a page with the
            title already exists.
        '409':
          description: Returned if the version is not set to 1.
      security:
      - oAuthDefinitions:
        - write:confluence-content
      x-atlassian-connect-scope: WRITE
      operationId: com.atlassian.confluence.plugins.restapi.resources.ContentBlueprintResource.publishLegacyDraft_post
      summary: Publish legacy draft
      tags:
      - Content
      parameters:
      - required: true
        name: draftId
        in: path
        description: |-
          The ID of the draft page that was created from a blueprint.
          You can find the `draftId` in the Confluence application by
          opening the draft page and checking the page URL.
        schema:
          type: string
      - in: query
        required: false
        name: status
        description: |-
          The status of the content to be updated, i.e. the draft. This is set
          to 'draft' by default, so you shouldn't need to specify it.
        schema:
          default: draft
          type: string
      - "$ref": "#/components/parameters/contentExpand"
      description: |-
        Publishes a legacy draft of a page created from a blueprint. Legacy drafts
        will eventually be removed in favor of shared drafts. For now, this method
        works the same as [Publish shared draft](#api-content-blueprint-instance-draftId-put).

        By default, the following objects are expanded: `body.storage`, `history`, `space`, `version`, `ancestors`.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        Permission to view the draft and 'Add' permission for the space that
        the content will be created in.
      requestBody:
        "$ref": "#/components/requestBodies/ContentBlueprintDraft"
    put:
      x-atlassian-connect-scope: WRITE
      security:
      - oAuthDefinitions:
        - write:confluence-content
      responses:
        '200':
          description: Returned if the draft was successfully published.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Content"
        '400':
          description: |-
            Returned if a title is not specified or a page with the
            title already exists.
        '409':
          description: Returned if the version is not set to 1.
      description: |-
        Publishes a shared draft of a page created from a blueprint.

        By default, the following objects are expanded: `body.storage`, `history`, `space`, `version`, `ancestors`.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        Permission to view the draft and 'Add' permission for the space that
        the content will be created in.
      requestBody:
        "$ref": "#/components/requestBodies/ContentBlueprintDraft"
      parameters:
      - description: |-
          The ID of the draft page that was created from a blueprint.
          You can find the `draftId` in the Confluence application by
          opening the draft page and checking the page URL.
        schema:
          type: string
        required: true
        in: path
        name: draftId
      - description: |-
          The status of the content to be updated, i.e. the draft. This is set
          to 'draft' by default, so you shouldn't need to specify it.
        schema:
          type: string
          default: draft
        name: status
        required: false
        in: query
      - "$ref": "#/components/parameters/contentExpand"
      tags:
      - Content
      summary: Publish shared draft
      operationId: com.atlassian.confluence.plugins.restapi.resources.ContentBlueprintResource.publishSharedDraft_put
  "/api/space/{spaceKey}/theme":
    delete:
      responses:
        '204':
          description: Returned if the theme was reset for the space.
        '404':
          description: Returned if there is no space with the given key.
      security:
      - oAuthDefinitions:
        - write:confluence-space
      x-atlassian-connect-scope: DELETE
      operationId: com.atlassian.confluence.plugins.restapi.resources.SpaceThemeResource.resetSpaceTheme_delete
      summary: Reset space theme
      tags:
      - Space
      parameters:
      - description: The key of the space to reset the theme for.
        schema:
          type: string
        required: true
        in: path
        name: spaceKey
      description: |-
        Resets the space theme. This means that the space will inherit the
        global look and feel settings

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        'Admin' permission for the space.
    put:
      parameters:
      - required: true
        in: path
        name: spaceKey
        schema:
          type: string
        description: The key of the space to set the theme for.
      description: |-
        Sets the theme for a space. Note, if you want to reset the space theme to
        the default Confluence theme, use the 'Reset space theme' method instead
        of this method.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        'Admin' permission for the space.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ThemeUpdate"
      operationId: com.atlassian.confluence.plugins.restapi.resources.SpaceThemeResource.setSpaceTheme_put
      tags:
      - Space
      summary: Set space theme
      security:
      - oAuthDefinitions:
        - write:confluence-space
      x-atlassian-connect-scope: WRITE
      responses:
        '200':
          description: Returned if the theme was set for the space.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Theme"
        '403':
          description: Returned if the theme key is invalid.
        '404':
          description: Returned if there is no space with the given key.
    get:
      summary: Get space theme
      tags:
      - Space
      operationId: com.atlassian.confluence.plugins.restapi.resources.SpaceThemeResource.getSpaceTheme_get
      description: |-
        Returns the theme selected for a space, if one is set. If no space
        theme is set, this means that the space is inheriting the global look
        and feel settings.

        **[Permissions required](https://confluence.atlassian.com/x/_AozKw)**: ‘View’ permission for the space.
      parameters:
      - required: true
        name: spaceKey
        in: path
        description: The key of the space to be queried for its theme.
        schema:
          type: string
      responses:
        '200':
          description: Returned if the requested theme is returned.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Theme"
        '404':
          description: |-
            Returned if any of the following is true:

            - There is no space with the given key.
            - The space does not have a theme assigned to it.
      x-atlassian-connect-scope: READ
      security:
      - oAuthDefinitions:
        - read:confluence-space.summary
  "/api/group":
    get:
      parameters:
      - name: start
        required: false
        in: query
        schema:
          default: 0
          type: integer
          minimum: 0
          format: int32
        description: The starting index of the returned groups.
      - schema:
          format: int32
          minimum: 0
          default: 200
          type: integer
        description: |-
          The maximum number of groups to return per page.
          Note, this may be restricted by fixed system limits.
        required: false
        name: limit
        in: query
      description: |-
        Returns all user groups. The returned groups are ordered alphabetically in
        ascending order by group name.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        Permission to access the Confluence site ('Can use' global permission).
      x-atlassian-connect-scope: READ
      responses:
        '200':
          description: Returned if the requested groups are returned.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/GroupArrayWithLinks"
        '403':
          description: |-
            Returned if the calling user does not have permission to view
            groups.
      operationId: com.atlassian.confluence.plugins.restapi.resources.GroupResource.getGroups_get
      tags:
      - Group
      summary: Get groups
  "/api/content/{id}/child/attachment/{attachmentId}":
    put:
      operationId: com.atlassian.confluence.plugins.restapi.resources.AttachmentResource.updateAttachmentProperties_put
      tags:
      - Content
      summary: Update attachment properties
      parameters:
      - schema:
          type: string
        description: The ID of the content that the attachment is attached to.
        name: id
        required: true
        in: path
      - description: The ID of the attachment to update.
        schema:
          type: string
        name: attachmentId
        required: true
        in: path
      description: |-
        Updates the attachment properties, i.e. the non-binary data of an attachment
        like the filename, media-type, comment, and parent container.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        Permission to update the content.
      requestBody:
        description: The details of the attachment to be updated.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/AttachmentUpdate"
        required: true
      responses:
        '200':
          description: Returned if the attachment is updated.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Content"
        '400':
          description: |-
            Returned if;

            - The attachment id is invalid.
            - The attachment version number is invalid.
        '403':
          description: |-
            Returned if;

            - The calling user is not permitted to update or move the attachment.
            - The attachment is being moved to an invalid content type.
        '404':
          description: Returned if no attachment is found for the attachment ID.
        '409':
          description: |-
            Returned if the version of the supplied attachment does not match
            the version of the attachment stored in the database.
      security:
      - oAuthDefinitions:
        - write:confluence-file
        - write:confluence-props
      x-atlassian-connect-scope: WRITE
  "/api/settings/lookandfeel/custom":
    post:
      responses:
        '200':
          description: Returned if the look and feel settings are updated.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/LookAndFeelUpdated"
        '400':
          description: |-
            Returned if;

            - The `spaceKey` is invalid
            - The request body contains invalid data.
        '403':
          description: |-
            Returned if the calling user doesn't have permission to edit the
            look and feel settings.
        '404':
          description: Returned if there is no space with the given `spaceKey`.
      x-atlassian-connect-scope: WRITE
      security:
      - oAuthDefinitions:
        - manage:confluence-configuration
      tags:
      - Settings
      summary: Update look and feel settings
      operationId: com.atlassian.confluence.plugins.restapi.resources.LookAndFeelResource.updateLookAndFeelSettings_post
      requestBody:
        required: true
        description: |-
          The updated settings. All values for the settings must be included,
          regardless of whether they are being changed.

          One way to create the request body is to copy the settings from the
          response body of [Get look and feel settings](#api-settings-lookandfeel-get)
          and modify it as needed.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/LookAndFeel"
      description: |-
        Updates the look and feel settings for the site or for a single space.
        If custom settings exist, they are updated. If no custom settings exist,
        then a set of custom settings is created.

        Note, if a theme is selected for a space, the space look and feel settings
        are provided by the theme and cannot be overridden.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        'Admin' permission for the space.
      parameters:
      - schema:
          type: string
        description: |-
          The key of the space for which the look and feel settings will be
          updated. If this is not set, the global look and feel settings will
          be updated.
        name: spaceKey
        required: false
        in: query
    delete:
      responses:
        '204':
          description: Returned if the look and feel settings have been reset.
        '400':
          description: Returned if `spaceKey` is invalid.
        '403':
          description: |-
            Returned if the calling user doesn't have permission to reset the
            look and feel.
        '404':
          description: Returned if there is no space with the given `spaceKey`.
      x-atlassian-connect-scope: DELETE
      security:
      - oAuthDefinitions:
        - manage:confluence-configuration
      summary: Reset look and feel settings
      tags:
      - Settings
      operationId: com.atlassian.confluence.plugins.restapi.resources.LookAndFeelResource.resetLookAndFeelSettings_delete
      description: |-
        Resets the custom look and feel settings for the site or a single space.
        This changes the values of the custom settings to be the same as the
        default settings. It does not change which settings (default or custom)
        are selected. Note, the default space settings are inherited from the
        current global settings.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        'Admin' permission for the space.
      parameters:
      - required: false
        in: query
        name: spaceKey
        schema:
          type: string
        description: |-
          The key of the space for which the look and feel settings will be
          reset. If this is not set, the global look and feel settings will
          be reset.
  "/api/contentbody/convert/{to}":
    post:
      summary: Convert content body
      tags:
      - Contentbody
      operationId: com.atlassian.confluence.plugins.restapi.resources.ContentBodyResource.convertContentBody_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ContentBodyCreate"
        description: The content body to convert.
      description: |-
        Converts a content body from one format to another format.

        Supported conversions:

        - storage: view, export_view, styled_view, editor
        - editor: storage
        - view: none
        - export_view: none
        - styled_view: none

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        If request specifies 'contentIdContext', 'View' permission for the space, and permission to view the content.
      parameters:
      - required: true
        in: path
        name: to
        description: The name of the target format for the content body.
        schema:
          type: string
      - "$ref": "#/components/parameters/contentExpand"
      - name: spaceKeyContext
        required: false
        in: query
        description: |-
          The space key used for resolving embedded content (page includes,
          files, and links) in the content body. For example, if the source content
          contains the link `<ac:link><ri:page ri:content-title="Example page" /><ac:link>`
          and the `spaceKeyContext=TEST` parameter is provided, then the link
          will be converted to a link to the "Example page" page in the "TEST" space.
        schema:
          type: string
      - name: contentIdContext
        required: false
        in: query
        description: |-
          The content ID used to find the space for resolving embedded content
          (page includes, files, and links) in the content body. For example,
          if the source content contains the link `<ac:link><ri:page ri:content-title="Example page" /><ac:link>`
          and the `contentIdContext=123` parameter is provided, then the link
          will be converted to a link to the "Example page" page in the same space
          that has the content with ID=123. Note, `spaceKeyContext` will be ignored
          if this parameter is provided.
        schema:
          type: string
      - description: |-
          Mode used for rendering embedded content, like attachments.

          - `current` renders the embedded content using the latest version.
          - `version-at-save` renders the embedded content using the version at
          the time of save.
        schema:
          enum:
          - current
          - version-at-save
          type: string
          default: current
        name: embeddedContentRender
        required: false
        in: query
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ContentBody"
          description: Returned if the content is converted.
      x-atlassian-connect-scope: READ
  "/api/space/{spaceKey}":
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Space"
          description: Returned if the requested space is returned.
        '401':
          description: |-
            Returned if the authentication credentials are incorrect or missing
            from the request.
        '404':
          description: |-
            Returned if any of the following is true:

            - There is no space with the given key.
            - The calling user does not have permission to view the space.
      security:
      - oAuthDefinitions:
        - read:confluence-space.summary
      x-atlassian-connect-scope: READ
      operationId: com.atlassian.confluence.plugins.restapi.resources.SpaceResource.getSpace_get
      summary: Get space
      tags:
      - Space
      parameters:
      - in: path
        required: true
        name: spaceKey
        description: The key of the space to be returned.
        schema:
          type: string
      - "$ref": "#/components/parameters/spaceExpand"
      description: |-
        Returns a space. This includes information like the name, description,
        and permissions, but not the content in the space.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        'View' permission for the space.
    put:
      description: |-
        Updates the name, description, or homepage of a space.

        -   For security reasons, permissions cannot be updated via the API and
        must be changed via the user interface instead.
        -   Currently you cannot set space labels when updating a space.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        'Admin' permission for the space.
      requestBody:
        required: true
        description: The updated space.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/SpaceUpdate"
      parameters:
      - required: true
        name: spaceKey
        in: path
        description: The key of the space to update.
        schema:
          type: string
      tags:
      - Space
      summary: Update space
      operationId: com.atlassian.confluence.plugins.restapi.resources.SpaceResource.updateSpace_put
      x-atlassian-connect-scope: WRITE
      security:
      - oAuthDefinitions:
        - write:confluence-space
      responses:
        '200':
          description: Returned if the space is updated.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Space"
        '401':
          description: |-
            Returned if the authentication credentials are incorrect or missing
            from the request.
        '404':
          description: |-
            Returned if any of the following is true:

            - There is no space with the given key
            - The calling user does not have permission to update the space.
    delete:
      operationId: com.atlassian.confluence.plugins.restapi.resources.SpaceResource.deleteSpace_delete
      summary: Delete space
      tags:
      - Space
      parameters:
      - description: The key of the space to delete.
        schema:
          type: string
        required: true
        name: spaceKey
        in: path
      description: |-
        Deletes a space. Note, the space will be deleted in a long running task.
        Therefore, the space may not be deleted yet when this method has
        returned. Clients should poll the status link that is returned in the
        response until the task completes.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        'Admin' permission for the space.
      responses:
        '202':
          description: Returns a pointer to the status of the space deletion task.
        '401':
          description: |-
            Returned if the authentication credentials are incorrect or missing
            from the request.
        '404':
          description: |-
            Returned if any of the following is true:

            - There is no space with the given key.
            - The calling user does not have permission to delete the space.
      security:
      - oAuthDefinitions:
        - write:confluence-space
      x-atlassian-connect-scope: DELETE
  "/api/content/{id}/notification/created":
    get:
      security:
      - oAuthDefinitions:
        - read:confluence-content.summary
      x-atlassian-connect-scope: READ
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/WatchArray"
          description: Returned if the requested watches are returned.
        '401':
          description: |-
            Returned if the authentication credentials are incorrect or missing
            from the request.
      parameters:
      - required: true
        name: id
        in: path
        schema:
          type: string
        description: The ID of the content to be queried for its watches.
      - in: query
        required: false
        name: start
        schema:
          format: int32
          minimum: 0
          type: integer
          default: 0
        description: The starting index of the returned watches.
      - required: false
        in: query
        name: limit
        schema:
          format: int32
          minimum: 0
          default: 200
          type: integer
        description: |-
          The maximum number of watches to return per page.
          Note, this may be restricted by fixed system limits.
      description: |-
        Returns all space watches for the space that the content is in. A user that
        watches a space will receive receive notifications when any content in the
        space is updated.

        If you want to manage watches for a space, use the following `user` methods:

        - [Get space watch status for user](#api-user-watch-space-spaceKey-get)
        - [Add space watch](#api-user-watch-space-spaceKey-post)
        - [Remove space watch](#api-user-watch-space-spaceKey-delete)

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        Permission to access the Confluence site ('Can use' global permission).
      operationId: com.atlassian.confluence.plugins.restapi.resources.ContentNotificationsResource.getWatchesForSpace_get
      tags:
      - Content
      summary: Get watches for space
  "/api/content/{id}/restriction":
    post:
      security:
      - oAuthDefinitions:
        - write:confluence-content
      x-atlassian-connect-scope: WRITE
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ContentRestrictionArray"
          description: Returned if the requested restrictions are added.
        '404':
          description: |-
            Returned if;

            - There is no content with the given ID.
            - The calling user does not have permission to add restrictions to
            the content.
      parameters:
      - required: true
        name: id
        in: path
        description: The ID of the content to add restrictions to.
        schema:
          type: string
      - description: |-
          A multi-value parameter indicating which properties of the content
          restrictions (returned in response) to expand.

          - `restrictions.user` returns the piece of content that the restrictions are
          applied to. Expanded by default.
          - `restrictions.group` returns the piece of content that the restrictions are
          applied to. Expanded by default.
          - `content` returns the piece of content that the restrictions are
          applied to.
        schema:
          items:
            type: string
            enum:
            - restrictions.user
            - restrictions.group
            - content
          type: array
        style: form
        required: false
        in: query
        name: expand
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ContentRestrictionUpdateArray"
        description: The restrictions to be added to the content.
      description: |-
        Adds restrictions to a piece of content. Note, this does not change any
        existing restrictions on the content.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        Permission to edit the content.
      operationId: com.atlassian.confluence.plugins.restapi.resources.ContentRestrictionResource.addRestrictions_post
      summary: Add restrictions
      tags:
      - Content
    put:
      operationId: com.atlassian.confluence.plugins.restapi.resources.ContentRestrictionResource.updateRestrictions_put
      summary: Update restrictions
      tags:
      - Content
      parameters:
      - name: id
        required: true
        in: path
        schema:
          type: string
        description: The ID of the content to update restrictions for.
      - style: form
        name: expand
        required: false
        in: query
        schema:
          type: array
          items:
            type: string
            enum:
            - restrictions.user
            - restrictions.group
            - content
        description: |-
          A multi-value parameter indicating which properties of the content
          restrictions (returned in response) to expand.

          - `restrictions.user` returns the piece of content that the restrictions are
          applied to. Expanded by default.
          - `restrictions.group` returns the piece of content that the restrictions are
          applied to. Expanded by default.
          - `content` returns the piece of content that the restrictions are
          applied to.
      requestBody:
        required: true
        description: The updated restrictions for the content.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ContentRestrictionUpdateArray"
      description: |-
        Updates restrictions for a piece of content. This removes the existing
        restrictions and replaces them with the restrictions in the request.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        Permission to edit the content.
      responses:
        '200':
          description: Returned if the requested restrictions are updated.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ContentRestrictionArray"
        '404':
          description: |-
            Returned if;

            - There is no content with the given ID.
            - The calling user does not have permission to update restrictions
            for the content.
      security:
      - oAuthDefinitions:
        - write:confluence-content
      x-atlassian-connect-scope: WRITE
    delete:
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ContentRestrictionArray"
          description: Returned if the restrictions are removed.
        '400':
          description: Returned if any of the above validation rules are violated
        '403':
          description: |-
            Returned if the calling user does not have permission to alter the
            restrictions on the content.
        '404':
          description: |-
            Returned if;

            - There is no content with the given ID.
            - The calling user does not have permission to view the content.
      x-atlassian-connect-scope: DELETE
      security:
      - oAuthDefinitions:
        - write:confluence-content
      summary: Delete restrictions
      tags:
      - Content
      operationId: com.atlassian.confluence.plugins.restapi.resources.ContentRestrictionResource.deleteRestrictions_delete
      description: |-
        Removes all restrictions (read and update) on a piece of content.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        Permission to edit the content.
      parameters:
      - schema:
          type: string
        description: The ID of the content to remove restrictions from.
        required: true
        in: path
        name: id
      - style: form
        in: query
        required: false
        name: expand
        description: |-
          A multi-value parameter indicating which properties of the content
          restrictions (returned in response) to expand.

          - `restrictions.user` returns the piece of content that the restrictions are
          applied to. Expanded by default.
          - `restrictions.group` returns the piece of content that the restrictions are
          applied to. Expanded by default.
          - `content` returns the piece of content that the restrictions are
          applied to.
        schema:
          items:
            enum:
            - restrictions.user
            - restrictions.group
            - content
            type: string
          type: array
    get:
      x-atlassian-connect-scope: READ
      security:
      - oAuthDefinitions:
        - read:confluence-content.all
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ContentRestrictionArray"
          description: Returned if the requested restrictions are returned.
        '404':
          description: |-
            Returned if;

            - There is no content with the given ID.
            - The calling user does not have permission to view the content.
      description: |-
        Returns the restrictions on a piece of content.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        Permission to view the content.
      parameters:
      - schema:
          type: string
        description: The ID of the content to be queried for its restrictions.
        required: true
        name: id
        in: path
      - schema:
          type: array
          items:
            type: string
            enum:
            - restrictions.user
            - restrictions.group
            - content
        description: |-
          A multi-value parameter indicating which properties of the content
          restrictions to expand. By default, the following objects are expanded:
          `restrictions.user`, `restrictions.group`.

          - `restrictions.user` returns the piece of content that the restrictions are
          applied to.
          - `restrictions.group` returns the piece of content that the restrictions are
          applied to.
          - `content` returns the piece of content that the restrictions are
          applied to.
        in: query
        required: false
        name: expand
        style: form
      - description: The starting index of the users and groups in the returned restrictions.
        schema:
          type: integer
          default: 0
          format: int32
          minimum: 0
        required: false
        in: query
        name: start
      - required: false
        name: limit
        in: query
        description: |-
          The maximum number of users and the maximum number of groups, in the
          returned restrictions, to return per page. Note, this may be restricted
          by fixed system limits.
        schema:
          minimum: 0
          format: int32
          type: integer
          default: 100
      summary: Get restrictions
      tags:
      - Content
      operationId: com.atlassian.confluence.plugins.restapi.resources.ContentRestrictionResource.getRestrictions_get
  "/api/content/{id}/child":
    get:
      x-atlassian-connect-scope: READ
      security:
      - oAuthDefinitions:
        - read:confluence-content.summary
      responses:
        '200':
          description: Returned if the requested content children are returned.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ContentChildren"
        '404':
          description: |-
            Returned if;

            - There is no content with the given ID.
            - The calling user does not have permission to view the content.
      description: |-
        Returns a map of the direct children of a piece of content. A piece of content
        has different types of child content, depending on its type. These are
        the default parent-child content type relationships:

        - `page`: child content is `page`, `comment`, `attachment`
        - `blogpost`: child content is `comment`, `attachment`
        - `attachment`: child content is `comment`
        - `comment`: child content is `attachment`

        Apps can override these default relationships. Apps can also introduce
        new content types that create new parent-child content relationships.

        Note, the map will always include all child content types that are valid
        for the content. However, if the content has no instances of a child content
        type, the map will contain an empty array for that child content type.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: 'View' permission for the space,
        and permission to view the content if it is a page.
      parameters:
      - required: true
        in: path
        name: id
        description: The ID of the content to be queried for its children.
        schema:
          type: string
      - schema:
          items:
            type: string
            enum:
            - attachment
            - comment
            - page
          type: array
        description: |-
          A multi-value parameter indicating which properties of the children to expand, where:

          - `attachment` returns all attachments for the content.
          - `comments` returns all comments for the content.
          - `page` returns all child pages of the content.
        in: query
        required: false
        name: expand
        style: form
      - required: false
        in: query
        name: parentVersion
        schema:
          type: integer
          default: 0
          format: int32
        description: |-
          The version of the parent content to retrieve children for.
          Currently, this only works for the latest version.
      tags:
      - Content
      summary: Get content children
      operationId: com.atlassian.confluence.plugins.restapi.resources.ChildContentResource.getContentChildren_get
  "/api/longtask/{id}":
    get:
      x-atlassian-connect-scope: READ
      security:
      - oAuthDefinitions:
        - read:confluence-space.summary
      responses:
        '200':
          description: Returned if the requested task is returned.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/LongTaskStatusWithLinks"
        '401':
          description: Returned if the calling user is not logged in to Confluence.
        '404':
          description: |-
            Returned if;

            - There is no task with the given ID.
            - The calling user does not have permission to view the task.
      description: |-
        Returns information about an active long-running task (e.g. space export),
        such as how long it has been running and the percentage of the task that
        has completed.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        Permission to access the Confluence site ('Can use' global permission).
      parameters:
      - required: true
        in: path
        name: id
        schema:
          type: string
        description: The ID of the task.
      summary: Get long-running task
      tags:
      - Longtask
      operationId: com.atlassian.confluence.plugins.restapi.resources.LongTaskResource.getTask_get
  "/api/search/user":
    get:
      parameters:
      - description: |-
          The CQL query to be used for the search. See
          [Advanced Searching using CQL](https://developer.atlassian.com/cloud/confluence/advanced-searching-using-cql/)
          for instructions on how to build a CQL query.

          Example queries:
                    cql=type=user will return all users
                    cql=user=“1234” will return user with accountId “1234”
                    You can also use IN, NOT IN, != operators
                    cql=user IN (“12”, “34") will return users with accountids “12” and “34”
                    cql=user.fullname~jo will return users with nickname/full name starting with “jo”
                    cql=user.accountid=“123” will return user with accountId “123”
        schema:
          type: string
        required: true
        in: query
        name: cql
      - in: query
        required: false
        name: start
        schema:
          type: integer
          default: 0
          format: int32
          minimum: 0
        description: The starting index of the returned users.
      - schema:
          default: 25
          type: integer
          minimum: 0
          format: int32
        description: |-
          The maximum number of user objects to return per page.
          Note, this may be restricted by fixed system limits.
        required: false
        name: limit
        in: query
      description: |-
        Searches for users using user-specific queries from the
        [Confluence Query Language (CQL)](https://developer.atlassian.com/cloud/confluence/advanced-searching-using-cql/).

        Note that some user fields may be set to null depending on the user's privacy settings.
        These are: email, profilePicture, and displayName.
      x-atlassian-connect-scope: READ
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SearchPageResponseSearchResult"
          description: Returned if the requested results are returned.
        '400':
          description: Returned if the CQL query cannot be parsed.
        '403':
          description: |-
            Returned if the calling user does not have permission to access
            Confluence.
      operationId: com.atlassian.confluence.plugins.restapi.resources.SearchResource.search_user_get
      tags:
      - Search
      summary: Search users
  "/api/content/{id}/child/{type}":
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ContentArray"
          description: Returned if the requested content is returned.
        '404':
          description: |-
            Returned if;

            - There is no content with the given ID.
            - The calling user does not have permission to view the content.
      x-atlassian-connect-scope: READ
      security:
      - oAuthDefinitions:
        - read:confluence-content.summary
      summary: Get content children by type
      tags:
      - Content
      operationId: com.atlassian.confluence.plugins.restapi.resources.ChildContentResource.getContentChildrenByType_get
      description: |-
        Returns all children of a given type, for a piece of content.
        A piece of content has different types of child content, depending on its type:

        - `page`: child content is `page`, `comment`, `attachment`
        - `blogpost`: child content is `comment`, `attachment`
        - `attachment`: child content is `comment`
        - `comment`: child content is `attachment`

        Custom content types that are provided by apps can also be returned.

        Note, this method only returns direct children. To return children at all
        levels, use [Get descendants by type](#api-content-id-descendant-type-get).

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: 'View' permission for the space,
        and permission to view the content if it is a page.
      parameters:
      - required: true
        name: id
        in: path
        description: The ID of the content to be queried for its children.
        schema:
          type: string
      - required: true
        in: path
        name: type
        schema:
          type: string
          enum:
          - page
          - comment
          - attachment
        description: The type of children to return.
      - "$ref": "#/components/parameters/contentExpand"
      - description: |-
          The version of the parent content to retrieve children for.
          Currently, this only works for the latest version.
        schema:
          format: int32
          minimum: 0
          default: 0
          type: integer
        in: query
        required: false
        name: parentVersion
      - name: start
        in: query
        description: The starting index of the returned content.
        schema:
          format: int32
          type: integer
      - name: limit
        in: query
        description: |-
          The maximum number of content to return per page. Note,
          this may be restricted by fixed system limits.
        schema:
          default: 25
          type: integer
          minimum: 0
          format: int32
  "/api/user/current":
    get:
      responses:
        '200':
          description: Returned if the current user is returned.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/User"
        '403':
          description: |-
            Returned if the calling user does not have permission to use
            Confluence.
      operationId: com.atlassian.confluence.plugins.restapi.resources.UserResource.getCurrentUser_get
      summary: Get current user
      tags:
      - User
      parameters:
      - name: expand
        required: false
        in: query
        style: form
        schema:
          type: array
          items:
            enum:
            - operations
            - details.personal
            - details.business
            - personalSpace
            type: string
        description: |-
          A multi-value parameter indicating which properties of the user to
          expand.

            - `operations` returns the operations that the user is allowed to do.
            - `details.personal` returns the 'Personal' details in the user's profile, like the 'Email' and 'Phone'.
            Note that these fields have been deprecated due to privacy changes. See the
            [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)
            for details.
            - `details.business` returns the 'Company' details in the user's profile, like the 'Position' and 'Department'.
            Note that these fields have been deprecated due to privacy changes. See the
            [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)
            for details.
            - personalSpace returns the user's personal space, if it exists.
      description: |-
        Returns the currently logged-in user. This includes information about
        the user, like the display name, userKey, account ID, profile picture,
        and more.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        Permission to access the Confluence site ('Can use' global permission).
      x-atlassian-connect-scope: READ
  "/api/content/{id}/child/attachment":
    post:
      operationId: com.atlassian.confluence.plugins.restapi.resources.AttachmentResource.createAttachments_post
      summary: Create attachment
      tags:
      - Content
      parameters:
      - description: The ID of the content to add the attachment to.
        schema:
          type: string
        required: true
        in: path
        name: id
      - required: false
        in: query
        name: status
        schema:
          enum:
          - current
          - draft
          type: string
          default: current
        description: The status of the content that the attachment is being added
          to.
      description: |-
        Adds an attachment to a piece of content. This method only adds a new
        attachment. If you want to update an existing attachment, use
        [Create or update attachments](#api-content-id-child-attachment-put).

        Note, you must set a `X-Atlassian-Token: nocheck` header on the request
        for this method, otherwise it will be blocked. This protects against XSRF
        attacks, which is necessary as this method accepts multipart/form-data.

        The media type 'multipart/form-data' is defined in [RFC 1867](https://www.ietf.org/rfc/rfc1867.txt).
        Most client libraries have classes that make it easier to implement
        multipart posts, like the [MultiPartEntity](http://hc.apache.org/httpcomponents-client-ga/httpmime/apidocs/org/apache/http/entity/mime/MultipartEntity.html)
        Java class provided by Apache HTTP Components.

        Example: This curl command attaches a file ('example.txt') to a container
        (id='123') with a comment and `minorEdits`=true.

        ``` bash
        curl -D- \
          -u admin:admin \
          -X POST \
          -H "X-Atlassian-Token: nocheck" \
          -F "file=@example.txt" \
          -F "minorEdit=true" \
          -F "comment=Example attachment comment" \
          http://myhost/rest/api/content/123/child/attachment
        ```
        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        Permission to update the content.
      requestBody:
        "$ref": "#/components/requestBodies/com.atlassian.confluence.plugins.restapi.resources.AttachmentResource.createAttachments_post"
      responses:
        '200':
          description: Returned if the attachments were added to the content.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ContentArray"
        '400':
          description: Returned if the content already has an attachment with the
            same filename.
        '403':
          description: |-
            Returned if;

            - Attachments are disabled in Confluence.
            - The calling user does not have permission to add attachments to the
            content.
        '404':
          description: |-
            Returned if;

            - The requested content is not found.
            - The user does not have permission to view it
            - The attachment exceeds the maximum configured attachment size.
      security:
      - oAuthDefinitions:
        - write:confluence-file
      x-atlassian-connect-scope: WRITE
    get:
      parameters:
      - schema:
          type: string
        description: The ID of the content to be queried for its attachments.
        required: true
        in: path
        name: id
      - "$ref": "#/components/parameters/contentExpand"
      - required: false
        in: query
        name: start
        schema:
          minimum: 0
          format: int32
          default: 0
          type: integer
        description: The starting index of the returned attachments.
      - in: query
        required: false
        name: limit
        schema:
          default: 25
          type: integer
          minimum: 0
          format: int32
        description: |-
          The maximum number of attachments to return per page.
          Note, this may be restricted by fixed system limits.
      - schema:
          type: string
        description: Filter the results to attachments that match the filename.
        name: filename
        in: query
      - name: mediaType
        in: query
        schema:
          type: string
        description: Filter the results to attachments that match the media type.
      description: |-
        Returns the attachments for a piece of content.

        By default, the following objects are expanded: `metadata`.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        Permission to view the content. If the content is a blog post, 'View' permission
        for the space is required.
      operationId: com.atlassian.confluence.plugins.restapi.resources.AttachmentResource.getAttachments_get
      summary: Get attachments
      tags:
      - Content
      security:
      - oAuthDefinitions:
        - read:confluence-content.summary
      x-atlassian-connect-scope: READ
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ContentArray"
          description: Returned if the requested attachments are returned.
        '404':
          description: |-
            Returned if;

            - There is no parent content with the given ID.
            - The calling user does not have permission to view the parent content.
    put:
      parameters:
      - description: The ID of the content to add the attachment to.
        schema:
          type: string
        required: true
        name: id
        in: path
      - required: false
        in: query
        name: status
        schema:
          type: string
          default: current
          enum:
          - current
          - draft
        description: |-
          The status of the content that the attachment is being added to.
          This should always be set to 'current'.
      requestBody:
        "$ref": "#/components/requestBodies/com.atlassian.confluence.plugins.restapi.resources.AttachmentResource.createAttachments_post"
      description: |-
        Adds an attachment to a piece of content. If the attachment already exists
        for the content, then the attachment is updated (i.e. a new version of the
        attachment is created).

        Note, you must set a `X-Atlassian-Token: nocheck` header on the request
        for this method, otherwise it will be blocked. This protects against XSRF
        attacks, which is necessary as this method accepts multipart/form-data.

        The media type 'multipart/form-data' is defined in [RFC 1867](https://www.ietf.org/rfc/rfc1867.txt).
        Most client libraries have classes that make it easier to implement
        multipart posts, like the [MultiPartEntity](http://hc.apache.org/httpcomponents-client-ga/httpmime/apidocs/org/apache/http/entity/mime/MultipartEntity.html)
        Java class provided by Apache HTTP Components.

        Example: This curl command attaches a file ('example.txt') to a piece of
        content (id='123') with a comment and `minorEdits`=true. If the 'example.txt'
        file already exists, it will update it with a new version of the attachment.

        ``` bash
        curl -D- \
          -u admin:admin \
          -X PUT \
          -H "X-Atlassian-Token: nocheck" \
          -F "file=@example.txt" \
          -F "minorEdit=true" \
          -F "comment=Example attachment comment" \
          http://myhost/rest/api/content/123/child/attachment
        ```
        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        Permission to update the content.
      operationId: com.atlassian.confluence.plugins.restapi.resources.AttachmentResource.createOrUpdateAttachments_put
      tags:
      - Content
      summary: Create or update attachment
      security:
      - oAuthDefinitions:
        - write:confluence-file
      x-atlassian-connect-scope: WRITE
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ContentArray"
          description: Returned if the attachments were added to the content.
        '403':
          description: |-
            Returned if;

            - Attachments are disabled.
            - The calling user does not have permission to add attachments to the
            content.
        '404':
          description: |-
            Returned if;

            - The requested content is not found.
            - The user does not have permission to view it.
            - The attachment exceeds the maximum configured attachment size.
  "/api/user/email/bulk":
    get:
      x-atlassian-connect-scope: ACCESS_EMAIL_ADDRESSES
      description: |-
        Returns user email addresses for a set of accountIds. This API is only available to apps approved by
        Atlassian, according to these [guidelines](https://community.developer.atlassian.com/t/guidelines-for-requesting-access-to-email-address/27603).

        Any accounts which are not available will not be included in the result.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        Permission to access the Confluence site ('Can use' global permission).
      parameters:
      - required: true
        name: accountId
        in: query
        description: The account IDs of the users.
        schema:
          type: array
          items:
            type: string
      tags:
      - User
      summary: Bulk fetch of users' email addresses
      operationId: com.atlassian.confluence.plugins.restapi.resources.UserEmailResource.getPrivacyUnsafeUserEmailBulk_get
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AccountIdEmailRecordArray"
          description: Returned if the request is successful.
        '400':
          description: Returned if the calling app is not approved to use this API.
        '401':
          description: |-
            Returned if the authentication credentials are incorrect or missing
            from the request.
        '501':
          description: Indicates that the API is not currently enabled.
  "/api/template":
    put:
      requestBody:
        description: The updated content template.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ContentTemplateUpdate"
        required: true
      description: |-
        Updates a content template. Note, blueprint templates cannot be updated
        via the REST API.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        'Admin' permission for the space to create a space template or 'Confluence Administrator'
        global permission to create a global template.
      tags:
      - Template
      summary: Update content template
      operationId: com.atlassian.confluence.plugins.restapi.resources.TemplateResource.updateContentTemplate_put
      x-atlassian-connect-scope: WRITE
      security:
      - oAuthDefinitions:
        - write:confluence-content
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ContentTemplate"
          description: Returned if the template is updated.
        '403':
          description: |-
            Returned if the calling user does not have permission to update the
            template.
    post:
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ContentTemplate"
          description: Returned if the template is created.
        '403':
          description: |-
            Returned if the calling user does not have permission to create the
            template.
      x-atlassian-connect-scope: WRITE
      security:
      - oAuthDefinitions:
        - write:confluence-content
      summary: Create content template
      tags:
      - Template
      operationId: com.atlassian.confluence.plugins.restapi.resources.TemplateResource.createContentTemplate_post
      description: |-
        Creates a new content template. Note, blueprint templates cannot be created via the REST API.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        'Admin' permission for the space to create a space template or 'Confluence Administrator'
        global permission to create a global template.
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ContentTemplateCreate"
        description: |-
          The content template to be created.
          The content body must be in 'storage' format.
        required: true
  "/api/space/{spaceKey}/settings":
    put:
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SpaceSettings"
          description: Returned if space settings are updated.
        '401':
          description: |-
            Returned if the authentication credentials are incorrect or missing
            from the request.
        '404':
          description: |-
            Returned if;

            - There is no space with the given key.
            - The calling user does not have permission to update the space.
      security:
      - oAuthDefinitions:
        - write:confluence-space
      x-atlassian-connect-scope: WRITE
      operationId: com.atlassian.confluence.plugins.restapi.resources.SpaceResource.updateSpaceSettings_put
      summary: Update space settings
      tags:
      - Space
      parameters:
      - schema:
          type: string
        description: The key of the space whose settings will be updated.
        required: true
        in: path
        name: spaceKey
      description: |-
        Updates the settings for a space. Currently only the
        `routeOverrideEnabled` setting can be updated.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        'Admin' permission for the space.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/SpaceSettingsUpdate"
        description: The space settings to update.
    get:
      parameters:
      - required: true
        name: spaceKey
        in: path
        schema:
          type: string
        description: The key of the space to be queried for its settings.
      description: |-
        Returns the settings of a space. Currently only the
        `routeOverrideEnabled` setting can be returned.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        'View' permission for the space.
      operationId: com.atlassian.confluence.plugins.restapi.resources.SpaceResource.getSpaceSettings_get
      tags:
      - Space
      summary: Get space settings
      security:
      - oAuthDefinitions:
        - read:confluence-space.summary
      x-atlassian-connect-scope: READ
      responses:
        '200':
          description: Returned if the space settings are returned.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SpaceSettings"
        '401':
          description: |-
            Returned if the authentication credentials are incorrect or missing
            from the request.
        '404':
          description: |-
            Returned if;

            - There is no space with the given key.
            - The calling user does not have permission to view the space.
  "/api/user/bulk/migration":
    get:
      parameters:
      - required: false
        name: key
        in: query
        description: |-
          The key of a user. To specify multiple users, pass multiple key parameters separated by ampersands.
          For example, key=mia&key=alana. Required if username isn't provided. Cannot be provided if username is present.
        schema:
          type: array
          items:
            type: string
      - description: |-
          The username of a user. To specify multiple users, pass multiple username parameters separated by ampersands.
          For example, username=mia&username=alana. Required if key isn't provided. Cannot be provided if key is present.
        schema:
          items:
            type: string
          type: array
        required: false
        in: query
        name: username
      - name: start
        required: false
        in: query
        schema:
          format: int32
          minimum: 0
          type: integer
          default: 0
        description: The index of the first item to return in a page of results (page
          offset).
      - in: query
        required: false
        name: limit
        schema:
          minimum: 0
          format: int32
          default: 200
          type: integer
        description: |-
          The maximum number of results to return per page.
          Note, this may be restricted by fixed system limits.
      x-atlassian-connect-scope: READ
      description: |-
        Returns the accountIds for the users specified in the key or username parameters. Note that multiple key and username parameters can be specified.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        'Confluence Administrator' global permission if specifying a user, otherwise
        permission to access the Confluence site ('Can use' global permission).
      operationId: com.atlassian.confluence.plugins.restapi.resources.UserResource.getBulkUserMigration
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/MigratedUserArray"
          description: Returned if the request is successful.
        '400':
          description: Returned if no `username` or 'key' is specified.
        '403':
          description: |-
            Returned if;

            - The calling user does not have permission to view users.
            - A schema has not been defined for this response code.
      summary: Get accountIds for users
      tags:
      - User
  "/api/audit/export":
    get:
      x-atlassian-connect-scope: INACCESSIBLE
      description: |-
        Exports audit records as a CSV file or ZIP file.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        'Confluence Administrator' global permission.
      parameters:
      - description: |-
          Filters the exported results to the records on or after the `startDate`.
          The `startDate` must be specified as a [timestamp](https://www.unixtimestamp.com/).
        schema:
          type: string
        in: query
        required: false
        name: startDate
      - name: endDate
        required: false
        in: query
        schema:
          type: string
        description: |-
          Filters the exported results to the records on or before the `endDate`.
          The `endDate` must be specified as a [timestamp](https://www.unixtimestamp.com/).
      - name: searchString
        required: false
        in: query
        schema:
          type: string
        description: |-
          Filters the exported results to records that have string property values
          matching the `searchString`.
      - required: false
        name: format
        in: query
        description: The format of the export file for the audit records.
        schema:
          default: csv
          type: string
          enum:
          - csv
          - zip
      summary: Export audit records
      tags:
      - Audit
      operationId: com.atlassian.confluence.plugins.restapi.resources.AuditResource.exportAuditRecords_get
      responses:
        '200':
          description: Returned if the requested export of the audit records is returned.
          content:
            application/zip:
              schema:
                format: binary
                type: string
            text/csv:
              schema:
                format: binary
                type: string
        '403':
          description: |-
            Returned if the calling user does not have permission to view the audit
            log.
  "/api/content/{id}/copy":
    post:
      tags:
      - Content
      summary: Copy single page
      operationId: com.atlassian.confluence.plugins.restapi.resources.ContentResource.copyPage_post
      requestBody:
        required: true
        description: Request object from json post body
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CopyPageRequest"
      description: |-
        Copies a single page and its associated properties, permissions, attachments, and custom contents.
         The `id` path parameter refers to the content ID of the page to copy. The target of the page to be copied
         is defined using the `destination` in the request body and can be one of the following types.

          - `space`: page will be copied to the specified space as a root page on the space
          - `parent_page`: page will be copied as a child of the specified parent page
          - `existing_page`: page will be copied and replace the specified page

        By default, the following objects are expanded: `space`, `history`, `version`.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: 'Add' permission for the space that the content will be copied in and permission to update the content if copying to an `existing_page`.
      parameters:
      - required: true
        name: id
        in: path
        schema:
          type: string
      - "$ref": "#/components/parameters/contentExpand"
      responses:
        '200':
          content:
            application/json;charset=UTF-8:
              schema:
                "$ref": "#/components/schemas/Content"
          description: Returned if the content is copied.
        '400':
          description: |-
            Returned if;

            - destination or any of its fields are not specified.
            - destination.type is invalid.
        '401':
          description: |-
            Returned if the authentication credentials are incorrect or missing
            from the request.
        '403':
          description: Returned if the user does not have permission to create content
            at destination.
        '404':
          description: |-
            Returned if;

            - the original page doesn't exist.
            - the destination page doesn’t exist.
            - the destination space doesn’t exist.
      x-atlassian-connect-scope: WRITE
      security:
      - oAuthDefinitions:
        - write:confluence-content
  "/api/space/_private":
    post:
      requestBody:
        required: true
        description: The space to be created.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/SpacePrivateCreate"
      description: |-
        Creates a new space that is only visible to the creator. This method is
        the same as the [Create space](#api-space-post) method with permissions
        set to the current user only. Note, currently you cannot set space
        labels when creating a space.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        'Create Space(s)' global permission.
      operationId: com.atlassian.confluence.plugins.restapi.resources.SpaceResource.createPrivateSpace_post
      summary: Create private space
      tags:
      - Space
      security:
      - oAuthDefinitions:
        - write:confluence-space
      x-atlassian-connect-scope: WRITE
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Space"
          description: Returned if the space is created.
        '400':
          description: |-
            Returned if any of the following is true:

            - The request is invalid.
            - The space already exists.
        '401':
          description: |-
            Returned if the authentication credentials are incorrect or missing
            from the request.
        '403':
          description: Returned if the user does not have permission to create a space.
  "/api/content/{id}/history/{version}/macro/id/{macroId}":
    get:
      operationId: com.atlassian.confluence.plugins.restapi.resources.ContentResource.getMacroBodyByMacroId_get
      summary: Get macro body by macro ID
      tags:
      - Content
      parameters:
      - required: true
        in: path
        name: id
        schema:
          type: string
        description: The ID for the content that contains the macro.
      - required: true
        name: version
        in: path
        schema:
          type: integer
          format: int32
        description: The version of the content that contains the macro.
      - description: |-
          The ID of the macro. This is usually passed by the app that the
          macro is in. Otherwise, find the macro ID by querying the desired
          content and version, then expanding the body in storage format.
          For example, '/content/196611/version/7?expand=content.body.storage'.
        schema:
          type: string
        name: macroId
        required: true
        in: path
      description: |-
        Returns the body of a macro in storage format, for the given macro ID.
        This includes information like the name of the macro, the body of the macro,
        and any macro parameters. This method is mainly used by Cloud apps.

        About the macro ID: When a macro is created in a new version of content,
        Confluence will generate a random ID for it, unless an ID is specified
        (by an app). The macro ID will look similar to this: '50884bd9-0cb8-41d5-98be-f80943c14f96'.
        The ID is then persisted as new versions of content are created, and is
        only modified by Confluence if there are conflicting IDs.

        Note, to preserve backwards compatibility this resource will also match on
        the hash of the macro body, even if a macro ID is found. This check will
        eventually become redundant, as macro IDs are generated for pages and
        transparently propagate out to all instances.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        Permission to view the content that the macro is in.
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/MacroInstance"
          description: Returned if the requested macro body is returned.
        '401':
          description: |-
            Returned if the authentication credentials are incorrect or missing
            from the request.
        '404':
          description: |-
            Returned if;

            - There is no content with the given ID.
            - The calling user does not have permission to view the content.
            - The macro does not exist in the specified version.
            - There is no macro matching the given macro ID or hash.
      security:
      - oAuthDefinitions:
        - read:confluence-content.all
      x-atlassian-connect-scope: READ
  "/api/content/{id}/child/attachment/{attachmentId}/data":
    post:
      operationId: com.atlassian.confluence.plugins.restapi.resources.AttachmentResource.updateAttachmentData_post
      tags:
      - Content
      summary: Update attachment data
      parameters:
      - schema:
          type: string
        description: The ID of the content that the attachment is attached to.
        in: path
        required: true
        name: id
      - schema:
          type: string
        description: The ID of the attachment to update.
        name: attachmentId
        required: true
        in: path
      description: |-
        Updates the binary data of an attachment, given the attachment ID, and
        optionally the comment and the minor edit field.

        This method is essentially the same as [Create or update attachments](#api-content-id-child-attachment-put),
        except that it matches the attachment ID rather than the name.

        Note, you must set a `X-Atlassian-Token: nocheck` header on the request
        for this method, otherwise it will be blocked. This protects against XSRF
        attacks, which is necessary as this method accepts multipart/form-data.

        The media type 'multipart/form-data' is defined in [RFC 1867](https://www.ietf.org/rfc/rfc1867.txt).
        Most client libraries have classes that make it easier to implement
        multipart posts, like the [MultiPartEntity](http://hc.apache.org/httpcomponents-client-ga/httpmime/apidocs/org/apache/http/entity/mime/MultipartEntity.html)
        Java class provided by Apache HTTP Components.

        Example: This curl command updates an attachment (id='att456') that is attached
        to a piece of content (id='123') with a comment and `minorEdits`=true.

        ``` bash
        curl -D- \
          -u admin:admin \
          -X POST \
          -H "X-Atlassian-Token: nocheck" \
          -F "file=@example.txt" \
          -F "minorEdit=true" \
          -F "comment=Example attachment comment" \
          http://myhost/rest/api/content/123/child/attachment/att456/data
        ```
        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        Permission to update the content.
      requestBody:
        "$ref": "#/components/requestBodies/com.atlassian.confluence.plugins.restapi.resources.AttachmentResource.createAttachments_post"
      responses:
        '200':
          description: Returned if the attachment is updated.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Content"
        '400':
          description: Returned if the attachment id is invalid.
        '404':
          description: Returned if no attachment is found for the attachment ID.
      security:
      - oAuthDefinitions:
        - write:confluence-file
      x-atlassian-connect-scope: WRITE
  "/api/space":
    get:
      operationId: com.atlassian.confluence.plugins.restapi.resources.SpaceResource.getSpaces_get
      summary: Get spaces
      tags:
      - Space
      parameters:
      - explode: true
        schema:
          type: array
          items:
            type: string
        description: |-
          The key of the space to be returned. To return multiple spaces,
          specify this parameter multiple times with different values.
        name: spaceKey
        required: false
        in: query
      - description: |-
          The id of the space to be returned. To return multiple spaces,
          specify this parameter multiple times with different values.
        schema:
          type: array
          items:
            format: int64
            type: integer
        explode: true
        required: false
        name: spaceId
        in: query
      - required: false
        in: query
        name: type
        schema:
          type: string
          enum:
          - global
          - personal
        description: Filter the results to spaces based on their type.
      - name: status
        required: false
        in: query
        description: Filter the results to spaces based on their status.
        schema:
          enum:
          - current
          - archived
          type: string
      - name: label
        required: false
        in: query
        schema:
          items:
            type: string
          type: array
        description: Filter the results to spaces based on their label.
        explode: true
      - required: false
        in: query
        name: favourite
        description: |-
          Filter the results to the favourite spaces of the user specified by
          `favouriteUserKey`. Note, 'favourite' spaces are also
          known as 'saved for later' spaces.
        schema:
          type: boolean
      - description: |-
          The userKey of the user, whose favourite spaces are used to filter
          the results when using the `favourite` parameter.

          Leave blank for the current user. Use [Get user](#api-user-get) to
          get the userKey for a user.
        schema:
          type: string
        required: false
        name: favouriteUserKey
        in: query
      - "$ref": "#/components/parameters/spaceExpand"
      - name: start
        required: false
        in: query
        schema:
          format: int32
          minimum: 0
          type: integer
          default: 0
        description: The starting index of the returned spaces.
      - description: |-
          The maximum number of spaces to return per page. Note, this may be
          restricted by fixed system limits.
        schema:
          type: integer
          default: 25
          format: int32
          minimum: 0
        required: false
        name: limit
        in: query
      description: |-
        Returns all spaces. The returned spaces are ordered alphabetically in
        ascending order by space key.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        Permission to access the Confluence site ('Can use' global permission).
        Note, the returned list will only contain spaces that the current user
        has permission to view.
      responses:
        '200':
          description: Returned if the requested spaces are returned.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SpaceArray"
        '401':
          description: |-
            Returned if the authentication credentials are incorrect or missing
            from the request.
      security:
      - oAuthDefinitions:
        - read:confluence-space.summary
      x-atlassian-connect-scope: READ
    post:
      x-atlassian-connect-scope: WRITE
      security:
      - oAuthDefinitions:
        - write:confluence-space
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Space"
          description: Returned if the space is created.
        '400':
          description: |-
            Returned if any of the following is true:

            - The request is invalid.
            - The space already exists.
        '401':
          description: |-
            Returned if the authentication credentials are incorrect or missing
            from the request.
        '403':
          description: Returned if the callig user does not have permission to create
            a space.
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/SpaceCreate"
        description: The space to be created.
        required: true
      description: |-
        Creates a new space. Note, currently you cannot set space labels when
        creating a space.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        'Create Space(s)' global permission.
      tags:
      - Space
      summary: Create space
      operationId: com.atlassian.confluence.plugins.restapi.resources.SpaceResource.createSpace_post
  "/api/user/memberof":
    get:
      description: |-
        Returns the groups that a user is a member of.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        Permission to access the Confluence site ('Can use' global permission).
      x-atlassian-connect-scope: READ
      parameters:
      - schema:
          type: string
        description: |-
          This parameter is no longer available and will be removed from the documentation soon.
          Use `accountId` instead.
          See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.
        required: false
        name: key
        in: query
      - schema:
          type: string
        description: |-
          This parameter is no longer available and will be removed from the documentation soon.
          Use `accountId` instead.
          See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.
        required: false
        in: query
        name: username
      - description: |-
          The account ID of the user, which uniquely identifies the user across all Atlassian products.
          For example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`.
        schema:
          type: string
        in: query
        required: true
        name: accountId
      - required: false
        name: start
        in: query
        schema:
          type: integer
          default: 0
          minimum: 0
          format: int32
        description: The starting index of the returned groups.
      - schema:
          format: int32
          minimum: 0
          default: 200
          type: integer
        description: |-
          The maximum number of groups to return per page.
          Note, this may be restricted by fixed system limits.
        name: limit
        required: false
        in: query
      summary: Get group memberships for user
      tags:
      - User
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/GroupArray"
          description: Returned if the requested groups are returned.
        '403':
          description: |-
            Returned if the calling user does not have permission to use
            Confluence.
      operationId: com.atlassian.confluence.plugins.restapi.resources.UserResource.getGroupMembershipsForUser_get
  "/api/inlinetasks/search":
    get:
      responses:
        '200':
          description: Returned if the query fetches zero or more results.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/TaskPageResponse"
        '403':
          description: |-
            Returned if the calling user does not have permission to view
            any content.
      x-atlassian-connect-scope: READ
      security:
      - oAuthDefinitions:
        - read:confluence-content.all
      summary: Get inline tasks based on search parameters
      tags:
      - InlineTasks
      operationId: com.atlassian.confluence.plugins.restapi.resources.TaskSearchResource.searchTasks_get
      description: |-
        Returns inline tasks based on the search query.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        Permission to access the Confluence site ('Can use' global permission). Only tasks
        in contents that the user has permission to view are returned.
      parameters:
      - schema:
          format: int32
          default: 0
          type: integer
        description: The starting offset for the results.
        required: false
        name: start
        in: query
      - description: The number of results to be returned.
        schema:
          format: int32
          type: integer
          default: 20
        required: false
        name: limit
        in: query
      - description: The space key of a space. Multiple space keys can be specified.
        schema:
          default:
          type: string
        in: query
        required: false
        name: spaceKey
      - required: false
        in: query
        name: pageId
        description: The page id of a page. Multiple page ids can be specified.
        schema:
          default:
          type: string
      - required: false
        name: assignee
        in: query
        description: Account ID of a user to whom a task is assigned. Multiple users
          can be specified.
        schema:
          type: string
          default:
      - required: false
        name: creator
        in: query
        description: Account ID of a user to who created a task. Multiple users can
          be specified.
        schema:
          type: string
          default:
      - description: Account ID of a user who completed a task. Multiple users can
          be specified.
        schema:
          default:
          type: string
        in: query
        required: false
        name: completedUser
      - schema:
          type: integer
          default:
          format: int64
        description: Start of date range based on due dates (inclusive).
        in: query
        required: false
        name: duedateFrom
      - description: End of date range based on due dates (inclusive).
        schema:
          format: int64
          default:
          type: integer
        required: false
        name: duedateTo
        in: query
      - schema:
          format: int64
          default:
          type: integer
        description: Start of date range based on create dates (inclusive).
        name: createdateFrom
        required: false
        in: query
      - required: false
        name: createdateTo
        in: query
        schema:
          format: int64
          type: integer
          default:
        description: End of date range based on create dates (inclusive).
      - description: Start of date range based on complete dates (inclusive).
        schema:
          format: int64
          type: integer
          default:
        in: query
        required: false
        name: completedateFrom
      - schema:
          format: int64
          type: integer
          default:
        description: End of date range based on complete dates (inclusive).
        in: query
        required: false
        name: completedateTo
      - required: false
        name: status
        in: query
        schema:
          enum:
          - complete
          - incomplete
          default:
          type: string
        description: The status of the task. (checked/unchecked)
  "/api/space/{spaceKey}/property/{key}":
    post:
      responses:
        '200':
          description: Returned if the space property is created.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SpaceProperty"
        '400':
          description: |-
            Returned if any of the following is true:

            - The space already has a value with the given key.
            - No property value was provided.
        '403':
          description: |-
            Returned if the user does not have the 'Admin' permission for the
            space.
        '413':
          description: Returned if the value for the property is too long.
      x-atlassian-connect-scope: WRITE
      security:
      - oAuthDefinitions:
        - write:confluence-props
      tags:
      - Space
      summary: Create space property for key
      operationId: com.atlassian.confluence.plugins.restapi.resources.SpacePropertyResource.createSpacePropertyForKey_post
      description: |-
        Creates a new space property. This is the same as `POST
        /api/space/{spaceKey}/property` but the key for the property is passed as a
        path parameter, rather than in the request body.

        **[Permissions required](https://confluence.atlassian.com/x/_AozKw)**:
        ‘Admin’ permission for the space.
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/SpacePropertyCreateNoKey"
        description: The space property to be created.
        required: true
      parameters:
      - description: The key of the space that the property will be created in.
        schema:
          type: string
        required: true
        name: spaceKey
        in: path
      - required: true
        in: path
        name: key
        schema:
          type: string
        description: The key of the property to be created.
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SpaceProperty"
          description: Returned if the requested space property is returned.
        '404':
          description: |-
            Returned if any of the following is true:

            - There is no space with the given key.
            - There is no property with the given key.
            - The calling user does not have permission to view the space.
      x-atlassian-connect-scope: READ
      security:
      - oAuthDefinitions:
        - read:confluence-props
      tags:
      - Space
      summary: Get space property
      operationId: com.atlassian.confluence.plugins.restapi.resources.SpacePropertyResource.getSpaceProperty_get
      description: |-
        Returns a space property.

        **[Permissions required](https://confluence.atlassian.com/x/_AozKw)**: ‘View’ permission for the space.
      parameters:
      - in: path
        required: true
        name: spaceKey
        schema:
          type: string
        description: The key of the space that the property is in.
      - required: true
        name: key
        in: path
        schema:
          type: string
        description: The key of the space property.
      - schema:
          type: array
          items:
            enum:
            - version
            - space
            type: string
        description: |-
          A multi-value parameter indicating which properties of the space
          property to expand. By default, the `version` object is expanded.

          - `version` returns information about the version of the content.
          - `space` returns the space that the properties are in.
        in: query
        required: false
        name: expand
        style: form
    put:
      x-atlassian-connect-scope: WRITE
      security:
      - oAuthDefinitions:
        - write:confluence-props
      responses:
        '200':
          description: Returned if the space property is updated.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SpaceProperty"
        '400':
          description: |-
            Returned if any of the following is true:

            - The given property has a different spaceKey to the one in the path.
            - The property has a different key to the one in the path.
        '403':
          description: |-
            Returned if the user does not have permission to edit the space with
            the given spaceKey
        '404':
          description: |-
            Returned if any of the following is true:

            - There is no space with the given spaceKey
            - There is no property with the given key.
            - The calling user does not have permission to view the space.
        '409':
          description: |-
            Returned if the given version is does not match the expected target
            version of the updated property
        '413':
          description: Returned if the value of the property is too long.
      description: |-
        Updates a space property. Note, you cannot update the key of a space
        property, only the value.

        **[Permissions required](https://confluence.atlassian.com/x/_AozKw)**:
        ‘Admin’ permission for the space.
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/SpacePropertyUpdate"
        description: The space property being updated.
        required: true
      parameters:
      - name: spaceKey
        required: true
        in: path
        description: The key of the space that the property is in.
        schema:
          type: string
      - in: path
        required: true
        name: key
        description: The key of the property to be updated.
        schema:
          type: string
      tags:
      - Space
      summary: Update space property
      operationId: com.atlassian.confluence.plugins.restapi.resources.SpacePropertyResource.updateSpaceProperty_put
    delete:
      description: |-
        Deletes a space property.

        **[Permissions required](https://confluence.atlassian.com/x/_AozKw)**:
        ‘Admin’ permission for the space.
      parameters:
      - description: The key of the space that the property is in.
        schema:
          type: string
        required: true
        name: spaceKey
        in: path
      - required: true
        name: key
        in: path
        description: The key of the property to be deleted.
        schema:
          type: string
      tags:
      - Space
      summary: Delete space property
      operationId: com.atlassian.confluence.plugins.restapi.resources.SpacePropertyResource.deleteSpaceProperty_delete
      x-atlassian-connect-scope: DELETE
      security:
      - oAuthDefinitions:
        - write:confluence-props
      responses:
        '204':
          description: Returned if the space property is deleted.
        '404':
          description: |-
            Returned if any of the following is true:

            - There is no space with the given spaceKey
            - There is no property with the given key.
            - The calling user does not have permission to view the space.
  "/api/experimental/cql/pdcleaner":
    post:
      x-atlassian-connect-scope: INACCESSIBLE
      description: |-
        Converts one or more CQL queries with user identifiers (username or user key)
        to equivalent CQL queries with account IDs.

        You may wish to use this operation if your system stores CQL queries and you
        want to make them GDPR-compliant. For more information about GDPR-related changes,
        see the [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/).

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: None
      requestBody:
        description: The CQL queries to convert.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CQLPersonalDataMigrationRequest"
        required: true
      operationId: com.atlassian.confluence.plugins.restapi.resources.ExperimentalCQLResource.cqlPDCleaner_post
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CQLPersonalDataConvertedQueries"
              examples:
                response:
                  value: '{ "queryStrings": [ "type = page and creator != ''847586:5371623a-12b4-1a11-ed01-a53542f02dd1''
                    and space = DEV"] }'
          description: |-
            Returned if the request is successful. The CQL queries are returned
            in the same order that they were passed. Note that if the user in a
            CQL query cannot be found, a `200` code is still returned but the username
            or key is converted to an empty string.
        '400':
          description: |-
            Returned if:

            * At least one of the queries cannot be converted. For example, the
            CQL has invalid operators or invalid keywords.
            * More than 100 CQL queries are included in the request.
      summary: Convert user identifiers to account IDs in CQL queries
      tags:
      - Experimental
  "/api/space/{spaceKey}/permission":
    post:
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SpacePermissionV2"
          description: Returned if the requested content is returned.
        '400':
          description: |-
            Used for various errors. Such as:
            - Permission already exists for the given user or group.
            - 'read space' permission doesn't exist for the given user or group.
            - No group found with the given groupName
        '401':
          description: |-
            Returned if the authentication credentials are incorrect or missing
            from the request.
        '403':
          description: Returned if the user isn't authorized.
        '404':
          description: |-
            Returned if any of the following is true:
            - There is no space with the given key.
            - The calling user does not have permission to view the space.
      x-atlassian-connect-scope: INACCESSIBLE
      tags:
      - Experimental
      summary: Add new permission to space
      operationId: com.atlassian.confluence.plugins.restapi.resources.SpacePermissionResource.addPermission
      x-experimental: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/SpacePermissionV2"
        description: The permission to be created.
      description: |-
        Adds new permission to space.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        'Admin' permission for the space.
      parameters:
      - schema:
          type: string
        description: The key of the space to be queried for its content.
        in: path
        required: true
        name: spaceKey
  "/api/content/{id}/version":
    post:
      parameters:
      - required: true
        name: id
        in: path
        description: The ID of the content for which the history will be restored.
        schema:
          type: string
      - schema:
          type: array
          items:
            type: string
            enum:
            - collaborators
            - content
        description: |-
          A multi-value parameter indicating which properties of the returned
          content to expand.

          - `collaborators` returns the users that collaborated on the version.
          - `content` returns the content for the version.
        style: form
        name: expand
        in: query
      description: |-
        Restores a historical version to be the latest version. That is, a new version
        is created with the content of the historical version.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        Permission to update the content.
      requestBody:
        description: The content version to be restored.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/VersionRestore"
        required: true
      operationId: com.atlassian.confluence.plugins.restapi.resources.ContentVersionResource.restoreContentVersion_post
      summary: Restore content version
      tags:
      - Content
      security:
      - oAuthDefinitions:
        - write:confluence-content
      x-atlassian-connect-scope: WRITE
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Version"
          description: Returned if the version is restored.
        '400':
          description: |-
            Returned if;

            - There is no content with the given ID.
            - There is no version with the given version number.
            - The version number is the current version.
        '403':
          description: |-
            Returned if the calling user doesn't have permission to edit the
            content.
    get:
      parameters:
      - description: The ID of the content to be queried for its versions.
        schema:
          type: string
        in: path
        required: true
        name: id
      - description: The starting index of the returned versions.
        schema:
          default: 0
          type: integer
          minimum: 0
          format: int32
        required: false
        name: start
        in: query
      - description: |-
          The maximum number of versions to return per page.
          Note, this may be restricted by fixed system limits.
        schema:
          type: integer
          default: 200
          minimum: 0
          format: int32
        required: false
        name: limit
        in: query
      - schema:
          items:
            type: string
            enum:
            - collaborators
            - content
          type: array
        description: |-
          A multi-value parameter indicating which properties of the content to expand.

          - `collaborators` returns the users that collaborated on the version.
          - `content` returns the content for the version.
        required: false
        in: query
        name: expand
        style: form
      description: |-
        Returns the versions for a piece of content in descending order.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        Permission to view the content. If the content is a blog post, 'View' permission
        for the space is required.
      operationId: com.atlassian.confluence.plugins.restapi.resources.ContentVersionResource.getContentVersions_get
      tags:
      - Content
      summary: Get content versions
      security:
      - oAuthDefinitions:
        - read:confluence-content.summary
      x-atlassian-connect-scope: READ
      responses:
        '200':
          description: Returned if the requested versions are returned.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VersionArray"
        '403':
          description: |-
            Returned if the calling user does not have permission to view the
            content.
  "/api/content":
    post:
      summary: Create content
      tags:
      - Content
      operationId: com.atlassian.confluence.plugins.restapi.resources.ContentResource.createContent_post
      description: |-
        Creates a new piece of content or publishes an existing draft.

        To publish a draft, add the `id` and `status` properties to the body of the request.
        Set the `id` to the ID of the draft and set the `status` to 'current'. When the
        request is sent, a new piece of content will be created and the metadata from the
        draft will be transferred into it.

        By default, the following objects are expanded: `space`, `history`, `version`.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: 'Add' permission for the
        space that the content will be created in, and permission to view the draft if publishing a draft.
      requestBody:
        description: |-
          The new content to be created. Set the `representation` to the name of the body
          format type. For example, if you use `storage` for the body format, set
          '`representation`=`storage`'. See
          [Confluence storage format](https://confluence.atlassian.com/x/AJkiLw).

          If you are not sure how to generate the different formats, you can create a page in the
          Confluence application, retrieve the content using [Get content](#api-content-get),
          and expand the desired content format, e.g. `expand=body.storage`.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ContentCreate"
        required: true
      parameters:
      - name: status
        required: false
        in: query
        description: Filter the returned content by status.
        schema:
          type: string
          default: current
      - "$ref": "#/components/parameters/contentExpand"
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Content"
          description: Returned if the content is created.
        '401':
          description: |-
            Returned if the authentication credentials are incorrect or missing
            from the request.
        '403':
          description: |-
            Returned if;

            - The space that the content is being created in does not exist.
            - If the requesting user does not have permission to create content in it.
      x-atlassian-connect-scope: WRITE
      security:
      - oAuthDefinitions:
        - write:confluence-content
    get:
      description: |-
        Returns all content in a Confluence instance.

        By default, the following objects are expanded: `space`, `history`, `version`.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        Permission to access the Confluence site ('Can use' global permission).
        Only content that the user has permission to view will be returned.
      parameters:
      - required: false
        in: query
        name: type
        description: The type of content to return.
        schema:
          enum:
          - page
          - blogpost
          default: page
          type: string
      - description: The key of the space to be queried for its content.
        schema:
          type: string
        in: query
        required: false
        name: spaceKey
      - name: title
        required: false
        in: query
        description: The title of the page to be returned. Required for <code>page</code>
          type.
        schema:
          type: string
      - description: |-
          Filter the results to a set of content based on their status. If set to `any`,
          content with any status is returned. Note, the `historical` status is currently
          not supported.
        schema:
          type: array
          default: current
          items:
            type: string
          enum:
          - current
          - trashed
          - draft
          - any
        explode: true
        in: query
        required: false
        name: status
      - schema:
          type: string
        description: |-
          The posting date of the blog post to be returned. Required for
          <code>blogpost</code> type. Format: <code>yyyy-mm-dd</code>.
        required: false
        in: query
        name: postingDay
      - "$ref": "#/components/parameters/contentExpand"
      - schema:
          enum:
          - viewed
          type: string
        description: |-
          If set to `viewed`, the request will trigger a 'viewed' event for the content.
          When this event is triggered, the page/blogpost will appear on the 'Recently visited'
          tab of the user's Confluence dashboard.
        required: false
        in: query
        name: trigger
      - required: false
        name: orderby
        in: query
        description: |-
          Orders the content by a particular field. Specify the field and sort direction for
          this parameter, as follows: 'fieldpath asc/desc'. For example, 'history.createdDate desc'.
        schema:
          type: string
      - description: The starting index of the returned content.
        schema:
          default: 0
          type: integer
          minimum: 0
          format: int32
        required: false
        in: query
        name: start
      - required: false
        name: limit
        in: query
        description: |-
          The maximum number of content objects to return per page.
          Note, this may be restricted by fixed system limits.
        schema:
          default: 25
          type: integer
          minimum: 0
          format: int32
      tags:
      - Content
      summary: Get content
      operationId: com.atlassian.confluence.plugins.restapi.resources.ContentResource.getContent_get
      x-atlassian-connect-scope: READ
      security:
      - oAuthDefinitions:
        - read:confluence-content.summary
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ContentArray"
          description: Returned if the requested list of content is returned.
        '401':
          description: |-
            Returned if the authentication credentials are incorrect or missing
            from the request.
        '404':
          description: |-
            Returned if the calling user does not have permission to view the
            requested content.
  "/api/relation/{relationName}/from/{sourceType}/{sourceKey}/to/{targetType}/{targetKey}":
    put:
      summary: Create relationship
      tags:
      - Relation
      operationId: com.atlassian.confluence.plugins.restapi.resources.RelationResource.createRelationship_put
      description: |-
        Creates a relationship between two entities (user, space, content). The
        'favourite' relationship is supported by default, but you can use this method
        to create any type of relationship between two entities.

        For example, the following method creates a 'sibling' relationship between
        two pieces of content:
        `GET https://your-domain.atlassian.net/wiki/rest/api/relation/sibling/from/content/123/to/content/456`

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        Permission to access the Confluence site ('Can use' global permission).
      parameters:
      - name: relationName
        required: true
        in: path
        schema:
          type: string
        description: |-
          The name of the relationship. This method supports the 'favourite'
          (i.e. 'save for later') relationship. You can also specify any other
          value for this parameter to create a custom relationship type.
      - description: |-
          The source entity type of the relationship. This must be 'user', if
          the `relationName` is 'favourite'.
        schema:
          type: string
          enum:
          - user
          - content
          - space
        required: true
        name: sourceType
        in: path
      - schema:
          type: string
        description: |-
          - The identifier for the source entity:

          - If `sourceType` is 'user', then specify either 'current' (logged-in
            user) or the user key.
          - If `sourceType` is 'content', then specify the content ID.
          - If `sourceType` is 'space', then specify the space key.
        in: path
        required: true
        name: sourceKey
      - name: targetType
        required: true
        in: path
        description: |-
          The target entity type of the relationship. This must be 'space' or
          'content', if the `relationName` is 'favourite'.
        schema:
          enum:
          - user
          - content
          - space
          type: string
      - name: targetKey
        required: true
        in: path
        description: |-
          - The identifier for the target entity:

          - If `sourceType` is 'user', then specify either 'current' (logged-in
            user) or the user key.
          - If `sourceType` is 'content', then specify the content ID.
          - If `sourceType` is 'space', then specify the space key.
        schema:
          type: string
      - schema:
          type: string
        description: |-
          The status of the source. This parameter is only used when the
          `sourceType` is 'content'.
        required: false
        name: sourceStatus
        in: query
      - name: targetStatus
        required: false
        in: query
        schema:
          type: string
        description: |-
          The status of the target. This parameter is only used when the
          `targetType` is 'content'.
      - description: |-
          The version of the source. This parameter is only used when the
          `sourceType` is 'content' and the `sourceStatus` is 'historical'.
        schema:
          format: int32
          type: integer
        required: false
        name: sourceVersion
        in: query
      - description: |-
          The version of the target. This parameter is only used when the
          `targetType` is 'content' and the `targetStatus` is 'historical'.
        schema:
          format: int32
          type: integer
        required: false
        name: targetVersion
        in: query
      responses:
        '200':
          description: Returned if the relationship is created.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Relation"
        '403':
          description: Returned if the user does not have permission to use Confluence.
        '404':
          description: Returned if the user, space or content could not be found.
      x-atlassian-connect-scope: WRITE
      security:
      - oAuthDefinitions:
        - write:confluence-content
    delete:
      security:
      - oAuthDefinitions:
        - write:confluence-content
      x-atlassian-connect-scope: DELETE
      responses:
        '204':
          description: |-
            Returned if the relationship is deleted or the relationship didn't
            exist.
        '403':
          description: |-
            Returned if the user does not have permission to delete the
            relationship.
        '404':
          description: Returned if the user, space or content could not be found.
      parameters:
      - required: true
        name: relationName
        in: path
        schema:
          type: string
        description: The name of the relationship.
      - schema:
          type: string
          enum:
          - user
          - content
          - space
        description: |-
          The source entity type of the relationship. This must be 'user', if
          the `relationName` is 'favourite'.
        in: path
        required: true
        name: sourceType
      - schema:
          type: string
        description: |-
          - The identifier for the source entity:

          - If `sourceType` is 'user', then specify either 'current' (logged-in
            user) or the user key.
          - If `sourceType` is 'content', then specify the content ID.
          - If `sourceType` is 'space', then specify the space key.
        required: true
        in: path
        name: sourceKey
      - name: targetType
        required: true
        in: path
        description: |-
          The target entity type of the relationship. This must be 'space' or
          'content', if the `relationName` is 'favourite'.
        schema:
          type: string
          enum:
          - user
          - content
          - space
      - name: targetKey
        required: true
        in: path
        schema:
          type: string
        description: |-
          - The identifier for the target entity:

          - If `sourceType` is 'user', then specify either 'current' (logged-in
            user) or the user key.
          - If `sourceType` is 'content', then specify the content ID.
          - If `sourceType` is 'space', then specify the space key.
      - description: |-
          The status of the source. This parameter is only used when the
          `sourceType` is 'content'.
        schema:
          type: string
        required: false
        in: query
        name: sourceStatus
      - schema:
          type: string
        description: |-
          The status of the target. This parameter is only used when the
          `targetType` is 'content'.
        in: query
        required: false
        name: targetStatus
      - description: |-
          The version of the source. This parameter is only used when the
          `sourceType` is 'content' and the `sourceStatus` is 'historical'.
        schema:
          type: integer
          format: int32
        required: false
        name: sourceVersion
        in: query
      - name: targetVersion
        required: false
        in: query
        description: |-
          The version of the target. This parameter is only used when the
          `targetType` is 'content' and the `targetStatus` is 'historical'.
        schema:
          format: int32
          type: integer
      description: |-
        Deletes a relationship between two entities (user, space, content).

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        Permission to access the Confluence site ('Can use' global permission).
        For favourite relationships, the current user can only delete their own
        favourite relationships. A space administrator can delete favourite
        relationships for any user.
      operationId: com.atlassian.confluence.plugins.restapi.resources.RelationResource.delete_delete
      tags:
      - Relation
      summary: Delete
    get:
      description: |-
        Find whether a particular type of relationship exists from a source
        entity to a target entity. Note, relationships are one way.

        For example, you can use this method to find whether the current user has
        selected a particular page as a favorite (i.e. 'save for later'):
        `GET https://your-domain.atlassian.net/wiki/rest/api/relation/favourite/from/user/current/to/content/123`

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        Permission to view both the target entity and source entity.
      parameters:
      - name: relationName
        required: true
        in: path
        description: |-
          The name of the relationship. This method supports the 'favourite'
          (i.e. 'save for later') relationship as well as any other relationship
          types created via [Create relationship](#api-relation-relationName-from-sourceType-sourceKey-to-targetType-targetKey-put).
        schema:
          type: string
      - schema:
          enum:
          - user
          - content
          - space
          type: string
        description: |-
          The source entity type of the relationship. This must be 'user', if
          the `relationName` is 'favourite'.
        required: true
        name: sourceType
        in: path
      - in: path
        required: true
        name: sourceKey
        schema:
          type: string
        description: |-
          - The identifier for the source entity:

          - If `sourceType` is `user`, then specify either `current` (logged-in user), the user key of the user, or
          the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the
          [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)
          for details.
          - If `sourceType` is 'content', then specify the content ID.
          - If `sourceType` is 'space', then specify the space key.
      - schema:
          enum:
          - user
          - content
          - space
          type: string
        description: |-
          The target entity type of the relationship. This must be 'space' or
          'content', if the `relationName` is 'favourite'.
        in: path
        required: true
        name: targetType
      - name: targetKey
        required: true
        in: path
        schema:
          type: string
        description: |-
          The identifier for the target entity:

          - If `targetType` is `user`, then specify either `current` (logged-in user), the user key of the user, or
          the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the
          [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)
          for details.
          - If `targetType` is 'content', then specify the content ID.
          - If `targetType` is 'space', then specify the space key.
      - description: |-
          The status of the source. This parameter is only used when the
          `sourceType` is 'content'.
        schema:
          type: string
        required: false
        in: query
        name: sourceStatus
      - schema:
          type: string
        description: |-
          The status of the target. This parameter is only used when the
          `targetType` is 'content'.
        required: false
        name: targetStatus
        in: query
      - name: sourceVersion
        required: false
        in: query
        description: |-
          The version of the source. This parameter is only used when the
          `sourceType` is 'content' and the `sourceStatus` is 'historical'.
        schema:
          format: int32
          type: integer
      - description: |-
          The version of the target. This parameter is only used when the
          `targetType` is 'content' and the `targetStatus` is 'historical'.
        schema:
          format: int32
          type: integer
        required: false
        name: targetVersion
        in: query
      - schema:
          type: array
          items:
            enum:
            - relationData
            - source
            - target
            type: string
        description: |-
          A multi-value parameter indicating which properties of the response
          object to expand.

          - `relationData` returns information about the relationship, such as
          who created it and when it was created.
          - `source` returns the source entity.
          - `target` returns the target entity.
        required: false
        name: expand
        in: query
        style: form
      tags:
      - Relation
      summary: Find relationship from source to target
      operationId: com.atlassian.confluence.plugins.restapi.resources.RelationResource.GetRelationship_get
      x-atlassian-connect-scope: READ
      security:
      - oAuthDefinitions:
        - read:confluence-content.summary
      responses:
        '200':
          description: Returned if the relationship exists.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Relation"
        '403':
          description: |-
            Returned if the user does not have permission to view the
            relationship.
        '404':
          description: Returned if the relationship does not exist.
  "/api/content/{id}/history":
    get:
      security:
      - oAuthDefinitions:
        - read:confluence-content.summary
      x-atlassian-connect-scope: READ
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ContentHistory"
          description: Returned if the requested content history is returned.
        '401':
          description: |-
            Returned if the authentication credentials are incorrect or missing
            from the request.
        '404':
          description: |-
            Returned if;

            - There is no content with the given ID.
            - The calling user does not have permission to view the content.
      parameters:
      - required: true
        in: path
        name: id
        schema:
          type: string
        description: The ID of the content to be queried for its history.
      - style: form
        in: query
        required: false
        name: expand
        schema:
          type: array
          items:
            type: string
            enum:
            - lastUpdated
            - previousVersion
            - contributors
            - nextVersion
        description: |-
          A multi-value parameter indicating which properties of the content history to expand.

          - `lastUpdated` returns information about the most recent update of the content,
          including who updated it and when it was updated.
          - `previousVersion` returns information about the update prior to the current content
          update. For this method, it contains the same information as `lastUpdated`.
          - `contributors` returns all of the users who have contributed to the content.
          - `nextVersion` This parameter is not used for this method.
      description: |-
        Returns the most recent update for a piece of content.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the content.
      operationId: com.atlassian.confluence.plugins.restapi.resources.ContentResource.getHistoryForContent_get
      tags:
      - Content
      summary: Get history for content
  "/api/user":
    get:
      summary: Get user
      tags:
      - User
      operationId: com.atlassian.confluence.plugins.restapi.resources.UserResource.getUser_get
      responses:
        '200':
          description: Returned if the requested user is returned.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/User"
        '401':
          description: |-
            Returned if the authentication credentials are incorrect or missing
            from the request.
        '403':
          description: Returned if the calling user does not have permission to view
            users.
        '404':
          description: Returned if a user with the given accountId does not exist.
      x-atlassian-connect-scope: READ
      description: |-
        Returns a user. This includes information about the user, such as the
        display name, account ID, profile picture, and more. The information returned may be
        restricted by the user's profile visibility settings.

        **Note:** to add, edit, or delete users in your organization, see the
        [user management REST API](/cloud/admin/user-management/about/).

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        Permission to access the Confluence site ('Can use' global permission).
      parameters:
      - description: |-
          This parameter is no longer available and will be removed from the documentation soon.
          Use `accountId` instead.
          See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.
        schema:
          type: string
        required: false
        name: key
        in: query
      - schema:
          type: string
        description: |-
          This parameter is no longer available and will be removed from the documentation soon.
          Use `accountId` instead.
          See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.
        name: username
        required: false
        in: query
      - description: |-
          The account ID of the user, which uniquely identifies the user across all Atlassian products.
          For example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`.
        schema:
          type: string
        in: query
        required: true
        name: accountId
      - style: form
        required: false
        name: expand
        in: query
        description: |-
          A multi-value parameter indicating which properties of the user to
          expand.

            - `operations` returns the operations that the user is allowed to do.
            - `details.personal` returns the 'Personal' details in the user's profile, like the 'Email' and 'Phone'.
            Note that these fields have been deprecated due to privacy changes. See the
            [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)
            for details.
            - `details.business` returns the 'Company' details in the user's profile, like the 'Position' and 'Department'.
            Note that these fields have been deprecated due to privacy changes. See the
            [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)
            for details.
            - personalSpace returns the user's personal space, if it exists.
        schema:
          items:
            enum:
            - operations
            - details.personal
            - details.business
            - personalSpace
            type: string
          type: array
  "/api/template/blueprint":
    get:
      summary: Get blueprint templates
      tags:
      - Template
      operationId: com.atlassian.confluence.plugins.restapi.resources.TemplateResource.getBlueprintTemplates_get
      description: |-
        Returns all templates provided by blueprints. Use this method to retrieve
        all global blueprint templates or all blueprint templates in a space.

        Note, all global blueprints are inherited by each space. Space blueprints
        can be customised without affecting the global blueprints.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        Permission to access the Confluence site ('Can use' global permission).
      parameters:
      - schema:
          type: string
        description: |-
          The key of the space to be queried for templates. If the `spaceKey`
          is not specified, global blueprint templates will be returned.
        in: query
        required: false
        name: spaceKey
      - name: start
        required: false
        in: query
        description: The starting index of the returned templates.
        schema:
          format: int32
          minimum: 0
          type: integer
          default: 0
      - schema:
          format: int32
          minimum: 0
          default: 25
          type: integer
        description: |-
          The maximum number of templates to return per page.
          Note, this may be restricted by fixed system limits.
        in: query
        required: false
        name: limit
      - style: form
        required: false
        in: query
        name: expand
        schema:
          type: array
          items:
            type: string
            enum:
            - body
        description: |-
          A multi-value parameter indicating which properties of the template
          to expand.

          - `body` returns the content of the template in storage format.
      responses:
        '200':
          description: Returned if the requested templates are returned.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/BlueprintTemplateArray"
        '403':
          description: |-
            Returned if the calling user does not have permission to view
            blueprint templates.
      x-atlassian-connect-scope: READ
      security:
      - oAuthDefinitions:
        - read:confluence-content.summary
  "/api/settings/theme":
    get:
      operationId: com.atlassian.confluence.plugins.restapi.resources.ThemeResource.getThemes_get
      summary: Get themes
      tags:
      - Settings
      parameters:
      - schema:
          minimum: 0
          format: int32
          default: 0
          type: integer
        description: The starting index of the returned themes.
        required: false
        name: start
        in: query
      - description: |-
          The maximum number of themes to return per page.
          Note, this may be restricted by fixed system limits.
        schema:
          type: integer
          default: 100
          format: int32
          minimum: 0
        name: limit
        required: false
        in: query
      description: |-
        Returns all themes, not including the default theme.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: None
      responses:
        '200':
          description: Returned if the requested themes are returned.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ThemeArray"
      security:
      - oAuthDefinitions:
        - manage:confluence-configuration
      x-atlassian-connect-scope: READ
  "/api/audit/retention":
    get:
      description: |-
        Returns the retention period for records in the audit log. The retention
        period is how long an audit record is kept for, from creation date until
        it is deleted.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        'Confluence Administrator' global permission.
      x-atlassian-connect-scope: INACCESSIBLE
      summary: Get retention period
      tags:
      - Audit
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RetentionPeriod"
          description: Returned if the requested retention period is returned.
        '403':
          description: |-
            Returned if the calling user does not have permission to view the audit
            log.
      operationId: com.atlassian.confluence.plugins.restapi.resources.AuditResource.getRetentionPeriod_get
    put:
      requestBody:
        required: true
        description: The updated retention period.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/RetentionPeriod"
      description: |-
        Sets the retention period for records in the audit log. The retention period
        can be set to a maximum of 20 years.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        'Confluence Administrator' global permission.
      x-atlassian-connect-scope: INACCESSIBLE
      responses:
        '200':
          description: Returned if the retention period is updated.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RetentionPeriod"
        '403':
          description: |-
            Returned if the calling user does not have permission to view the audit
            log.
      operationId: com.atlassian.confluence.plugins.restapi.resources.AuditResource.setRetentionPeriod_put
      tags:
      - Audit
      summary: Set retention period
  "/api/space/{spaceKey}/permission/{id}":
    delete:
      responses:
        '204':
          description: Permission successfully removed.
        '400':
          description: |-
            Used for various errors. Such as:
            - All of the admin permissions cannot be removed from a space.
        '401':
          description: |-
            Returned if the authentication credentials are incorrect or missing
            from the request.
        '403':
          description: Returned if the user isn't authorized.
        '404':
          description: |-
            Returned if any of the following is true:
            - There is no permission with the given id.
            - There is no space with the given key.
            - The calling user does not have permission to view the space.
      x-atlassian-connect-scope: INACCESSIBLE
      x-experimental: true
      operationId: com.atlassian.confluence.plugins.restapi.resources.SpacePermissionResource.removePermission
      tags:
      - Experimental
      summary: Remove a space permission
      parameters:
      - schema:
          type: string
        description: The key of the space to be queried for its content.
        required: true
        in: path
        name: spaceKey
      - in: path
        required: true
        name: id
        description: Id of the permission to be deleted.
        schema:
          type: integer
      description: |-
        Removes a space permission. Note that removing Read Space permission for a user or group will remove all
        the space permissions for that user or group.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        'Admin' permission for the space.
  "/api/template/{contentTemplateId}":
    get:
      x-atlassian-connect-scope: READ
      security:
      - oAuthDefinitions:
        - read:confluence-content.summary
      responses:
        '200':
          description: Returned if the requested template is returned.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ContentTemplate"
        '403':
          description: |-
            Returned if;

            - There is no template with the given ID.
            - The calling user does not have permission to view the template.
      description: |-
        Returns a content template. This includes information about template,
        like the name, the space or blueprint that the template is in, the body
        of the template, and more.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        'Admin' permission for the space to view space templates and 'Confluence
        Administrator' global permission to view global templates.
      parameters:
      - name: contentTemplateId
        required: true
        in: path
        schema:
          type: string
        description: The ID of the content template to be returned.
      tags:
      - Template
      summary: Get content template
      operationId: com.atlassian.confluence.plugins.restapi.resources.TemplateResource.getContentTemplate_get
    delete:
      tags:
      - Template
      summary: Remove template
      operationId: com.atlassian.confluence.plugins.restapi.resources.TemplateResource.removeTemplate_delete
      description: |-
        Deletes a template. This results in different actions depending on the
        type of template:

        - If the template is a content template, it is deleted.
        - If the template is a modified space-level blueprint template, it reverts
        to the template inherited from the global-level blueprint template.
        - If the template is a modified global-level blueprint template, it reverts
        to the default global-level blueprint template.

         Note, unmodified blueprint templates cannot be deleted.
      parameters:
      - schema:
          type: string
        description: The ID of the template to be deleted.
        required: true
        name: contentTemplateId
        in: path
      responses:
        '204':
          description: Returned if the template has been successfully been deleted.
      x-atlassian-connect-scope: DELETE
      security:
      - oAuthDefinitions:
        - write:confluence-content
  "/api/space/{spaceKey}/property":
    post:
      tags:
      - Space
      summary: Create space property
      operationId: com.atlassian.confluence.plugins.restapi.resources.SpacePropertyResource.createSpaceProperty_post
      description: |-
        Creates a new space property.

        **[Permissions required](https://confluence.atlassian.com/x/_AozKw)**:
        ‘Admin’ permission for the space.
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/SpacePropertyCreate"
        description: The space property to be created.
        required: true
      parameters:
      - in: path
        required: true
        name: spaceKey
        schema:
          type: string
        description: The key of the space that the property will be created in.
      responses:
        '200':
          description: Returned if the space property is created.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SpaceProperty"
        '400':
          description: |-
            Returned if any of the following is true:

            - The space already has a value with the given key.
            - No property value was provided.
        '403':
          description: Returned if the user does not have 'Admin' permission for the
            space.
        '413':
          description: Returned if the value for the property is too long.
      x-atlassian-connect-scope: WRITE
      security:
      - oAuthDefinitions:
        - write:confluence-props
    get:
      operationId: com.atlassian.confluence.plugins.restapi.resources.SpacePropertyResource.getSpaceProperties_get
      tags:
      - Space
      summary: Get space properties
      parameters:
      - description: The key of the space to be queried for its properties.
        schema:
          type: string
        required: true
        in: path
        name: spaceKey
      - required: false
        name: expand
        in: query
        style: form
        description: |-
          A multi-value parameter indicating which properties of the space
          property to expand. By default, the `version` object is expanded.

          - `version` returns information about the version of the content.
          - `space` returns the space that the properties are in.
        schema:
          items:
            enum:
            - version
            - space
            type: string
          type: array
      - in: query
        required: false
        name: start
        schema:
          default: 0
          type: integer
          minimum: 0
          format: int32
        description: The starting index of the returned objects.
      - description: |-
          The maximum number of properties to return per page. Note, this may be
          restricted by fixed system limits.
        schema:
          minimum: 0
          format: int32
          type: integer
          default: 10
        name: limit
        required: false
        in: query
      description: |-
        Returns all properties for the given space. Space properties are a key-value storage associated with a space.

        **[Permissions required](https://confluence.atlassian.com/x/_AozKw)**: ‘View’ permission for the space.
      responses:
        '200':
          description: Returned if the requested space properties are returned.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SpacePropertyArray"
        '404':
          description: |-
            Returned if any of the following is true:

            - There is no space with the given key.
            - The calling user does not have permission to view the space.
      security:
      - oAuthDefinitions:
        - read:confluence-props
      x-atlassian-connect-scope: READ
  "/api/content/{id}/pagehierarchy/copy":
    post:
      parameters:
      - schema:
          type: string
        required: true
        in: path
        name: id
      description: |-
        Copy page hierarchy allows the copying of an entire hierarchy of pages and their associated properties, permissions and attachments.
         The id path parameter refers to the content id of the page to copy, and the new parent of this copied page is defined using the destinationPageId in the request body.
         The titleOptions object defines the rules of renaming page titles during the copy;
         for example, search and replace can be used in conjunction to rewrite the copied page titles.

         Response example:
         <pre><code>
         {
              "id" : "1180606",
              "links" : {
                   "status" : "/rest/api/longtask/1180606"
              }
         }
         </code></pre>
         Use the /longtask/<taskId> REST API to get the copy task status.
      requestBody:
        description: Request object from json post body
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CopyPageHierarchyRequest"
        required: true
      operationId: com.atlassian.confluence.plugins.restapi.resources.PageHierarchyResource.copyPageHierarchy_post
      summary: Copy page hierarchy
      tags:
      - Content
      security:
      - oAuthDefinitions:
        - write:confluence-content
      x-atlassian-connect-scope: WRITE
      responses:
        '200':
          description: Returns a full JSON representation of a long running task
        '400':
          description: Returned if original page or destination page doesn't exist.
        '403':
          description: Returned if the user does not have permission to create content
            at destination
  "/api/space/{spaceKey}/watch":
    get:
      description: Returns a list of watchers of a space
      x-atlassian-connect-scope: READ
      parameters:
      - description: The key of the space to get watchers.
        schema:
          type: string
        name: spaceKey
        required: true
        in: path
      - schema:
          type: string
        description: The start point of the collection to return.
        required: false
        in: query
        name: start
      - description: The limit of the number of items to return, this may be restricted
          by fixed system limits.
        schema:
          type: string
        required: false
        in: query
        name: limit
      tags:
      - Space
      summary: Returns a list of watchers of a space
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SpaceWatchArray"
          description: Returned if watchers list is returned.
        '404':
          description: Returned if there is no space with the given key
      operationId: com.atlassian.confluence.plugins.restapi.resources.SpaceResource.getWatchersForSpace_get
  "/api/space/{spaceKey}/content/{type}":
    get:
      security:
      - oAuthDefinitions:
        - read:confluence-content.summary
      x-atlassian-connect-scope: READ
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ContentArray"
          description: Returned if the requested content is returned.
        '401':
          description: |-
            Returned if the authentication credentials are incorrect or missing
            from the request.
        '404':
          description: |-
            Returned if any of the following is true:

            - There is no space with the given key.
            - The calling user does not have permission to view the space.
      parameters:
      - schema:
          type: string
        description: The key of the space to be queried for its content.
        required: true
        in: path
        name: spaceKey
      - required: true
        in: path
        name: type
        schema:
          enum:
          - page
          - blogpost
          type: string
        description: The type of content to return.
      - required: false
        name: depth
        in: query
        schema:
          enum:
          - all
          - root
          default: all
          type: string
        description: |-
          Filter the results to content at the root level of the space or all
          content.
      - "$ref": "#/components/parameters/contentExpand"
      - required: false
        in: query
        name: start
        description: The starting index of the returned content.
        schema:
          format: int32
          minimum: 0
          type: integer
          default: 0
      - description: |-
          The maximum number of content objects to return per page. Note, this
          may be restricted by fixed system limits.
        schema:
          type: integer
          default: 25
          format: int32
          minimum: 0
        required: false
        name: limit
        in: query
      description: |-
        Returns all content of a given type, in a space. The returned content is
        ordered by content ID in ascending order.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        'View' permission for the space. Note, the returned list will only
        contain content that the current user has permission to view.
      operationId: com.atlassian.confluence.plugins.restapi.resources.SpaceResource.getContentByTypeForSpace_get
      tags:
      - Space
      summary: Get content by type for space
  "/api/user/bulk":
    get:
      description: |-
        Returns user details for the ids provided in request.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        Permission to access the Confluence site ('Can use' global permission).
      x-atlassian-connect-scope: INACCESSIBLE
      parameters:
      - schema:
          type: string
        description: A list of accountId's of users to be returned.
        required: true
        in: query
        name: accountId
      - style: form
        required: false
        in: query
        name: expand
        schema:
          items:
            enum:
            - operations
            - details.personal
            - details.business
            - personalSpace
            type: string
          type: array
        description: |-
          A multi-value parameter indicating which properties of the user to
          expand.

            - `operations` returns the operations that the user is allowed to do.
            - `details.personal` returns the 'Personal' details in the user's profile, like the 'Email' and 'Phone'.
            Note that these fields have been deprecated due to privacy changes. See the
            [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)
            for details.
            - `details.business` returns the 'Company' details in the user's profile, like the 'Position' and 'Department'.
            Note that these fields have been deprecated due to privacy changes. See the
            [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)
            for details.
            - personalSpace returns the user's personal space, if it exists.
      - description: |-
          The maximum number of results returned.
          Currently API returns 200 results max.
          If more that 200 ids are passed first 200 will be returned.
        schema:
          minimum: 1
          format: int32
          maximum: 200
          type: integer
        required: false
        in: query
        name: limit
      tags:
      - User
      summary: Get multiple users using ids
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/BulkUserLookupArray"
          description: Returned if, the list of users is returned.
        '403':
          description: |-
            Returned if the calling user does not have permission to use
            Confluence.
      operationId: com.atlassian.confluence.plugins.restapi.resources.UserResource.getBulkUserLookup
  "/api/content/search":
    get:
      tags:
      - Content
      summary: Search content by CQL
      operationId: com.atlassian.confluence.plugins.restapi.resources.ContentResource.searchContentByCQL_get
      description: |-
        Returns the list of content that matches a Confluence Query Language
        (CQL) query. For information on CQL, see:
        [Advanced searching using CQL](https://developer.atlassian.com/cloud/confluence/advanced-searching-using-cql/).

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        Permission to access the Confluence site ('Can use' global permission).
        Only content that the user has permission to view will be returned.
      parameters:
      - description: The CQL string that is used to find the requested content.
        schema:
          type: string
        required: false
        in: query
        name: cql
      - schema:
          type: string
        description: |-
          The space, content, and content status to execute the search against.
          Specify this as an object with the following properties:

          - `spaceKey` Key of the space to search against. Optional.
          - `contentId` ID of the content to search against. Optional. Must
          be in the space spacified by `spaceKey`.
          - `contentStatuses` Content statuses to search against. Optional.
        in: query
        required: false
        name: cqlcontext
      - "$ref": "#/components/parameters/contentExpand"
      - required: false
        name: start
        in: query
        description: The starting index of the returned content.
        schema:
          format: int32
          minimum: 0
          type: integer
          default: 0
      - description: |-
          The maximum number of content objects to return per page.
          Note, this may be restricted by fixed system limits.
        schema:
          default: 25
          type: integer
          minimum: 0
          format: int32
        required: false
        name: limit
        in: query
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ContentArray"
          description: Returned if the requested list of content is returned.
        '400':
          description: Returned if the CQL is invalid or missing.
        '401':
          description: |-
            Returned if the authentication credentials are incorrect or missing
            from the request.
      x-atlassian-connect-scope: READ
      security:
      - oAuthDefinitions:
        - search:confluence
  "/api/user/watch/space/{spaceKey}":
    post:
      x-atlassian-connect-scope: WRITE
      security:
      - oAuthDefinitions:
        - write:confluence-content
      responses:
        '204':
          description: |-
            Returned if the watcher was successfully created. No response body is
            returned.
        '403':
          description: |-
            Returned if;

            - The `X-Atlassian-Token: no-check` header is not specified.
            - The calling user does not have permission to view the
            space.
            - A user is specified via a query parameter and the calling user is
            not a Confluence administrator.
            - No space exists for the specified `spaceKey`.
        '404':
          description: Returned if no `spaceKey` is specified.
      description: |-
        Adds a user as a watcher to a space. Choose the user by doing one of the
        following:

        - Specify a user via a query parameter: Use the `accountId` to identify the user.
        - Do not specify a user: The currently logged-in user will be used.

        Note, you must add the `X-Atlassian-Token: no-check` header when making a
        request, as this operation has XSRF protection.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        'Confluence Administrator' global permission if specifying a user, otherwise
        permission to access the Confluence site ('Can use' global permission).
      parameters:
      - in: path
        required: true
        name: spaceKey
        schema:
          type: string
        description: The key of the space to add the watcher to.
      - schema:
          type: string
        description: |-
          This parameter is no longer available and will be removed from the documentation soon.
          Use `accountId` instead.
          See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.
        name: key
        required: false
        in: query
      - name: username
        required: false
        in: query
        description: |-
          This parameter is no longer available and will be removed from the documentation soon.
          Use `accountId` instead.
          See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.
        schema:
          type: string
      - description: |-
          The `accountId` of the user to be added as a watcher. The accountId uniquely identifies the user across all
          Atlassian products. For example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`.
        schema:
          type: string
        required: true
        in: query
        name: accountId
      summary: Add space watcher
      tags:
      - User
      operationId: com.atlassian.confluence.plugins.restapi.resources.UserWatchResource.addSpaceWatcher_post
    get:
      summary: Get space watch status
      tags:
      - User
      operationId: com.atlassian.confluence.plugins.restapi.resources.UserWatchResource.isWatchingSpace_get
      description: |-
        Returns whether a user is watching a space. Choose the user by
        doing one of the following:

        - Specify a user via a query parameter: Use the `accountId` to identify the user.
        - Do not specify a user: The currently logged-in user will be used.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        'Confluence Administrator' global permission if specifying a user, otherwise
        permission to access the Confluence site ('Can use' global permission).
      parameters:
      - name: spaceKey
        required: true
        in: path
        description: |-
          The key of the space to be queried for whether the specified user is
          watching it.
        schema:
          type: string
      - required: false
        in: query
        name: key
        schema:
          type: string
        description: |-
          This parameter is no longer available and will be removed from the documentation soon.
          Use `accountId` instead.
          See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.
      - in: query
        required: false
        name: username
        schema:
          type: string
        description: |-
          This parameter is no longer available and will be removed from the documentation soon.
          Use `accountId` instead.
          See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.
      - schema:
          type: string
        description: |-
          The `accountId` of the user to be queried for whether they are watching the space. The accountId uniquely identifies
          the user across all Atlassian products. For example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`.
        required: true
        in: query
        name: accountId
      responses:
        '200':
          description: Returned if the requested watch status is returned.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserWatch"
        '403':
          description: |-
            Returned if;

            - The calling user does not have permission to view the
            space.
            - A user is specified via a query parameter and the calling user is
            not a Confluence administrator.
            - No space exists for the specified `spaceKey`.
        '404':
          description: Returned if no `spaceKey` is specified.
      x-atlassian-connect-scope: READ
      security:
      - oAuthDefinitions:
        - read:confluence-content.summary
    delete:
      security:
      - oAuthDefinitions:
        - write:confluence-content
      x-atlassian-connect-scope: DELETE
      responses:
        '204':
          description: Returned if the watcher was successfully deleted. No response
            body is returned.
        '403':
          description: |-
            Returned if;

            - The `X-Atlassian-Token: no-check` header is not specified.
            - The calling user does not have permission to view the space.
            - A user is specified via a query parameter and the calling user is
            not a Confluence administrator.
            - No space exists for the specified `spaceKey`.
        '404':
          description: Returned if no `spaceKey` is specified.
      parameters:
      - description: The key of the space to remove the watcher from.
        schema:
          type: string
        required: true
        name: spaceKey
        in: path
      - required: false
        name: key
        in: query
        schema:
          type: string
        description: |-
          This parameter is no longer available and will be removed from the documentation soon.
          Use `accountId` instead.
          See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.
      - schema:
          type: string
        description: |-
          This parameter is no longer available and will be removed from the documentation soon.
          Use `accountId` instead.
          See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.
        required: false
        name: username
        in: query
      - required: true
        in: query
        name: accountId
        schema:
          type: string
        description: |-
          The `accountId` of the user to be removed as a watcher. The accountId uniquely identifies the user across all
          Atlassian products. For example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`.
      description: |-
        Removes a user as a watcher from a space. Choose the user by doing one of
        the following:

        - Specify a user via a query parameter: Use the `accountId` to identify the user.
        - Do not specify a user: The currently logged-in user will be used.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        'Confluence Administrator' global permission if specifying a user, otherwise
        permission to access the Confluence site ('Can use' global permission).
      operationId: com.atlassian.confluence.plugins.restapi.resources.UserWatchResource.removeSpaceWatch_delete
      summary: Remove space watch
      tags:
      - User
  "/api/user/email":
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AccountIdEmailRecord"
          description: Returned if the requested user's email is returned.
        '400':
          description: Returned if the calling app is not approved to use this API.
        '401':
          description: |-
            Returned if the authentication credentials are incorrect or missing
            from the request.
        '404':
          description: Returned if a user with the given accountId does not exist.
        '501':
          description: Indicates that the API is not currently enabled.
      operationId: com.atlassian.confluence.plugins.restapi.resources.UserEmailResource.getPrivacyUnsafeUserEmail_get
      tags:
      - User
      summary: Get a user's email
      parameters:
      - required: true
        name: accountId
        in: query
        description: |-
          The account ID of the user, which uniquely identifies the user across all Atlassian products.
          For example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`. Required.
        schema:
          type: string
      description: |-
        Returns a user's email address. This API is only available to apps approved by
        Atlassian, according to these [guidelines](https://community.developer.atlassian.com/t/guidelines-for-requesting-access-to-email-address/27603).

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        Permission to access the Confluence site ('Can use' global permission).
      x-atlassian-connect-scope: ACCESS_EMAIL_ADDRESSES
  "/api/content/{id}/restriction/byOperation/{operationKey}":
    get:
      description: |-
        Returns the restictions on a piece of content for a given operation (read
        or update).

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        Permission to view the content.
      parameters:
      - description: The ID of the content to be queried for its restrictions.
        schema:
          type: string
        required: true
        in: path
        name: id
      - name: operationKey
        required: true
        in: path
        description: The operation type of the restrictions to be returned.
        schema:
          enum:
          - read
          - update
          type: string
      - schema:
          items:
            type: string
            enum:
            - restrictions.user
            - restrictions.group
            - content
          type: array
        description: |-
          A multi-value parameter indicating which properties of the content
          restrictions to expand.

          - `restrictions.user` returns the piece of content that the restrictions are
          applied to. Expanded by default.
          - `restrictions.group` returns the piece of content that the restrictions are
          applied to. Expanded by default.
          - `content` returns the piece of content that the restrictions are
          applied to.
        required: false
        in: query
        name: expand
        style: form
      - description: The starting index of the users and groups in the returned restrictions.
        schema:
          type: integer
          default: 0
          minimum: 0
          format: int32
        in: query
        required: false
        name: start
      - schema:
          minimum: 0
          format: int32
          default: 100
          type: integer
        description: |-
          The maximum number of users and the maximum number of groups, in the
          returned restrictions, to return per page. Note, this may be restricted
          by fixed system limits.
        required: false
        in: query
        name: limit
      tags:
      - Content
      summary: Get restrictions for operation
      operationId: com.atlassian.confluence.plugins.restapi.resources.ContentRestrictionResource.getRestrictionsForOperation_get
      x-atlassian-connect-scope: READ
      security:
      - oAuthDefinitions:
        - read:confluence-content.all
      responses:
        '200':
          description: Returned if the requested restrictions are returned.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ContentRestriction"
  "/api/template/page":
    get:
      parameters:
      - in: query
        required: false
        name: spaceKey
        description: |-
          The key of the space to be queried for templates. If the `spaceKey`
          is not specified, global templates will be returned.
        schema:
          type: string
      - schema:
          type: integer
          default: 0
          format: int32
          minimum: 0
        description: The starting index of the returned templates.
        required: false
        in: query
        name: start
      - schema:
          type: integer
          default: 25
          format: int32
          minimum: 0
        description: |-
          The maximum number of templates to return per page.
          Note, this may be restricted by fixed system limits.
        name: limit
        required: false
        in: query
      - schema:
          type: array
          items:
            enum:
            - body
            type: string
        description: |-
          A multi-value parameter indicating which properties of the template
          to expand.

          - `body` returns the content of the template in storage format.
        style: form
        name: expand
        required: false
        in: query
      description: |-
        Returns all content templates. Use this method to retrieve all global
        content templates or all content templates in a space.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        'Admin' permission for the space to view space templates and 'Confluence
        Administrator' global permission to view global templates.
      operationId: com.atlassian.confluence.plugins.restapi.resources.TemplateResource.getContentTemplates_get
      tags:
      - Template
      summary: Get content templates
      security:
      - oAuthDefinitions:
        - read:confluence-content.summary
      x-atlassian-connect-scope: READ
      responses:
        '200':
          description: Returned if the requested templates are returned.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ContentTemplateArray"
        '403':
          description: |-
            Returned if the calling user does not have permission to view the
            content templates.
  "/api/settings/theme/{themeKey}":
    get:
      operationId: com.atlassian.confluence.plugins.restapi.resources.ThemeResource.getTheme_get
      summary: Get theme
      tags:
      - Settings
      parameters:
      - required: true
        in: path
        name: themeKey
        schema:
          type: string
        description: The key of the theme to be returned.
      description: |-
        Returns a theme. This includes information about the theme name,
        description, and icon.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: None
      responses:
        '200':
          description: Returned if the requested theme is returned.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Theme"
        '404':
          description: Returned if there is no theme with the given key.
      security:
      - oAuthDefinitions:
        - manage:confluence-configuration
      x-atlassian-connect-scope: READ
  "/api/content/{id}/property/{key}":
    post:
      parameters:
      - name: id
        required: true
        in: path
        description: The ID of the content to add the property to.
        schema:
          type: string
      - required: true
        in: path
        name: key
        description: The key of the content property. Required.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ContentPropertyCreateNoKey"
        description: The content property to be created.
        required: true
      description: |-
        Creates a property for an existing piece of content. For more information
        about content properties, see [Confluence entity properties](https://developer.atlassian.com/cloud/confluence/confluence-entity-properties/).

        This is the same as [Create content property](#api-content-id-property-post)
        except that the key is specified as a path parameter instead of in the
        request body.

        Content properties can also be added when creating a new piece of content
        by including them in the `metadata.properties` of the request.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        Permission to update the content.
      operationId: com.atlassian.confluence.plugins.restapi.resources.ContentPropertyResource.createContentPropertyForKey_post
      summary: Create content property for key
      tags:
      - Content
      security:
      - oAuthDefinitions:
        - write:confluence-props
      x-atlassian-connect-scope: WRITE
      responses:
        '200':
          description: Returned if the content property is created.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ContentProperty"
        '400':
          description: |-
            Returned if;

            - The content already has a property with the given key.
            - The key is too long.
            - The key is empty.
        '403':
          description: |-
            Returned if the user does not have permission to edit the content
            with the given ID.
        '413':
          description: Returned if the value is too long.
    delete:
      x-atlassian-connect-scope: DELETE
      security:
      - oAuthDefinitions:
        - write:confluence-props
      responses:
        '204':
          description: Returned if the content property is deleted.
        '404':
          description: |-
            Returned if;

            - There is no content with the given ID.
            - The calling user does not have permission to view the content.
      description: |-
        Deletes a content property. For more information about content properties, see
        [Confluence entity properties](https://developer.atlassian.com/cloud/confluence/confluence-entity-properties/).

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        Permission to update the content.
      parameters:
      - description: The ID of the content that the property belongs to.
        schema:
          type: string
        required: true
        in: path
        name: id
      - description: The key of the property.
        schema:
          type: string
        name: key
        required: true
        in: path
      tags:
      - Content
      summary: Delete content property
      operationId: com.atlassian.confluence.plugins.restapi.resources.ContentPropertyResource.deleteContentProperty_delete
    put:
      operationId: com.atlassian.confluence.plugins.restapi.resources.ContentPropertyResource.updateContentProperty_put
      summary: Update content property
      tags:
      - Content
      parameters:
      - name: id
        required: true
        in: path
        schema:
          type: string
        description: The ID of the content that the property belongs to.
      - description: The key of the property.
        schema:
          type: string
        in: path
        required: true
        name: key
      requestBody:
        required: true
        description: The content property being updated.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ContentPropertyUpdate"
      description: |-
        Updates an existing content property. This method will also create a new
        property for a piece of content, if the property key does not exist and
        the property version is 1. For more information about content properties, see
        [Confluence entity properties](https://developer.atlassian.com/cloud/confluence/confluence-entity-properties/).

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        Permission to update the content.
      responses:
        '200':
          description: Returned if the content property is created.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ContentProperty"
        '400':
          description: |-
            Returned if;

            - The content already a property with the given key.
            - The key is too long.
            - The key is empty.
        '403':
          description: |-
            Returned if the user does not have permission to edit the content
            with the given ID.
        '404':
          description: |-
            Returned if;

            - There is no content with the given ID.
            - The calling user does not have permission to view the content.
            - There is no property with the given key and the version number is not 1.
        '409':
          description: Returned if the property version is not correctly incremented.
        '413':
          description: Returned if the value is too long.
      security:
      - oAuthDefinitions:
        - write:confluence-props
      x-atlassian-connect-scope: WRITE
    get:
      security:
      - oAuthDefinitions:
        - read:confluence-props
      x-atlassian-connect-scope: READ
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ContentProperty"
          description: Returned if the content property is returned.
        '404':
          description: |-
            Returned if;

            - The calling user does not have permission to view the content.
            - There is no content with the given ID.
            - There is no property with the given key.
      parameters:
      - schema:
          type: string
        description: The ID of the content to be queried for the property.
        required: true
        in: path
        name: id
      - name: key
        required: true
        in: path
        schema:
          type: string
        description: The key of the content property.
      - schema:
          items:
            enum:
            - content
            - version
            type: string
          type: array
        description: |-
          A multi-value parameter indicating which properties of the content to
          expand. By default, the `version` object is expanded.

          - `content` returns the content that the property is stored against.
          - `version` returns information about the version of the property, such
          as the version number, when it was created, etc.
        required: false
        in: query
        name: expand
        style: form
      description: |-
        Returns a content property for a piece of content. For more information, see
        [Confluence entity properties](https://developer.atlassian.com/cloud/confluence/confluence-entity-properties/).

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        'View' permission for the space, and permission to view the content if it is a page.
      operationId: com.atlassian.confluence.plugins.restapi.resources.ContentPropertyResource.getContentProperty_get
      summary: Get content property
      tags:
      - Content
  "/api/content/{id}/restriction/byOperation/{operationKey}/user":
    put:
      operationId: com.atlassian.confluence.plugins.restapi.resources.ContentRestrictionResource.addUserToContentRestriction_put
      summary: Add user to content restriction
      tags:
      - Content
      parameters:
      - in: path
        required: true
        name: id
        schema:
          type: string
        description: The ID of the content that the restriction applies to.
      - schema:
          type: string
        description: The operation that the restriction applies to.
        required: true
        name: operationKey
        in: path
      - in: query
        required: false
        name: key
        schema:
          type: string
        description: |-
          This parameter is no longer available and will be removed from the documentation soon.
          Use `accountId` instead.
          See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.
      - schema:
          type: string
        description: |-
          This parameter is no longer available and will be removed from the documentation soon.
          Use `accountId` instead.
          See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.
        required: false
        in: query
        name: userName
      - name: accountId
        required: true
        in: query
        schema:
          type: string
        description: |-
          The account ID of the user to add to the content restriction. The accountId uniquely identifies the user across
          all Atlassian products. For example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`.
      description: |-
        Adds a user to a content restriction. That is, grant read or update
        permission to the user for a piece of content.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        Permission to edit the content.
      responses:
        '200':
          description: |-
            Returned if the user is added to the content restriction. The response
            body will be empty.
        '404':
          description: |-
            Returned if;

            - There is no content with the given ID.
            - The calling user does not have permission to view the content.
            - An invalid operation or group is specified.
      security:
      - oAuthDefinitions:
        - write:confluence-content
      x-atlassian-connect-scope: WRITE
    delete:
      responses:
        '200':
          description: |-
            Returned if the user is removed from the content restriction. The response
            body will be empty.
        '404':
          description: |-
            Returned if;

            - There is no content with the given ID.
            - The calling user does not have permission to view the content.
            - An invalid operation or group is specified.
      security:
      - oAuthDefinitions:
        - write:confluence-content
      x-atlassian-connect-scope: DELETE
      operationId: com.atlassian.confluence.plugins.restapi.resources.ContentRestrictionResource.removeUserFromContentRestriction_delete
      summary: Remove user from content restriction
      tags:
      - Content
      parameters:
      - schema:
          type: string
        description: The ID of the content that the restriction applies to.
        required: true
        name: id
        in: path
      - in: path
        required: true
        name: operationKey
        description: The operation that the restriction applies to.
        schema:
          enum:
          - read
          - update
          type: string
      - in: query
        required: false
        name: key
        schema:
          type: string
        description: |-
          This parameter is no longer available and will be removed from the documentation soon.
          Use `accountId` instead.
          See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.
      - schema:
          type: string
        description: |-
          This parameter is no longer available and will be removed from the documentation soon.
          Use `accountId` instead.
          See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.
        name: userName
        required: false
        in: query
      - description: |-
          The account ID of the user to remove from the content restriction. The accountId uniquely identifies the user
          across all Atlassian products. For example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`.
        schema:
          type: string
        required: true
        in: query
        name: accountId
      description: |-
        Removes a group from a content restriction. That is, remove read or update
        permission for the group for a piece of content.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        Permission to edit the content.
    get:
      responses:
        '200':
          description: |-
            Return true if the content restriction applies to the user. The response
            body will be empty.
        '404':
          description: |-
            Returned if;

            - There is no content with the given ID.
            - The calling user does not have permission to view the content.
            - An invalid operation or user is specified.
      x-atlassian-connect-scope: READ
      security:
      - oAuthDefinitions:
        - read:confluence-content.all
      tags:
      - Content
      summary: Get content restriction status for user
      operationId: com.atlassian.confluence.plugins.restapi.resources.ContentRestrictionResource.getContentRestrictionStatusForUser_get
      description: |-
        Returns whether the specified content restriction applies to a user.
        For example, if a page with `id=123` has a `read` restriction for a user with an account ID of
        `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`, the following request will return `true`:

        `https://your-domain.atlassian.net/wiki/rest/api/content/123/restriction/byOperation/read/user?accountId=384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`

        Note that a response of `true` does not guarantee that the user can view the page, as it does not account for
        account-inherited restrictions, space permissions, or even product access. For more
        information, see [Confluence permissions](https://confluence.atlassian.com/x/_AozKw).

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        Permission to view the content.
      parameters:
      - description: The ID of the content that the restriction applies to.
        schema:
          type: string
        required: true
        name: id
        in: path
      - required: true
        in: path
        name: operationKey
        description: The operation that is restricted.
        schema:
          type: string
      - schema:
          type: string
        description: |-
          This parameter is no longer available and will be removed from the documentation soon.
          Use `accountId` instead.
          See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.
        name: key
        required: false
        in: query
      - schema:
          type: string
        description: |-
          This parameter is no longer available and will be removed from the documentation soon.
          Use `accountId` instead.
          See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.
        in: query
        required: false
        name: userName
      - required: true
        in: query
        name: accountId
        schema:
          type: string
        description: |-
          The account ID of the user to be queried for whether the content restriction applies to it. The accountId
          uniquely identifies the user across all Atlassian products. For example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`.
  "/api/content/{id}/descendant":
    get:
      security:
      - oAuthDefinitions:
        - read:confluence-content.summary
      x-atlassian-connect-scope: READ
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ContentChildren"
          description: Returned if the requested descendants are returned.
        '404':
          description: |-
            Returned if;

            - There is no content with the given ID.
            - The calling user does not have permission to view the content.
      parameters:
      - name: id
        required: true
        in: path
        schema:
          type: string
        description: The ID of the content to be queried for its descendants.
      - style: form
        in: query
        required: false
        name: expand
        schema:
          items:
            enum:
            - attachment
            - comment
            - page
            type: string
          type: array
        description: |-
          A multi-value parameter indicating which properties of the children to
          expand, where:

          - `attachment` returns all attachments for the content.
          - `comments` returns all comments for the content.
          - `page` returns all child pages of the content.
      description: |-
        Returns a map of the descendants of a piece of content. This is similar
        to [Get content children](#api-content-id-child-get), except that this
        method returns child pages at all levels, rather than just the direct
        child pages.

        A piece of content has different types of descendants, depending on its type:

        - `page`: descendant is `page`, `comment`, `attachment`
        - `blogpost`: descendant is `comment`, `attachment`
        - `attachment`: descendant is `comment`
        - `comment`: descendant is `attachment`

        The map will always include all descendant types that are valid for the content.
        However, if the content has no instances of a descendant type, the map will
        contain an empty array for that descendant type.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        'View' permission for the space, and permission to view the content if it
        is a page.
      operationId: com.atlassian.confluence.plugins.restapi.resources.DescendantContentResource.getContentDescendants_get
      tags:
      - Content
      summary: Get content descendants
  "/api/space/{spaceKey}/content":
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ContentArray"
          description: Returned if the requested content is returned.
        '401':
          description: |-
            Returned if the authentication credentials are incorrect or missing
            from the request.
        '404':
          description: |-
            Returned if any of the following is true:

            - There is no space with the given key.
            - The calling user does not have permission to view the space.
      security:
      - oAuthDefinitions:
        - read:confluence-content.summary
      x-atlassian-connect-scope: READ
      operationId: com.atlassian.confluence.plugins.restapi.resources.SpaceResource.getContentForSpace_get
      tags:
      - Space
      summary: Get content for space
      parameters:
      - description: The key of the space to be queried for its content.
        schema:
          type: string
        required: true
        in: path
        name: spaceKey
      - required: false
        in: query
        name: depth
        schema:
          enum:
          - all
          - root
          type: string
          default: all
        description: Filter the results to content at the root level of the space
          or all content.
      - "$ref": "#/components/parameters/contentExpand"
      - schema:
          type: integer
          default: 0
          minimum: 0
          format: int32
        description: The starting index of the returned content.
        in: query
        required: false
        name: start
      - required: false
        in: query
        name: limit
        schema:
          format: int32
          minimum: 0
          default: 25
          type: integer
        description: |-
          The maximum number of content objects to return per page. Note, this
          may be restricted by fixed system limits.
      description: |-
        Returns all content in a space. The returned content is grouped by type
        (pages then blogposts), then ordered by content ID in ascending order.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        'View' permission for the space. Note, the returned list will only
        contain content that the current user has permission to view.
  "/api/content/{id}/child/comment":
    get:
      security:
      - oAuthDefinitions:
        - read:confluence-content.summary
      x-atlassian-connect-scope: READ
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ContentArray"
          description: Returned if the requested comments are returned.
        '404':
          description: |-
            Returned if;

            - There is no parent content with the given ID.
            - The calling user does not have permission to view the parent content.
      parameters:
      - in: path
        required: true
        name: id
        description: The ID of the content to be queried for its comments.
        schema:
          type: string
      - "$ref": "#/components/parameters/contentExpand"
      - name: parentVersion
        in: query
        schema:
          type: integer
          default: 0
          format: int32
          minimum: 0
        description: |-
          The version of the parent content to retrieve children for.
          Currently, this only works for the latest version.
      - name: start
        in: query
        schema:
          format: int32
          type: integer
        description: The starting index of the returned comments.
      - name: limit
        in: query
        description: |-
          The maximum number of comments to return per page. Note,
          this may be restricted by fixed system limits.
        schema:
          minimum: 0
          format: int32
          type: integer
          default: 25
      - schema:
          type: array
          items:
            type: string
          enum:
          - inline
          - footer
          - resolved
        description: |-
          The location of the comments in the page. Multiple locations can be specified.
          If no location is specified, comments from all locations are returned.
        explode: true
        in: query
        name: location
      - schema:
          type: string
        description: |-
          Currently, this parameter is not used.
          Comments are returned at the root level only.
        in: query
        name: depth
      description: |-
        Returns the comments on a piece of content.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: 'View' permission for the space,
        and permission to view the content if it is a page.
      operationId: com.atlassian.confluence.plugins.restapi.resources.ChildContentResource.getContentComments_get
      summary: Get content comments
      tags:
      - Content
  "/api/settings/systemInfo":
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SystemInfoEntity"
          description: |-
            Returned if the system information for the Confluence Cloud tenant
            is returned.
        '403':
          description: |-
            Returned when the user does not have permission to view the system
            information.
      operationId: com.atlassian.confluence.plugins.restapi.resources.SystemInfoResource.getSystemInfo_get
      summary: Get system info
      tags:
      - Settings
      security:
      - oAuthDefinitions:
        - manage:confluence-configuration
      description: |-
        Returns the system information for the Confluence Cloud tenant. This
        information is used by Atlassian.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        Permission to access the Confluence site ('Can use' global permission).
      x-atlassian-connect-scope: READ
  "/api/content/{id}/restriction/byOperation":
    get:
      description: |-
        Returns restrictions on a piece of content by operation. This method is
        similar to [Get restrictions](#api-content-id-restriction-get) except that
        the operations are properties of the return object, rather than items in
        a results array.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        Permission to view the content.
      parameters:
      - name: id
        required: true
        in: path
        schema:
          type: string
        description: The ID of the content to be queried for its restrictions.
      - description: |-
          A multi-value parameter indicating which properties of the content
          restrictions to expand.

          - `restrictions.user` returns the piece of content that the restrictions are
          applied to. Expanded by default.
          - `restrictions.group` returns the piece of content that the restrictions are
          applied to. Expanded by default.
          - `content` returns the piece of content that the restrictions are
          applied to.
        schema:
          items:
            type: string
            enum:
            - restrictions.user
            - restrictions.group
            - content
          type: array
        required: false
        name: expand
        in: query
        style: form
      summary: Get restrictions by operation
      tags:
      - Content
      operationId: com.atlassian.confluence.plugins.restapi.resources.ContentRestrictionResource.getRestrictionsByOperation_get
      x-atlassian-connect-scope: READ
      security:
      - oAuthDefinitions:
        - read:confluence-content.all
      responses:
        '200':
          description: Returned if the requested restrictions are returned.
          content:
            application/json:
              schema:
                additionalProperties:
                  "$ref": "#/components/schemas/ContentRestriction"
                required:
                - _links
                type: object
                properties:
                  _links:
                    "$ref": "#/components/schemas/GenericLinks"
  "/api/settings/theme/selected":
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Theme"
          description: Returned if the global theme is returned.
        '404':
          description: |-
            Returned if Confluence does not have a global theme assigned, i.e.
            the default theme is used.
      operationId: com.atlassian.confluence.plugins.restapi.resources.ThemeResource.getGlobalTheme_get
      tags:
      - Settings
      summary: Get global theme
      security:
      - oAuthDefinitions:
        - manage:confluence-configuration
      description: |-
        Returns the globally assigned theme.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: None
      x-atlassian-connect-scope: READ
  "/api/content/{id}/label/{label}":
    delete:
      description: |-
        Removes a label from a piece of content. This is similar to
        [Remove label from content using query parameter](#api-content-id-label-delete)
        except that the label name is specified via a path parameter.

        Use this method if the label name does not have "/" characters, as the path
        parameter does not accept "/" characters for security reasons. Otherwise,
        use [Remove label from content using query parameter](#api-content-id-label-delete).

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        Permission to update the content.
      parameters:
      - description: The ID of the content that the label will be removed from.
        schema:
          type: string
        name: id
        required: true
        in: path
      - name: label
        required: true
        in: path
        schema:
          type: string
        description: The name of the label to be removed.
      tags:
      - Content
      summary: Remove label from content
      operationId: com.atlassian.confluence.plugins.restapi.resources.ContentLabelsResource.removeLabelFromContent_delete
      x-atlassian-connect-scope: DELETE
      security:
      - oAuthDefinitions:
        - write:confluence-content
      responses:
        '204':
          description: Returned if the label is removed. The response body will be
            empty.
        '400':
          description: Returned if the label name has a "/" character.
        '403':
          description: Returned if the calling user can view but not edit the content.
        '404':
          description: |-
            Returned if;

            - There is no content with the given ID.
            - The calling user does not have permission to view the content.
  "/api/user/watch/content/{contentId}":
    delete:
      x-atlassian-connect-scope: DELETE
      security:
      - oAuthDefinitions:
        - write:confluence-content
      responses:
        '204':
          description: |-
            Returned if the watcher was successfully deleted. No response body is
            returned.
        '403':
          description: |-
            Returned if;

            - The `X-Atlassian-Token: no-check` header is not specified.
            - The calling user does not have permission to view the
            content.
            - A user is specified via a query parameter and the calling user is
            not a Confluence administrator.
            - No content exists for the specified `contentId`.
        '404':
          description: Returned if no `contentId` is specified.
      description: |-
        Removes a user as a watcher from a piece of content. Choose the user by
        doing one of the following:

        - Specify a user via a query parameter: Use the `accountId` to identify the user.
        - Do not specify a user: The currently logged-in user will be used.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        'Confluence Administrator' global permission if specifying a user, otherwise
        permission to access the Confluence site ('Can use' global permission).
      parameters:
      - schema:
          type: string
        description: The ID of the content to remove the watcher from.
        required: true
        in: path
        name: contentId
      - required: false
        in: query
        name: key
        description: |-
          This parameter is no longer available and will be removed from the documentation soon.
          Use `accountId` instead.
          See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.
        schema:
          type: string
      - required: false
        in: query
        name: username
        schema:
          type: string
        description: |-
          This parameter is no longer available and will be removed from the documentation soon.
          Use `accountId` instead.
          See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.
      - schema:
          type: string
        description: |-
          The `accountId` of the user to be removed as a watcher. The accountId uniquely identifies the user across all Atlassian products.
          For example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`.
        in: query
        required: true
        name: accountId
      tags:
      - User
      summary: Remove content watcher
      operationId: com.atlassian.confluence.plugins.restapi.resources.UserWatchResource.removeContentWatcher_delete
    get:
      responses:
        '200':
          description: Returned if the requested watch status is returned.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserWatch"
        '403':
          description: |-
            Returned if;

            - The calling user does not have permission to view the
            content.
            - A user is specified via a query parameter and the calling user is
            not a Confluence administrator.
            - No content exists for the specified `contentId`.
        '404':
          description: Returned if no `contentId` is specified.
      security:
      - oAuthDefinitions:
        - read:confluence-content.summary
      x-atlassian-connect-scope: READ
      operationId: com.atlassian.confluence.plugins.restapi.resources.UserWatchResource.getContentWatchStatus_get
      summary: Get content watch status
      tags:
      - User
      parameters:
      - in: path
        required: true
        name: contentId
        description: |-
          The ID of the content to be queried for whether the specified user is
          watching it.
        schema:
          type: string
      - schema:
          type: string
        description: |-
          This parameter is no longer available and will be removed from the documentation soon.
          Use `accountId` instead.
          See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.
        required: false
        in: query
        name: key
      - description: |-
          This parameter is no longer available and will be removed from the documentation soon.
          Use `accountId` instead.
          See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.
        schema:
          type: string
        in: query
        required: false
        name: username
      - required: true
        in: query
        name: accountId
        schema:
          type: string
        description: |-
          The `accountId` of the user to be queried for whether they are watching the content. The accountId uniquely
          identifies the user across all Atlassian products. For example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`.
      description: |-
        Returns whether a user is watching a piece of content. Choose the user by
        doing one of the following:

        - Specify a user via a query parameter: Use the `accountId` to identify the user.
        - Do not specify a user: The currently logged-in user will be used.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        'Confluence Administrator' global permission if specifying a user, otherwise
        permission to access the Confluence site ('Can use' global permission).
    post:
      operationId: com.atlassian.confluence.plugins.restapi.resources.UserWatchResource.addContentWatcher_post
      tags:
      - User
      summary: Add content watcher
      parameters:
      - schema:
          type: string
        description: The ID of the content to add the watcher to.
        required: true
        name: contentId
        in: path
      - description: |-
          This parameter is no longer available and will be removed from the documentation soon.
          Use `accountId` instead.
          See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.
        schema:
          type: string
        name: key
        required: false
        in: query
      - in: query
        required: false
        name: username
        description: |-
          This parameter is no longer available and will be removed from the documentation soon.
          Use `accountId` instead.
          See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.
        schema:
          type: string
      - required: true
        in: query
        name: accountId
        description: |-
          The `accountId` of the user to be added as a watcher. The accountId uniquely identifies the user across all Atlassian products.
          For example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`.
        schema:
          type: string
      description: |-
        Adds a user as a watcher to a piece of content. Choose the user by doing
        one of the following:

        - Specify a user via a query parameter: Use the `accountId` to identify the user.
        - Do not specify a user: The currently logged-in user will be used.

        Note, you must add the `X-Atlassian-Token: no-check` header when making a
        request, as this operation has XSRF protection.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        'Confluence Administrator' global permission if specifying a user, otherwise
        permission to access the Confluence site ('Can use' global permission).
      responses:
        '204':
          description: |-
            Returned if the watcher was successfully created. No response body is
            returned.
        '403':
          description: |-
            Returned if;

            - The `X-Atlassian-Token: no-check` header is not specified.
            - The calling user does not have permission to view the
            content.
            - A user is specified via a query parameter and the calling user is
            not a Confluence administrator.
            - No content exists for the specified `contentId`.
        '404':
          description: Returned if no `contentId` is specified.
      security:
      - oAuthDefinitions:
        - write:confluence-content
      x-atlassian-connect-scope: WRITE
  "/api/relation/{relationName}/from/{sourceType}/{sourceKey}/to/{targetType}":
    get:
      summary: Find target entities related to a source entity
      tags:
      - Relation
      operationId: com.atlassian.confluence.plugins.restapi.resources.RelationResource.findTargetFromSource_get
      description: |-
        Returns all target entities that have a particular relationship to the
        source entity. Note, relationships are one way.

        For example, the following method finds all content that the current user
        has an 'ignore' relationship with:
        `GET https://your-domain.atlassian.net/wiki/rest/api/relation/ignore/from/user/current/to/content`
        Note, 'ignore' is an example custom relationship type.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        Permission to view both the target entity and source entity.
      parameters:
      - description: |-
          The name of the relationship. This method supports relationships created via
          [Create relationship](#api-relation-relationName-from-sourceType-sourceKey-to-targetType-targetKey-put).
          Note, this method does not support 'favourite' relationships.
        schema:
          type: string
        in: path
        required: true
        name: relationName
      - schema:
          enum:
          - user
          - content
          - space
          type: string
        description: The source entity type of the relationship.
        required: true
        name: sourceType
        in: path
      - schema:
          type: string
        description: |-
          The identifier for the source entity:

          - If `sourceType` is `user`, then specify either `current` (logged-in user), the user key of the user, or
          the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the
          [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)
          for details.
          - If `sourceType` is 'content', then specify the content ID.
          - If `sourceType` is 'space', then specify the space key.
        required: true
        in: path
        name: sourceKey
      - name: targetType
        required: true
        in: path
        description: The target entity type of the relationship.
        schema:
          enum:
          - user
          - content
          - space
          type: string
      - schema:
          type: string
        description: |-
          The status of the source. This parameter is only used when the
          `sourceType` is 'content'.
        in: query
        required: false
        name: sourceStatus
      - description: |-
          The status of the target. This parameter is only used when the
          `targetType` is 'content'.
        schema:
          type: string
        name: targetStatus
        required: false
        in: query
      - description: |-
          The version of the source. This parameter is only used when the
          `sourceType` is 'content' and the `sourceStatus` is 'historical'.
        schema:
          format: int32
          type: integer
        required: false
        name: sourceVersion
        in: query
      - in: query
        required: false
        name: targetVersion
        schema:
          format: int32
          type: integer
        description: |-
          The version of the target. This parameter is only used when the
          `targetType` is 'content' and the `targetStatus` is 'historical'.
      - style: form
        name: expand
        required: false
        in: query
        schema:
          type: array
          items:
            type: string
            enum:
            - relationData
            - source
            - target
        description: |-
          A multi-value parameter indicating which properties of the response
          object to expand.

          - `relationData` returns information about the relationship, such as
          who created it and when it was created.
          - `source` returns the source entity.
          - `target` returns the target entity.
      - schema:
          format: int32
          minimum: 0
          type: integer
          default: 0
        description: The starting index of the returned relationships.
        name: start
        required: false
        in: query
      - schema:
          minimum: 0
          format: int32
          default: 25
          type: integer
        description: |-
          The maximum number of relationships to return per page.
          Note, this may be restricted by fixed system limits.
        required: false
        in: query
        name: limit
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RelationArray"
          description: Returned if the requested relationships are returned.
        '403':
          description: |-
            Returned if the user does not have permission to view the
            relationships.
        '404':
          description: Returned if the target entity does not exist.
      x-atlassian-connect-scope: READ
      security:
      - oAuthDefinitions:
        - read:confluence-content.summary
  "/api/user/watch/label/{labelName}":
    delete:
      operationId: com.atlassian.confluence.plugins.restapi.resources.UserWatchResource.removeLabelWatcher_delete
      summary: Remove label watcher
      tags:
      - User
      parameters:
      - required: true
        name: labelName
        in: path
        description: The name of the label to remove the watcher from.
        schema:
          type: string
      - required: false
        name: key
        in: query
        description: |-
          This parameter is no longer available and will be removed from the documentation soon.
          Use `accountId` instead.
          See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.
        schema:
          type: string
      - name: username
        required: false
        in: query
        description: |-
          This parameter is no longer available and will be removed from the documentation soon.
          Use `accountId` instead.
          See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.
        schema:
          type: string
      - in: query
        required: true
        name: accountId
        description: |-
          The `accountId` of the user to be removed as a watcher. The accountId uniquely identifies the user across all Atlassian products.
          For example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`.
        schema:
          type: string
      description: |-
        Removes a user as a watcher from a label. Choose the user by doing one of
        the following:

        - Specify a user via a query parameter: Use the `accountId` to identify the user.
        - Do not specify a user: The currently logged-in user will be used.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        'Confluence Administrator' global permission if specifying a user, otherwise
        permission to access the Confluence site ('Can use' global permission).
      responses:
        '204':
          description: |-
            Returned if the watcher was successfully deleted. No response body is
            returned.
        '403':
          description: |-
            Returned if;

            - The `X-Atlassian-Token: no-check` header is not specified.
            - A user is specified via a query parameter and the calling user is
            not a Confluence administrator.
            - No label exists for the specified `labelName`.
        '404':
          description: Returned if no `labelName` is specified.
      security:
      - oAuthDefinitions:
        - write:confluence-content
      x-atlassian-connect-scope: DELETE
    get:
      x-atlassian-connect-scope: READ
      security:
      - oAuthDefinitions:
        - read:confluence-content.summary
      responses:
        '200':
          description: Returned if the requested watch status is returned.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserWatch"
        '403':
          description: |-
            Returned if;

            - A user is specified via a query parameter and the calling user is
            not a Confluence administrator.
            - No label exists for the specified `labelName`.
        '404':
          description: Returned if no `labelName` is specified.
      description: |-
        Returns whether a user is watching a label. Choose the user by doing one
        of the following:

        - Specify a user via a query parameter: Use the `accountId` to identify the user.
        - Do not specify a user: The currently logged-in user will be used.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        'Confluence Administrator' global permission if specifying a user, otherwise
        permission to access the Confluence site ('Can use' global permission).
      parameters:
      - description: |-
          The name of the label to be queried for whether the specified user is
          watching it.
        schema:
          type: string
        required: true
        name: labelName
        in: path
      - name: key
        required: false
        in: query
        schema:
          type: string
        description: |-
          This parameter is no longer available and will be removed from the documentation soon.
          Use `accountId` instead.
          See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.
      - required: false
        name: username
        in: query
        schema:
          type: string
        description: |-
          This parameter is no longer available and will be removed from the documentation soon.
          Use `accountId` instead.
          See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.
      - in: query
        required: true
        name: accountId
        description: |-
          The `accountId` of the user to be queried for whether they are watching the label. The accountId uniquely identifies
          the user across all Atlassian products. For example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`.
        schema:
          type: string
      tags:
      - User
      summary: Get label watch status
      operationId: com.atlassian.confluence.plugins.restapi.resources.UserWatchResource.isWatchingLabel_get
    post:
      responses:
        '204':
          description: |-
            Returned if the watcher was successfully created. No response body is
            returned.
        '403':
          description: |-
            Returned if;

            - The `X-Atlassian-Token: no-check` header is not specified.
            - A user is specified via a query parameter and the calling user is
            not a Confluence administrator.
            - No label exists for the specified `labelName`.
        '404':
          description: Returned if no `labelName` is specified.
      x-atlassian-connect-scope: WRITE
      security:
      - oAuthDefinitions:
        - write:confluence-content
      tags:
      - User
      summary: Add label watcher
      operationId: com.atlassian.confluence.plugins.restapi.resources.UserWatchResource.addLabelWatcher_post
      description: |-
        Adds a user as a watcher to a label. Choose the user by doing one of the
        following:

        - Specify a user via a query parameter: Use the `accountId` to identify the user.
        - Do not specify a user: The currently logged-in user will be used.

        Note, you must add the `X-Atlassian-Token: no-check` header when making a
        request, as this operation has XSRF protection.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        'Confluence Administrator' global permission if specifying a user, otherwise
        permission to access the Confluence site ('Can use' global permission).
      parameters:
      - schema:
          type: string
        description: The name of the label to add the watcher to.
        name: labelName
        required: true
        in: path
      - description: |-
          This parameter is no longer available and will be removed from the documentation soon.
          Use `accountId` instead.
          See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.
        schema:
          type: string
        name: key
        required: false
        in: query
      - schema:
          type: string
        description: |-
          This parameter is no longer available and will be removed from the documentation soon.
          Use `accountId` instead.
          See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.
        name: username
        required: false
        in: query
      - required: true
        name: accountId
        in: query
        description: |-
          The `accountId` of the user to be added as a watcher. The accountId uniquely identifies the user across all Atlassian products.
          For example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`.
        schema:
          type: string
  "/api/group/{groupName}/member":
    get:
      parameters:
      - required: true
        name: groupName
        in: path
        schema:
          type: string
        description: The name of the group to be queried for its members.
      - name: start
        required: false
        in: query
        schema:
          format: int32
          minimum: 0
          type: integer
          default: 0
        description: The starting index of the returned users.
      - description: |-
          The maximum number of users to return per page.
          Note, this may be restricted by fixed system limits.
        schema:
          type: integer
          default: 200
          minimum: 0
          format: int32
        in: query
        required: false
        name: limit
      description: |-
        Returns the users that are members of a group.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        Permission to access the Confluence site ('Can use' global permission).
      x-atlassian-connect-scope: READ
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserArrayWithLinks"
          description: Returned if the requested users are returned.
        '403':
          description: Returned if the calling user does not have permission to view
            users.
      operationId: com.atlassian.confluence.plugins.restapi.resources.GroupResource.getGroupMembers_get
      summary: Get group members
      tags:
      - Group
  "/api/content/{id}/restriction/byOperation/{operationKey}/group/{groupName}":
    put:
      responses:
        '200':
          description: |-
            Returned if the group is added to the content restriction. The response
            body will be empty.
        '404':
          description: |-
            Returned if;

            - There is no content with the given ID.
            - The calling user does not have permission to view the content.
            - An invalid operation or group is specified.
      x-atlassian-connect-scope: WRITE
      security:
      - oAuthDefinitions:
        - write:confluence-content
      summary: Add group to content restriction
      tags:
      - Content
      operationId: com.atlassian.confluence.plugins.restapi.resources.ContentRestrictionResource.addGroupToContentRestriction_put
      description: |-
        Adds a group to a content restriction. That is, grant read or update
        permission to the group for a piece of content.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        Permission to edit the content.
      parameters:
      - schema:
          type: string
        description: The ID of the content that the restriction applies to.
        required: true
        in: path
        name: id
      - schema:
          enum:
          - read
          - update
          type: string
        description: The operation that the restriction applies to.
        required: true
        in: path
        name: operationKey
      - schema:
          type: string
        description: The name of the group to add to the content restriction.
        required: true
        in: path
        name: groupName
    delete:
      description: |-
        Removes a group from a content restriction. That is, remove read or update
        permission for the group for a piece of content.

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        Permission to edit the content.
      parameters:
      - in: path
        required: true
        name: id
        schema:
          type: string
        description: The ID of the content that the restriction applies to.
      - required: true
        in: path
        name: operationKey
        description: The operation that the restriction applies to.
        schema:
          enum:
          - read
          - update
          type: string
      - description: The name of the group to remove from the content restriction.
        schema:
          type: string
        required: true
        name: groupName
        in: path
      tags:
      - Content
      summary: Remove group from content restriction
      operationId: com.atlassian.confluence.plugins.restapi.resources.ContentRestrictionResource.removeGroupFromContentRestriction_delete
      x-atlassian-connect-scope: DELETE
      security:
      - oAuthDefinitions:
        - write:confluence-content
      responses:
        '200':
          description: |-
            Returned if the group is removed from the content restriction. The response
            body will be empty.
        '404':
          description: |-
            Returned if;

            - There is no content with the given ID.
            - The calling user does not have permission to view the content.
            - The restriction to be deleted does not exist.
    get:
      parameters:
      - description: The ID of the content that the restriction applies to.
        schema:
          type: string
        name: id
        required: true
        in: path
      - schema:
          type: string
          enum:
          - read
          - update
        description: The operation that the restriction applies to.
        name: operationKey
        required: true
        in: path
      - required: true
        in: path
        name: groupName
        schema:
          type: string
        description: |-
          The name of the group to be queried for whether the content restriction
          applies to it.
      description: |-
        Returns whether the specified content restriction applies to a group.
        For example, if a page with `id=123` has a `read` restriction for the `admins` group,
        the following request will return `true`:

        `https://your-domain.atlassian.net/wiki/rest/api/content/123/restriction/byOperation/read/group/admins`

        Note that a response of `true` does not guarantee that the group can view the page, as it does not account for
        account-inherited restrictions, space permissions, or even product access. For more
        information, see [Confluence permissions](https://confluence.atlassian.com/x/_AozKw).

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        Permission to view the content.
      operationId: com.atlassian.confluence.plugins.restapi.resources.ContentRestrictionResource.getContentRestrictionStatusForGroup_get
      tags:
      - Content
      summary: Get content restriction status for group
      security:
      - oAuthDefinitions:
        - read:confluence-content.all
      x-atlassian-connect-scope: READ
      responses:
        '200':
          description: |-
            Returns true if the content restriction applies to the group. The response
            will not return a response body.
        '404':
          description: |-
            Returned if;

            - There is no content with the given ID.
            - The calling user does not have permission to view the content.
            - An invalid operation or group is specified.
servers:
- url: "//your-domain.atlassian.net/wiki/rest"
components:
  securitySchemes:
    oAuthDefinitions:
      description: This API uses OAuth 2 with the authorizationCode grant flow.
      flows:
        authorizationCode:
          scopes:
            write:confluence-file: Upload attachments.
            write:confluence-space: Create, update and delete space information.
            read:confluence-props: Read content properties.
            write:confluence-props: Write content properties.
            read:confluence-content.summary: Read a summary of the content, which
              is the content without expansions. Note, APIs using this scope may also
              return data allowed by read:confluence-space.summary. However, this
              scope is not a substitute for read:confluence-space.summary.
            manage:confluence-configuration: Manage global settings.
            read:confluence-space.summary: Read a summary of space information without
              expansions.
            read:confluence-content.all: Read all content, including content body
              (expansions permitted). Note, APIs using this scope may also return
              data allowed by read:confluence-space.summary. However, this scope is
              not a substitute for read:confluence-space.summary.
            search:confluence: Search Confluence. Note, APIs using this scope may
              also return data allowed by read:confluence-space.summary and read:confluence-content.summary.
              However, this scope is not a substitute for read:confluence-space.summary
              or read:confluence-content.summary.
            write:confluence-content: Permits the creation of pages, blogs, comments
              and questions.
          authorizationUrl: https://auth.atlassian.com/authorize
          tokenUrl: https://auth.atlassian.com/oauth/token
      type: oauth2
  requestBodies:
    com.atlassian.confluence.plugins.restapi.resources.AttachmentResource.createAttachments_post:
      content:
        multipart/form-data:
          schema:
            properties:
              comment:
                type: string
                description: |-
                  The comment for the attachment that is being added.
                  If you specify a comment, then every file must have a comment and
                  the comments must be in the same order as the files. Alternatively,
                  don't specify any comments.
                format: binary
              minorEdit:
                type: string
                format: binary
                description: |-
                  If `minorEdits` is set to 'true', no notification email or activity stream
                  will be generated when the attachment is added to the content.
              file:
                type: string
                description: |-
                  The relative location and name of the attachment to be added to
                  the content.
                format: binary
            required:
            - file
            - minorEdit
            type: object
    ContentBlueprintDraft:
      required: true
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/ContentBlueprintDraft"
  schemas:
    SpaceSettingsUpdate:
      type: object
      additionalProperties: false
      properties:
        routeOverrideEnabled:
          description: |-
            Defines whether an override for the space home should be used. This is
            used in conjunction with a space theme provided by an app. For
            example, if this property is set to true, a theme can display a page
            other than the space homepage when users visit the root URL for a
            space. This property allows apps to provide content-only theming
            without overriding the space home.
          type: boolean
    DynamicModulesErrorMessage:
      example:
        message: The request is not from a Connect app.
      properties:
        message:
          type: string
          description: The error message.
      additionalProperties: false
      type: object
      required:
      - message
    SpaceDescription:
      type: object
      required:
      - value
      - representation
      - embeddedContent
      additionalProperties: false
      properties:
        value:
          type: string
        embeddedContent:
          items:
            type: object
            additionalProperties: true
          type: array
        representation:
          enum:
          - plain
          - view
          type: string
    ContentPropertyCreateNoKey:
      additionalProperties: false
      required:
      - value
      type: object
      properties:
        value:
          "$ref": "#/components/schemas/PropertyValue"
    AuditRecord:
      required:
      - author
      - remoteAddress
      - creationDate
      - summary
      - description
      - category
      - sysAdmin
      - affectedObject
      - changedValues
      - associatedObjects
      type: object
      additionalProperties: false
      properties:
        associatedObjects:
          items:
            "$ref": "#/components/schemas/AffectedObject"
          type: array
        category:
          type: string
        affectedObject:
          "$ref": "#/components/schemas/AffectedObject"
        description:
          type: string
        author:
          properties:
            username:
              type: string
              description: This property has been deprecated and will be removed soon.
            type:
              default: user
              type: string
              enum:
              - user
            operations:
              type: object
              default:
            userKey:
              type: string
              description: This property has been deprecated and will be removed soon.
            displayName:
              type: string
          type: object
          required:
          - type
          - displayName
          - operations
          - username
          - userKey
          additionalProperties: false
        summary:
          type: string
        remoteAddress:
          type: string
        creationDate:
          description: The creation date-time of the audit record, as a timestamp.
          format: int64
          type: integer
        sysAdmin:
          type: boolean
        changedValues:
          items:
            "$ref": "#/components/schemas/ChangedValue"
          type: array
    ScreenLookAndFeel:
      properties:
        backgroundColor:
          type: string
        gutterBottom:
          type: string
        backgroundSize:
          type: string
        background:
          type: string
        gutterLeft:
          type: string
        gutterRight:
          type: string
        backgroundImage:
          type: string
        gutterTop:
          type: string
      additionalProperties: false
      required:
      - background
      - backgroundColor
      - backgroundImage
      - backgroundSize
      - gutterTop
      - gutterRight
      - gutterBottom
      - gutterLeft
      type: object
    ContainerSummary:
      properties:
        title:
          type: string
        displayUrl:
          type: string
      type: object
      required:
      - title
      - displayUrl
      additionalProperties: false
    ContentTemplateArray:
      type: object
      required:
      - results
      - start
      - limit
      - size
      - _links
      additionalProperties: false
      properties:
        size:
          type: integer
          format: int32
        start:
          format: int32
          type: integer
        limit:
          format: int32
          type: integer
        results:
          type: array
          items:
            "$ref": "#/components/schemas/ContentTemplate"
        _links:
          "$ref": "#/components/schemas/GenericLinks"
    Task:
      properties:
        id:
          format: int64
          type: integer
        dueDate:
          format: int64
          type: integer
        assignee:
          type: string
        title:
          type: string
        globalId:
          type: integer
          format: int64
        createDate:
          format: int64
          type: integer
        contentId:
          type: integer
          format: int64
        creator:
          type: string
        body:
          type: string
        description:
          type: string
        completeDate:
          type: integer
          format: int64
        status:
          type: string
        completeUser:
          type: string
        updateDate:
          format: int64
          type: integer
      required:
      - globalId
      - id
      - contentId
      - status
      - creator
      - createDate
      type: object
      additionalProperties: false
    AttachmentUpdate:
      properties:
        metadata:
          additionalProperties: false
          type: object
          properties:
            comment:
              description: The comment for this update.
              type: string
            mediaType:
              type: string
              description: The media type of the attachment, e.g. 'img/jpg'.
        container:
          additionalProperties: false
          type: object
          required:
          - id
          - type
          properties:
            id:
              type: string
              description: The `id` of the parent content.
            type:
              type: string
              description: |-
                The content type. You can only attach attachments to content
                of type: `page`, `blogpost`.
          description: The new content to attach the attachment to.
        type:
          description: Set this to `attachment`.
          enum:
          - attachment
          type: string
        title:
          type: string
          description: The updated name of the attachment.
          maxLength: 255
        version:
          description: |-
            The attachment version. Set this to the current version number of the
            attachment. Note, the version number only needs to be incremented when
            updating the actual attachment, not its properties.
          properties:
            number:
              description: The version number.
              format: int32
              type: integer
          type: object
          required:
          - number
          additionalProperties: false
        id:
          type: string
          description: The ID of the attachment to be updated.
      additionalProperties: false
      type: object
      required:
      - version
      - id
      - type
    ContentTemplateCreate:
      description: This object is used to create content templates.
      properties:
        description:
          type: string
          description: A description of the new template.
          maxLength: 255
        templateType:
          description: The type of the new template. Set to `page`.
          type: string
        space:
          required:
          - key
          type: object
          additionalProperties: false
          properties:
            key:
              type: string
          description: |-
            The key for the space of the new template. Only applies to space templates.
            If the spaceKey is not specified, the template will be created as a global
            template.
        body:
          "$ref": "#/components/schemas/ContentBodyCreate"
        name:
          type: string
          description: The name of the new template.
        labels:
          description: Labels for the new template.
          items:
            "$ref": "#/components/schemas/Label"
          type: array
      additionalProperties: false
      required:
      - name
      - templateType
      - body
      type: object
    WatchUser:
      additionalProperties: false
      required:
      - type
      - profilePicture
      - displayName
      - operations
      - accountId
      - details
      type: object
      properties:
        profilePicture:
          "$ref": "#/components/schemas/Icon"
        username:
          type: string
          description: |-
            This property is no longer available and will be removed from the documentation soon.
            Use `accountId` instead.
            See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.
        type:
          type: string
        displayName:
          type: string
        accountId:
          type: string
          description: |-
            The account ID of the user, which uniquely identifies the user across all Atlassian products.
            For example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`.
        userKey:
          type: string
          description: |-
            This property is no longer available and will be removed from the documentation soon.
            Use `accountId` instead.
            See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.
        operations:
          items:
            "$ref": "#/components/schemas/OperationCheckResult"
          type: array
        details:
          "$ref": "#/components/schemas/UserDetails"
      description: |-
        This essentially the same as the `User` object, but no `_links` property and
        no `_expandable` property (therefore, different required fields).
    LongTaskStatus:
      properties:
        percentageComplete:
          format: int32
          type: integer
        id:
          type: string
        elapsedTime:
          format: int64
          type: integer
        messages:
          type: array
          items:
            "$ref": "#/components/schemas/Message"
        successful:
          type: boolean
        name:
          type: object
          required:
          - key
          - args
          additionalProperties: false
          properties:
            args:
              type: array
              items:
                type: object
            key:
              type: string
      required:
      - id
      - name
      - elapsedTime
      - percentageComplete
      - successful
      - messages
      type: object
      additionalProperties: false
    SystemInfoEntity:
      type: object
      required:
      - cloudId
      - commitHash
      additionalProperties: false
      properties:
        commitHash:
          type: string
        cloudId:
          type: string
    SpaceProperty:
      properties:
        space:
          "$ref": "#/components/schemas/Space"
        id:
          type: integer
          format: int64
        key:
          type: string
        version:
          properties:
            when:
              format: date-time
              type: string
            number:
              type: integer
            message:
              type: string
            minorEdit:
              type: boolean
          additionalProperties: false
          required:
          - when
          - message
          - number
          - minorEdit
          type: object
        _expandable:
          properties:
            space:
              type: string
            version:
              type: string
          type: object
        value:
          type: object
          additionalProperties: true
      additionalProperties: false
      type: object
      required:
      - id
      - key
      - value
      - _expandable
    ContentBodyCreate:
      properties:
        representation:
          description: |-
            The content format type. Set the value of this property to
            the name of the format being used, e.g. 'storage'.
          enum:
          - view
          - export_view
          - styled_view
          - storage
          - editor2
          - anonymous_export_view
          type: string
        value:
          type: string
          description: The body of the content in the relevant format.
      description: This object is used when creating or updating content.
      required:
      - value
      - representation
      type: object
      additionalProperties: false
    SpacePropertyUpdate:
      properties:
        version:
          type: object
          required:
          - number
          additionalProperties: false
          description: The version number of the property.
          properties:
            minorEdit:
              type: boolean
              default: true
              description: |-
                If `minorEdit` is set to 'true', no notification email or activity
                stream will be generated for the change.
            number:
              description: |-
                The new version for the updated space property. Set this to the
                current version number incremented by one. To get the current
                version number, use 'Get space property' and retrieve
                `version.number`.
              format: int32
              type: integer
        value:
          description: The value of the property.
          additionalProperties: true
          type: object
      type: object
      required:
      - value
      - version
      additionalProperties: false
    Version:
      properties:
        _links:
          "$ref": "#/components/schemas/GenericLinks"
        collaborators:
          "$ref": "#/components/schemas/UsersUserKeys"
        friendlyWhen:
          type: string
        number:
          format: int32
          type: integer
        content:
          "$ref": "#/components/schemas/Content"
        by:
          "$ref": "#/components/schemas/User"
        message:
          type: string
        when:
          format: date-time
          type: string
        _expandable:
          required:
          - content
          - collaborators
          type: object
          properties:
            content:
              type: string
            collaborators:
              type: string
        minorEdit:
          type: boolean
      required:
      - by
      - when
      - friendlyWhen
      - message
      - number
      - minorEdit
      - _expandable
      - _links
      type: object
      additionalProperties: false
    WatchArray:
      properties:
        _links:
          "$ref": "#/components/schemas/GenericLinks"
        limit:
          format: int32
          type: integer
        size:
          format: int32
          type: integer
        start:
          format: int32
          type: integer
        results:
          items:
            "$ref": "#/components/schemas/Watch"
          type: array
      additionalProperties: false
      required:
      - results
      - start
      - limit
      - size
      - _links
      type: object
    CopyPageHierarchyRequest:
      type: object
      properties:
        titleOptions:
          "$ref": "#/components/schemas/CopyPageHierarchyTitleOptions"
        copyAttachments:
          description: If set to `true`, attachments are copied to the destination
            page.
          default: false
          type: boolean
        copyPermissions:
          description: If set to `true`, page permissions are copied to the destination
            page.
          type: boolean
          default: false
        copyCustomContents:
          description: If set to `true`, custom contents are copied to the destination
            page.
          type: boolean
          default: false
        copyLabels:
          description: If set to `true`, labels are copied to the destination page.
          type: boolean
          default: false
        copyProperties:
          description: If set to `true`, content properties are copied to the destination
            page.
          type: boolean
          default: false
        destinationPageId:
          "$ref": "#/components/schemas/ContentId"
    AccountIdEmailRecord:
      properties:
        accountId:
          type: string
        email:
          type: string
      additionalProperties: false
      type: object
      required:
      - accountId
      - email
    HeaderLookAndFeel:
      properties:
        button:
          "$ref": "#/components/schemas/ButtonLookAndFeel"
        primaryNavigation:
          "$ref": "#/components/schemas/NavigationLookAndFeel"
        search:
          "$ref": "#/components/schemas/SearchFieldLookAndFeel"
        secondaryNavigation:
          "$ref": "#/components/schemas/NavigationLookAndFeel"
        backgroundColor:
          type: string
      additionalProperties: false
      type: object
      required:
      - backgroundColor
      - button
      - primaryNavigation
      - secondaryNavigation
      - search
    AuditRecordCreate:
      type: object
      required:
      - remoteAddress
      additionalProperties: false
      properties:
        author:
          properties:
            operations:
              description: Always defaults to null.
              enum:
              -
              default:
              type: object
            type:
              description: Set to 'user'.
              default: user
              type: string
              enum:
              - user
            username:
              description: This property has been deprecated and will be removed soon.
              type: string
            displayName:
              description: The name that is displayed on the audit log in the Confluence
                UI.
              type: string
            userKey:
              description: This property has been deprecated and will be removed soon.
              type: string
          description: |-
            The user that actioned the event. If `author` is not specified, then all
            `author` properties will be set to null/empty, except for `type` which
            will be set to 'user'.
          type: object
          required:
          - type
          additionalProperties: false
        summary:
          type: string
          description: |-
            The summary of the event, which is displayed in the 'Change' column on
            the audit log in the Confluence UI.
        remoteAddress:
          description: The IP address of the computer where the event was initiated
            from.
          type: string
        associatedObjects:
          description: |-
            Objects that were associated with the event. For example, if the event
            was a space permission change then the associated object would be the
            space.
          type: array
          items:
            "$ref": "#/components/schemas/AffectedObject"
        category:
          type: string
          description: |-
            The category of the event, which is displayed in the 'Event type' column
            on the audit log in the Confluence UI.
        affectedObject:
          "$ref": "#/components/schemas/AffectedObject"
        description:
          type: string
          description: |-
            A long description of the event, which is displayed in the 'Description'
            field on the audit log in the Confluence UI.
        changedValues:
          description: The values that were changed in the event.
          items:
            "$ref": "#/components/schemas/ChangedValue"
          type: array
        sysAdmin:
          description: Indicates whether the event was actioned by a system administrator.
          default: false
          type: boolean
        creationDate:
          type: integer
          format: int64
          description: |-
            The creation date-time of the audit record, as a timestamp. This is converted
            to a date-time display in the Confluence UI. If the `creationDate` is not
            specified, then it will be set to the timestamp for the current date-time.
    Breadcrumb:
      properties:
        separator:
          type: string
        url:
          type: string
        label:
          type: string
      required:
      - label
      - url
      - separator
      type: object
      additionalProperties: false
    VersionRestore:
      required:
      - operationKey
      - params
      type: object
      additionalProperties: false
      properties:
        params:
          properties:
            versionNumber:
              type: integer
              description: The version number to be restored.
              format: int32
            message:
              description: Description for the version.
              type: string
          additionalProperties: false
          type: object
          required:
          - versionNumber
          - message
        operationKey:
          enum:
          - RESTORE
          type: string
          description: Set to 'RESTORE'.
    GroupArray:
      properties:
        limit:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        start:
          format: int32
          type: integer
        results:
          items:
            "$ref": "#/components/schemas/Group"
          type: array
      required:
      - results
      - start
      - limit
      - size
      type: object
      additionalProperties: false
    CQLPersonalDataConvertedQueries:
      properties:
        queryStrings:
          description: |-
            The list of converted CQL query strings with account IDs in
            place of user identifiers.
          items:
            type: string
          type: array
      description: The converted CQL queries.
      additionalProperties: false
      type: object
      required:
      - queryStrings
    SpacePropertyCreateNoKey:
      additionalProperties: false
      required:
      - value
      type: object
      properties:
        value:
          "$ref": "#/components/schemas/PropertyValue"
    Embeddable:
      type: object
    PropertyValue:
      description: |-
        The value of the property. This can be empty or a complex object.
        For example,
        ```
        "value": {
          "example1": "value",
          "example2": true,
          "example3": 123
        }
        ```
      type: object
      additionalProperties: true
    ContentTemplateUpdate:
      description: This object is used to update content templates.
      properties:
        labels:
          items:
            "$ref": "#/components/schemas/Label"
          type: array
          description: Labels for the template.
        name:
          type: string
          description: |-
            The name of the template. Set to the current `name` if this field is
            not being updated.
        templateId:
          type: string
          description: The ID of the template being updated.
        body:
          "$ref": "#/components/schemas/ContentBodyCreate"
        space:
          type: object
          required:
          - key
          additionalProperties: false
          description: |-
            The key for the space of the template. Required if the template is a
            space template. Set this to the current `space.key`.
          properties:
            key:
              type: string
        description:
          maxLength: 100
          description: A description of the template.
          type: string
        templateType:
          description: The type of the template. Set to `page`.
          type: string
          enum:
          - page
      type: object
      required:
      - templateId
      - name
      - templateType
      - body
      additionalProperties: false
    ContentRestriction:
      required:
      - operation
      - _expandable
      - _links
      type: object
      additionalProperties: false
      properties:
        _expandable:
          properties:
            content:
              type: string
            restrictions:
              type: string
          additionalProperties: false
          type: object
        content:
          "$ref": "#/components/schemas/Content"
        operation:
          type: string
          enum:
          - administer
          - copy
          - create
          - delete
          - export
          - move
          - purge
          - purge_version
          - read
          - restore
          - update
          - use
        restrictions:
          properties:
            _expandable:
              properties:
                user:
                  type: string
                group:
                  type: string
              type: object
              additionalProperties: false
            user:
              "$ref": "#/components/schemas/UserArray"
            group:
              "$ref": "#/components/schemas/GroupArray"
          type: object
          additionalProperties: false
        _links:
          "$ref": "#/components/schemas/GenericLinks"
    SpaceDescriptionCreate:
      additionalProperties: false
      type: object
      required:
      - plain
      description: |-
        The description of the new/updated space. Note, only the 'plain' representation
        can be used for the description when creating or updating a space.
      properties:
        plain:
          properties:
            value:
              type: string
              description: The space description.
            representation:
              type: string
              description: Set to 'plain'.
          type: object
    UserArray:
      type: object
      required:
      - results
      - start
      - limit
      - size
      properties:
        results:
          items:
            "$ref": "#/components/schemas/User"
          type: array
        limit:
          format: int32
          type: integer
        size:
          format: int32
          type: integer
        start:
          type: integer
          format: int32
    ConnectModules:
      example:
        adminPages:
        - url: "/my-admin-page"
          name:
            value: My Admin Page
          key: my-admin-page
        webItems:
        - location: system.admin/globalsettings
          url: "/my-web-item"
          name:
            value: My Web Item
          key: my-webitem
      description: |-
        A list of app modules in the same format as the `modules` property in the
        [app descriptor](https://developer.atlassian.com/cloud/confluence/app-descriptor/).
      type: object
      additionalProperties:
        type: array
        items:
          "$ref": "#/components/schemas/ConnectModule"
        description: A list of modules by type.
    BlueprintTemplate:
      required:
      - templateId
      - originalTemplate
      - referencingBlueprint
      - name
      - description
      - labels
      - templateType
      - _expandable
      - _links
      type: object
      additionalProperties: false
      properties:
        name:
          type: string
        labels:
          type: array
          items:
            "$ref": "#/components/schemas/Label"
        templateType:
          type: string
        description:
          type: string
        body:
          "$ref": "#/components/schemas/ContentBody"
        _links:
          "$ref": "#/components/schemas/GenericLinks"
        referencingBlueprint:
          type: string
        originalTemplate:
          properties:
            moduleKey:
              type: string
            pluginKey:
              type: string
          additionalProperties: false
          required:
          - pluginKey
          - moduleKey
          type: object
        _expandable:
          properties:
            body:
              type: string
          type: object
          additionalProperties: false
        templateId:
          type: string
    ContentChildType:
      description: |-
        Shows whether a piece of content has attachments, comments, or child pages.
        Note, this doesn't actually contain the child objects.
      properties:
        comment:
          type: object
          required:
          - value
          - _links
          additionalProperties: false
          properties:
            value:
              type: boolean
            _links:
              "$ref": "#/components/schemas/GenericLinks"
        attachment:
          properties:
            _links:
              "$ref": "#/components/schemas/GenericLinks"
            value:
              type: boolean
          additionalProperties: false
          type: object
          required:
          - value
          - _links
        _expandable:
          type: object
          additionalProperties: false
          properties:
            attachment:
              type: string
            comment:
              type: string
            all:
              type: string
            page:
              type: string
        page:
          required:
          - value
          - _links
          type: object
          additionalProperties: false
          properties:
            value:
              type: boolean
            _links:
              "$ref": "#/components/schemas/GenericLinks"
      type: object
      required:
      - _expandable
      additionalProperties: false
    ContentChildren:
      properties:
        page:
          "$ref": "#/components/schemas/ContentArray"
        _links:
          "$ref": "#/components/schemas/GenericLinks"
        attachment:
          "$ref": "#/components/schemas/ContentArray"
        comment:
          "$ref": "#/components/schemas/ContentArray"
        _expandable:
          type: object
          additionalProperties: false
          properties:
            comment:
              type: string
            attachment:
              type: string
            page:
              type: string
      additionalProperties: false
      type: object
      required:
      - _expandable
      - _links
    Group:
      additionalProperties: false
      required:
      - type
      - name
      - _links
      type: object
      properties:
        name:
          type: string
        type:
          default: group
          type: string
          enum:
          - group
        _links:
          "$ref": "#/components/schemas/GenericLinks"
    Icon:
      type: object
      required:
      - path
      - width
      - height
      - isDefault
      additionalProperties: false
      description: This object represents an icon. If used as a profilePicture, this
        may be returned as null, depending on the user's privacy setting.
      properties:
        isDefault:
          type: boolean
        width:
          format: int32
          type: integer
        path:
          type: string
        height:
          format: int32
          type: integer
    LookAndFeelUpdated:
      description: Look and feel settings returned after an update.
      allOf:
      - "$ref": "#/components/schemas/LookAndFeel"
      - properties:
          _links:
            "$ref": "#/components/schemas/GenericLinks"
        additionalProperties: false
        required:
        - _links
        type: object
    SpacePropertyCreate:
      properties:
        value:
          "$ref": "#/components/schemas/PropertyValue"
        key:
          type: string
          description: The key of the new property.
          maximum: 255
      required:
      - key
      - value
      type: object
      additionalProperties: false
    NavigationLookAndFeel:
      properties:
        hoverOrFocus:
          properties:
            backgroundColor:
              type: string
            color:
              type: string
          type: object
          required:
          - backgroundColor
          - color
          additionalProperties: false
        color:
          type: string
      type: object
      required:
      - color
      - hoverOrFocus
    ContentHistory:
      properties:
        createdBy:
          "$ref": "#/components/schemas/User"
        nextVersion:
          "$ref": "#/components/schemas/Version"
        previousVersion:
          "$ref": "#/components/schemas/Version"
        lastUpdated:
          "$ref": "#/components/schemas/Version"
        contributors:
          type: object
          properties:
            publishers:
              "$ref": "#/components/schemas/UsersUserKeys"
        _links:
          "$ref": "#/components/schemas/GenericLinks"
        latest:
          type: boolean
        _expandable:
          additionalProperties: false
          type: object
          properties:
            lastUpdated:
              type: string
            contributors:
              type: string
            nextVersion:
              type: string
            previousVersion:
              type: string
        createdDate:
          type: string
          format: date-time
      additionalProperties: false
      required:
      - latest
      - createdBy
      - createdDate
      type: object
    SearchFieldLookAndFeel:
      properties:
        color:
          type: string
        backgroundColor:
          type: string
      type: object
      required:
      - backgroundColor
      - color
      additionalProperties: false
    SpacePermission:
      required:
      - subjects
      - operation
      - anonymousAccess
      - unlicensedAccess
      type: object
      additionalProperties: false
      description: |-
        This object represents a permission for given space. Permissions consist of
        at least one operation object with an accompanying subjects object.

        The following combinations of `operation` and `targetType` values are
        valid for the `operation` object:

          - 'create': 'page', 'blogpost', 'comment', 'attachment'
          - 'read': 'space'
          - 'delete': 'page', 'blogpost', 'comment', 'attachment'
          - 'export': 'space'
          - 'administer': 'space'
      properties:
        operation:
          "$ref": "#/components/schemas/OperationCheckResult"
        unlicensedAccess:
          description: |-
            Grants access to unlicensed users from JIRA Service Desk when used
            with the 'read space' operation.
          type: boolean
          default: false
        anonymousAccess:
          description: Grant anonymous users permission to use the operation.
          type: boolean
          default: false
        subjects:
          additionalProperties: false
          type: object
          required:
          - _expandable
          description: The users and/or groups that the permission applies to.
          properties:
            user:
              additionalProperties: false
              type: object
              required:
              - results
              - size
              properties:
                size:
                  format: int32
                  type: integer
                results:
                  items:
                    "$ref": "#/components/schemas/User"
                  type: array
            _expandable:
              type: object
              properties:
                group:
                  type: string
                user:
                  type: string
            group:
              type: object
              required:
              - results
              - size
              additionalProperties: false
              properties:
                results:
                  items:
                    "$ref": "#/components/schemas/Group"
                  type: array
                size:
                  format: int32
                  type: integer
    OperationCheckResult:
      description: An operation and the target entity that it applies to, e.g. create
        page.
      properties:
        operation:
          description: The operation itself.
          type: string
          enum:
          - administer
          - copy
          - create
          - delete
          - export
          - move
          - purge
          - purge_version
          - read
          - restore
          - update
          - use
        targetType:
          description: The space or content type that the operation applies to.
          type: string
          enum:
          - page
          - blogpost
          - comment
          - attachment
          - space
      required:
      - operation
      - targetType
      type: object
      additionalProperties: false
    LongTaskStatusArray:
      properties:
        size:
          type: integer
          format: int32
        start:
          type: integer
          format: int32
        limit:
          type: integer
          format: int32
        results:
          items:
            "$ref": "#/components/schemas/LongTaskStatus"
          type: array
        _links:
          "$ref": "#/components/schemas/GenericLinks"
      required:
      - results
      - start
      - limit
      - size
      - _links
      type: object
      additionalProperties: false
    LabelCreate:
      additionalProperties: false
      type: object
      required:
      - prefix
      - name
      properties:
        prefix:
          type: string
          enum:
          - global
          - my
          - team
          description: The prefix for the label.
        name:
          type: string
          description: The name of the label, which will be shown in the UI.
    Space:
      additionalProperties: false
      type: object
      required:
      - id
      - key
      - name
      - type
      - status
      - _expandable
      - _links
      properties:
        lookAndFeel:
          "$ref": "#/components/schemas/LookAndFeel"
        status:
          type: string
        theme:
          "$ref": "#/components/schemas/Theme"
        description:
          properties:
            plain:
              "$ref": "#/components/schemas/SpaceDescription"
            view:
              "$ref": "#/components/schemas/SpaceDescription"
          additionalProperties: false
          type: object
        _links:
          "$ref": "#/components/schemas/GenericLinks"
        settings:
          "$ref": "#/components/schemas/SpaceSettings"
        homepage:
          "$ref": "#/components/schemas/Content"
        operations:
          type: array
          items:
            "$ref": "#/components/schemas/OperationCheckResult"
        _expandable:
          type: object
          properties:
            permissions:
              type: string
            homepage:
              type: string
            operations:
              type: string
            description:
              type: string
            settings:
              type: string
            metadata:
              type: string
            lookAndFeel:
              type: string
            icon:
              type: string
            history:
              type: string
            theme:
              type: string
        permissions:
          items:
            "$ref": "#/components/schemas/SpacePermission"
          type: array
        metadata:
          additionalProperties: false
          type: object
          required:
          - labels
          properties:
            labels:
              "$ref": "#/components/schemas/LabelArray"
        icon:
          "$ref": "#/components/schemas/Icon"
        name:
          type: string
        type:
          type: string
        history:
          properties:
            createdDate:
              type: string
              format: date-time
          type: object
          required:
          - createdDate
          additionalProperties: false
        key:
          type: string
        id:
          type: integer
          format: int64
    ContentPropertyArray:
      properties:
        _links:
          "$ref": "#/components/schemas/GenericLinks"
        size:
          format: int32
          type: integer
        start:
          format: int32
          type: integer
        limit:
          format: int32
          type: integer
        results:
          type: array
          items:
            "$ref": "#/components/schemas/ContentProperty"
      required:
      - results
      - start
      - limit
      - size
      - _links
      type: object
      additionalProperties: false
    EmbeddedContent:
      properties:
        entityId:
          type: integer
          format: int64
        entity:
          "$ref": "#/components/schemas/Embeddable"
      type: object
    CopyPageRequest:
      properties:
        copyCustomContents:
          description: If set to `true`, custom contents are copied to the destination
            page.
          type: boolean
          default: false
        copyAttachments:
          type: boolean
          default: false
          description: If set to `true`, attachments are copied to the destination
            page.
        copyPermissions:
          type: boolean
          default: false
          description: If set to `true`, page permissions are copied to the destination
            page.
        copyProperties:
          description: If set to `true`, content properties are copied to the destination
            page.
          default: false
          type: boolean
        copyLabels:
          description: If set to `true`, labels are copied to the destination page.
          type: boolean
          default: false
        destination:
          "$ref": "#/components/schemas/CopyPageRequestDestination"
        body:
          description: If defined, this will replace the body of the destination page.
          properties:
            editor2:
              "$ref": "#/components/schemas/ContentBodyCreate"
            storage:
              "$ref": "#/components/schemas/ContentBodyCreate"
          type: object
          additionalProperties: false
          minProperties: 1
          maxProperties: 1
        pageTitle:
          description: If defined, this will replace the title of the destination
            page.
          type: string
      required:
      - destination
      type: object
    BulkUserLookup:
      properties:
        _expandable:
          additionalProperties: false
          type: object
          properties:
            operations:
              type: string
            details:
              type: string
            personalSpace:
              type: string
        publicName:
          type: string
          description: The public name or nickname of the user. Will always contain
            a value.
        accountType:
          description: The account type of the user, may return empty string if unavailable.
          type: string
        email:
          type: string
          description: The email address of the user. Depending on the user's privacy
            setting, this may return an empty string.
        operations:
          items:
            "$ref": "#/components/schemas/OperationCheckResult"
          type: array
        details:
          "$ref": "#/components/schemas/UserDetails"
        personalSpace:
          "$ref": "#/components/schemas/Space"
        username:
          type: string
          description: |-
            This property is no longer available and will be removed from the documentation soon.
            Use `accountId` instead.
            See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.
        profilePicture:
          "$ref": "#/components/schemas/Icon"
        type:
          type: string
          enum:
          - known
          - unknown
          - anonymous
          - user
        accountId:
          description: |-
            The account ID of the user, which uniquely identifies the user across all Atlassian products.
            For example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`.
          type: string
        userKey:
          type: string
          description: |-
            This property is no longer available and will be removed from the documentation soon.
            Use `accountId` instead.
            See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.
        _links:
          "$ref": "#/components/schemas/GenericLinks"
        displayName:
          description: The display name of the user. Depending on the user's privacy
            setting, this may be the same as publicName.
          type: string
      type: object
      required:
      - type
      - accountId
      - accountType
      - email
      - publicName
      - profilePicture
      - displayName
      - _expandable
      - _links
      additionalProperties: false
    LabelArray:
      type: object
      required:
      - results
      - start
      - limit
      - size
      - _links
      additionalProperties: false
      properties:
        _links:
          "$ref": "#/components/schemas/GenericLinks"
        results:
          items:
            "$ref": "#/components/schemas/Label"
          type: array
        start:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        limit:
          type: integer
          format: int32
    ContentRestrictionArray:
      additionalProperties: false
      required:
      - results
      - start
      - limit
      - size
      - restrictionsHash
      - _links
      type: object
      properties:
        size:
          format: int32
          type: integer
        start:
          format: int32
          type: integer
        limit:
          type: integer
          format: int32
        results:
          type: array
          items:
            "$ref": "#/components/schemas/ContentRestriction"
        restrictionsHash:
          description: |-
            This property is used by the UI to figure out whether a set of restrictions
            has changed.
          type: string
        _links:
          "$ref": "#/components/schemas/GenericLinks"
    Label:
      type: object
      required:
      - prefix
      - name
      - id
      - label
      additionalProperties: false
      properties:
        id:
          type: string
        label:
          type: string
        prefix:
          type: string
        name:
          type: string
    AccountIdEmailRecordArray:
      type: array
      items:
        "$ref": "#/components/schemas/AccountIdEmailRecord"
    SpaceWatchUser:
      description: |-
        This essentially the same as the `User` object, but no `_links` property and
        no `_expandable` property (therefore, different required fields).
      properties:
        username:
          description: |-
            This property is no longer available and will be removed from the documentation soon.
            Use `accountId` instead.
            See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.
          type: string
        profilePicture:
          "$ref": "#/components/schemas/Icon"
        type:
          type: string
        userKey:
          type: string
          description: |-
            This property is no longer available and will be removed from the documentation soon.
            Use `accountId` instead.
            See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.
        accountId:
          type: string
          description: |-
            The account ID of the user, which uniquely identifies the user across all Atlassian products.
            For example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`.
        displayName:
          type: string
        accountType:
          type: string
        publicName:
          type: string
        email:
          type: string
        operations:
          type: array
          items:
            "$ref": "#/components/schemas/OperationCheckResult"
        details:
          "$ref": "#/components/schemas/UserDetails"
      required:
      - type
      - profilePicture
      - displayName
      - accountId
      - accountType
      - email
      - publicName
      type: object
      additionalProperties: false
    MigratedUserArray:
      required:
      - results
      - start
      - limit
      - size
      - _links
      type: object
      properties:
        results:
          type: array
          items:
            "$ref": "#/components/schemas/MigratedUser"
        size:
          type: integer
          format: int32
        start:
          format: int32
          type: integer
        limit:
          type: integer
          format: int32
        _links:
          "$ref": "#/components/schemas/GenericLinks"
    SpaceWatchArray:
      properties:
        size:
          format: int32
          type: integer
        start:
          type: integer
          format: int32
        limit:
          type: integer
          format: int32
        results:
          type: array
          items:
            "$ref": "#/components/schemas/SpaceWatch"
        _links:
          "$ref": "#/components/schemas/GenericLinks"
      required:
      - results
      - start
      - limit
      - size
      type: object
      additionalProperties: false
    ContentBody:
      additionalProperties: false
      required:
      - value
      - representation
      - _expandable
      type: object
      properties:
        representation:
          enum:
          - view
          - export_view
          - styled_view
          - storage
          - editor2
          - anonymous_export_view
          type: string
        webresource:
          "$ref": "#/components/schemas/WebResourceDependencies"
        embeddedContent:
          type: array
          items:
            "$ref": "#/components/schemas/EmbeddedContent"
        value:
          type: string
        _expandable:
          properties:
            content:
              type: string
          type: object
          additionalProperties: false
    GroupArrayWithLinks:
      description: Same as GroupArray but with `_links` property.
      allOf:
      - "$ref": "#/components/schemas/GroupArray"
      - required:
        - _links
        type: object
        additionalProperties: false
        properties:
          _links:
            "$ref": "#/components/schemas/GenericLinks"
    MigratedUser:
      properties:
        accountId:
          type: string
        username:
          type: string
        key:
          type: string
      type: object
      additionalProperties: false
    LabelCreateArray:
      items:
        "$ref": "#/components/schemas/LabelCreate"
      type: array
    SpaceCreate:
      description: This is the request object used when creating a new space.
      properties:
        name:
          type: string
          maxLength: 200
          description: The name of the new space.
        key:
          type: string
          description: |-
            The key for the new space. Format: See [Space
            keys](https://confluence.atlassian.com/x/lqNMMQ).
        description:
          "$ref": "#/components/schemas/SpaceDescriptionCreate"
        permissions:
          items:
            "$ref": "#/components/schemas/SpacePermission"
          type: array
          description: |-
            The permissions for the new space. If no permissions are provided, the
            [Confluence default space permissions](https://confluence.atlassian.com/x/UAgzKw#CreateaSpace-Spacepermissions)
            are applied. Note, for security reasons, permissions cannot be changed
            via the API after the space has been created, and must be changed via
            the user interface instead.
      type: object
      required:
      - key
      - name
      additionalProperties: false
    UsersUserKeys:
      properties:
        users:
          items:
            "$ref": "#/components/schemas/User"
          type: array
        _links:
          "$ref": "#/components/schemas/GenericLinks"
        userKeys:
          items:
            type: string
          type: array
      type: object
      required:
      - users
      - userKeys
      additionalProperties: false
    WebResourceDependencies:
      type: object
      properties:
        uris:
          properties:
            js:
              type: string
            all:
              type: string
            css:
              type: string
          type: object
        contexts:
          items:
            type: string
          type: array
        tags:
          type: object
          properties:
            js:
              type: string
            all:
              type: string
            data:
              type: string
            css:
              type: string
        superbatch:
          "$ref": "#/components/schemas/SuperBatchWebResources"
        keys:
          items:
            type: string
          type: array
    SpacePrivateCreate:
      type: object
      required:
      - key
      - name
      additionalProperties: false
      properties:
        name:
          description: The name of the new space.
          maxLength: 200
          type: string
        key:
          type: string
          description: |-
            The key for the new space. Format: See [Space
            keys](https://confluence.atlassian.com/x/lqNMMQ).
        description:
          "$ref": "#/components/schemas/SpaceDescriptionCreate"
      description: This is the request object used when creating a new private space.
    ConnectModule:
      example:
        location: system.admin/globalsettings
        url: "/my-web-item"
        name:
          value: My Web Item
        key: my-webitem
      description: |-
        A [Connect module](https://developer.atlassian.com/cloud/confluence/modules/admin-page/) in the same format as in the
        [app descriptor](https://developer.atlassian.com/cloud/confluence/app-descriptor/).
      type: object
    RelationData:
      properties:
        createdDate:
          type: string
          format: date-time
        createdBy:
          "$ref": "#/components/schemas/User"
        friendlyCreatedDate:
          type: string
      type: object
    ContentUpdate:
      additionalProperties: false
      required:
      - version
      - title
      - type
      type: object
      properties:
        body:
          additionalProperties: false
          minProperties: 1
          type: object
          maxProperties: 1
          description: |-
            The updated body of the content. Does not apply to attachments.
            If you are not sure how to generate these formats, you can create a page in the
            Confluence application, retrieve the content using [Get content](#api-content-get),
            and expand the desired content format, e.g. `expand=body.storage`.
          properties:
            view:
              "$ref": "#/components/schemas/ContentBodyCreate"
            anonymous_export_view:
              "$ref": "#/components/schemas/ContentBodyCreate"
            editor2:
              "$ref": "#/components/schemas/ContentBodyCreate"
            storage:
              "$ref": "#/components/schemas/ContentBodyCreate"
            export_view:
              "$ref": "#/components/schemas/ContentBodyCreate"
            styled_view:
              "$ref": "#/components/schemas/ContentBodyCreate"
        title:
          description: The updated title of the content. If you are not changing this
            field, set this to the current `title`.
          maxLength: 255
          type: string
        type:
          description: The type of content. Set this to the current type of the content.
          enum:
          - page
          - blogpost
          - comment
          - attachment
          type: string
        status:
          description: |-
            The updated status of the content. Note, if you change the status of a page from
            'current' to 'draft' and it has an existing draft, the existing draft will be deleted
            in favor of the updated page.
          type: string
          enum:
          - current
          - trashed
          - historical
          - draft
        ancestors:
          description: The new parent for the content. Only one parent content 'id'
            can be specified.
          type: array
          items:
            additionalProperties: false
            required:
            - id
            type: object
            properties:
              id:
                description: The `id` of the parent content.
                type: string
        version:
          properties:
            number:
              type: integer
              description: The version number.
              format: int32
          description: |-
            The new version for the updated content. Set this to the current version number incremented by one, unless you are changing the status to 'draft' which must have a version number of 1.

            To get the current version number, use [Get content by ID](#api-content-id-get) and retrieve `version.number`.
          type: object
          required:
          - number
          additionalProperties: false
    ContainerLookAndFeel:
      properties:
        backgroundSize:
          type: string
        backgroundImage:
          type: string
        borderRadius:
          type: string
        backgroundColor:
          type: string
        background:
          type: string
        padding:
          type: string
      type: object
      required:
      - background
      - backgroundColor
      - backgroundImage
      - backgroundSize
      - padding
      - borderRadius
      additionalProperties: false
    SpacePropertyArray:
      properties:
        _links:
          "$ref": "#/components/schemas/GenericLinks"
        results:
          items:
            "$ref": "#/components/schemas/SpaceProperty"
          type: array
        size:
          type: integer
          format: int32
        limit:
          format: int32
          type: integer
        start:
          format: int32
          type: integer
      type: object
      required:
      - results
      - start
      - limit
      - size
      - _links
      additionalProperties: false
    SuperBatchWebResources:
      properties:
        tags:
          type: object
          properties:
            all:
              type: string
            js:
              type: string
            css:
              type: string
            data:
              type: string
        metatags:
          type: string
        uris:
          properties:
            css:
              type: string
            all:
              type: string
            js:
              type: string
          type: object
      type: object
    AuditRecordArray:
      additionalProperties: false
      required:
      - results
      - start
      - limit
      - size
      - _links
      type: object
      properties:
        results:
          type: array
          items:
            "$ref": "#/components/schemas/AuditRecord"
        start:
          format: int32
          type: integer
        size:
          type: integer
          format: int32
        limit:
          type: integer
          format: int32
        _links:
          "$ref": "#/components/schemas/GenericLinks"
    ThemeUpdate:
      additionalProperties: false
      type: object
      required:
      - themeKey
      properties:
        themeKey:
          type: string
          description: The key of the theme to be set as the space theme.
    MenusLookAndFeel:
      additionalProperties: false
      type: object
      required:
      - hoverOrFocus
      - color
      properties:
        color:
          type: string
        hoverOrFocus:
          properties:
            backgroundColor:
              type: string
          required:
          - backgroundColor
          type: object
          additionalProperties: false
    RetentionPeriod:
      properties:
        number:
          type: integer
          description: The number of units for the retention period.
          format: int32
        units:
          description: The unit of time that the retention period is measured in.
          enum:
          - NANOS
          - MICROS
          - MILLIS
          - SECONDS
          - MINUTES
          - HOURS
          - HALF_DAYS
          - DAYS
          - WEEKS
          - MONTHS
          - YEARS
          - DECADES
          - CENTURIES
          - MILLENNIA
          - ERAS
          - FOREVER
          type: string
      additionalProperties: false
      required:
      - number
      - units
      type: object
    SearchPageResponseSearchResult:
      additionalProperties: false
      type: object
      required:
      - results
      - start
      - limit
      - size
      - totalSize
      - cqlQuery
      - searchDuration
      - _links
      properties:
        start:
          type: integer
          format: int32
        searchDuration:
          format: int32
          type: integer
        totalSize:
          type: integer
          format: int32
        _links:
          "$ref": "#/components/schemas/GenericLinks"
        cqlQuery:
          type: string
        limit:
          type: integer
          format: int32
        size:
          format: int32
          type: integer
        results:
          type: array
          items:
            "$ref": "#/components/schemas/SearchResult"
    ContentArray:
      properties:
        results:
          items:
            "$ref": "#/components/schemas/Content"
          type: array
        limit:
          format: int32
          type: integer
        size:
          format: int32
          type: integer
        start:
          type: integer
          format: int32
        _links:
          "$ref": "#/components/schemas/GenericLinks"
      required:
      - results
      - start
      - limit
      - size
      - _links
      type: object
      additionalProperties: false
    UserWatch:
      required:
      - watching
      type: object
      additionalProperties: false
      properties:
        watching:
          type: boolean
    ContentPropertyCreate:
      properties:
        key:
          maxLength: 255
          description: The key of the new property.
          type: string
        value:
          "$ref": "#/components/schemas/PropertyValue"
      additionalProperties: false
      required:
      - key
      - value
      type: object
    ContentLookAndFeel:
      properties:
        body:
          "$ref": "#/components/schemas/ContainerLookAndFeel"
        screen:
          "$ref": "#/components/schemas/ScreenLookAndFeel"
        container:
          "$ref": "#/components/schemas/ContainerLookAndFeel"
        header:
          "$ref": "#/components/schemas/ContainerLookAndFeel"
      type: object
      required:
      - screen
      - container
      - header
      - body
    ContentCreate:
      properties:
        space:
          required:
          - key
          type: object
          description: The space that the content is being created in.
          properties:
            key:
              type: string
              description: The key of the space.
        body:
          minProperties: 1
          additionalProperties: false
          type: object
          maxProperties: 1
          description: |-
            The body of the new content. Does not apply to attachments.
            Only one body format should be specified as the property for
            this object, e.g. `storage`.

            Note, `editor2` format is used by Atlassian only. `anonymous_export_view` is
            the same as 'export_view' format but only content viewable by an anonymous
            user is included.
          properties:
            editor2:
              "$ref": "#/components/schemas/ContentBodyCreate"
            anonymous_export_view:
              "$ref": "#/components/schemas/ContentBodyCreate"
            storage:
              "$ref": "#/components/schemas/ContentBodyCreate"
            view:
              "$ref": "#/components/schemas/ContentBodyCreate"
            styled_view:
              "$ref": "#/components/schemas/ContentBodyCreate"
            export_view:
              "$ref": "#/components/schemas/ContentBodyCreate"
        id:
          type: string
          description: The ID of the draft content. Required when publishing a draft.
        status:
          default: current
          type: string
          enum:
          - current
          - trashed
          - historical
          - draft
          description: The status of the new content.
        ancestors:
          items:
            properties:
              id:
                description: The `id` of the parent content.
                type: string
            required:
            - id
            type: object
          type: array
          description: |-
            The parent content of the new content. Only one parent content
            `id` can be specified.
        type:
          description: The type of the new content. Custom content types defined by
            apps are also supported.
          enum:
          - page
          - blogpost
          - comment
          - attachment
          type: string
        title:
          maxLength: 255
          type: string
      required:
      - title
      - type
      - space
      - body
      type: object
      additionalProperties: false
    ContentBlogpost:
      allOf:
      - "$ref": "#/components/schemas/Content"
      - additionalProperties: false
        required:
        - metadata
        - _links
        type: object
        properties:
          _links:
            "$ref": "#/components/schemas/GenericLinks"
          metadata:
            "$ref": "#/components/schemas/ContentMetadata"
      description: Representation of a blogpost (content)
    RelationArray:
      additionalProperties: false
      type: object
      required:
      - results
      - start
      - limit
      - size
      - _links
      properties:
        _links:
          "$ref": "#/components/schemas/GenericLinks"
        results:
          type: array
          items:
            "$ref": "#/components/schemas/Relation"
        limit:
          type: integer
          format: int32
        size:
          format: int32
          type: integer
        start:
          type: integer
          format: int32
    ContentBlueprintDraft:
      properties:
        type:
          description: The type of content. Set this to `page`.
          enum:
          - page
          type: string
        title:
          maxLength: 255
          description: |-
            The title of the content. If you don't want to change the title,
            set this to the current title of the draft.
          type: string
        ancestors:
          items:
            required:
            - id
            type: object
            additionalProperties: false
            properties:
              id:
                description: The content ID of the ancestor.
                type: string
          type: array
          description: |-
            The new ancestor (i.e. parent page) for the content. If you have
            specified an ancestor, you must also specify a `space` property
            in the request body for the space that the ancestor is in.

            Note, if you specify more than one ancestor, the last ID in the array
            will be selected as the parent page for the content.
        version:
          additionalProperties: false
          required:
          - number
          type: object
          properties:
            number:
              type: integer
              description: The version number. Set this to `1`.
              format: int32
          description: The version for the new content.
        status:
          enum:
          - current
          default: current
          type: string
          description: The status of the content. Set this to `current` or omit it
            altogether.
        space:
          required:
          - key
          type: object
          additionalProperties: false
          properties:
            key:
              type: string
              format: int32
              description: The key of the space
          description: The space for the content.
      required:
      - version
      - title
      - type
      type: object
      additionalProperties: false
    Message:
      properties:
        args:
          type: array
          items:
            type: object
        translation:
          type: string
      additionalProperties: false
      type: object
      required:
      - translation
      - args
    SearchResult:
      properties:
        title:
          type: string
        excerpt:
          type: string
        friendlyLastModified:
          type: string
        url:
          type: string
        iconCssClass:
          type: string
        breadcrumbs:
          items:
            "$ref": "#/components/schemas/Breadcrumb"
          type: array
        lastModified:
          format: date-time
          type: string
        resultParentContainer:
          "$ref": "#/components/schemas/ContainerSummary"
        resultGlobalContainer:
          "$ref": "#/components/schemas/ContainerSummary"
        entityType:
          type: string
        content:
          "$ref": "#/components/schemas/Content"
      required:
      - content
      - title
      - excerpt
      - url
      - resultParentContainer
      - resultGlobalContainer
      - breadcrumbs
      - entityType
      - iconCssClass
      - lastModified
      - friendlyLastModified
      type: object
      additionalProperties: false
    UserAnonymous:
      properties:
        _links:
          "$ref": "#/components/schemas/GenericLinks"
        displayName:
          type: string
        _expandable:
          properties:
            operations:
              type: string
          additionalProperties: false
          type: object
        profilePicture:
          "$ref": "#/components/schemas/Icon"
        operations:
          items:
            "$ref": "#/components/schemas/OperationCheckResult"
          type: array
        type:
          type: string
      required:
      - type
      - profilePicture
      - displayName
      - _expandable
      - _links
      type: object
      additionalProperties: false
    Content:
      properties:
        ancestors:
          type: array
          items:
            "$ref": "#/components/schemas/Content"
        _expandable:
          properties:
            space:
              type: string
            body:
              type: string
            restrictions:
              type: string
            descendants:
              type: string
            metadata:
              type: string
            version:
              type: string
            history:
              type: string
            operations:
              type: string
            container:
              type: string
            children:
              type: string
            ancestors:
              type: string
            childTypes:
              type: string
          type: object
          additionalProperties: false
        operations:
          items:
            "$ref": "#/components/schemas/OperationCheckResult"
          type: array
        body:
          maxProperties: 1
          additionalProperties: false
          minProperties: 1
          type: object
          required:
          - _expandable
          properties:
            anonymous_export_view:
              "$ref": "#/components/schemas/ContentBody"
            editor2:
              "$ref": "#/components/schemas/ContentBody"
            storage:
              "$ref": "#/components/schemas/ContentBody"
            _expandable:
              type: object
              additionalProperties: false
              properties:
                editor:
                  type: string
                styled_view:
                  type: string
                export_view:
                  type: string
                view:
                  type: string
                anonymous_export_view:
                  type: string
                editor2:
                  type: string
                storage:
                  type: string
            view:
              "$ref": "#/components/schemas/ContentBody"
            styled_view:
              "$ref": "#/components/schemas/ContentBody"
            export_view:
              "$ref": "#/components/schemas/ContentBody"
        _links:
          "$ref": "#/components/schemas/GenericLinks"
        status:
          type: string
        version:
          "$ref": "#/components/schemas/Version"
        id:
          type: string
        children:
          "$ref": "#/components/schemas/ContentChildren"
        childTypes:
          "$ref": "#/components/schemas/ContentChildType"
        container:
          "$ref": "#/components/schemas/Container"
        title:
          type: string
        descendants:
          "$ref": "#/components/schemas/ContentChildren"
        restrictions:
          required:
          - _links
          type: object
          additionalProperties: false
          properties:
            update:
              "$ref": "#/components/schemas/ContentRestriction"
            read:
              "$ref": "#/components/schemas/ContentRestriction"
            _links:
              "$ref": "#/components/schemas/GenericLinks"
        space:
          "$ref": "#/components/schemas/Space"
        history:
          "$ref": "#/components/schemas/ContentHistory"
        type:
          type: string
      description: Base object for all content types.
      type: object
      required:
      - id
      - type
      - status
      - title
      - _expandable
      additionalProperties: true
    ContentMetadata:
      type: object
      additionalProperties: false
      description: Metadata object for page, blogpost, comment content
      properties:
        frontend:
          type: object
        properties:
          "$ref": "#/components/schemas/GenericLinks"
        currentuser:
          properties:
            favourited:
              type: object
              properties:
                isFavourite:
                  type: boolean
                favouritedDate:
                  format: date-time
                  type: string
            viewed:
              type: object
              properties:
                friendlyLastSeen:
                  type: string
                lastSeen:
                  type: string
                  format: date-time
            lastmodified:
              properties:
                friendlyLastModified:
                  type: string
                version:
                  "$ref": "#/components/schemas/Version"
              type: object
            lastcontributed:
              type: object
              properties:
                when:
                  type: string
                  format: date-time
                status:
                  type: string
          type: object
        labels:
          "$ref": "#/components/schemas/LabelArray"
    CopyPageRequestDestination:
      type: object
      required:
      - type
      - value
      description: |-
        Defines where the page will be copied to, and can be one of the following types.

          - `parent_page`: page will be copied as a child of the specified parent page
          - `space`: page will be copied to the specified space as a root page on the space
          - `existing_page`: page will be copied and replace the specified page
      properties:
        value:
          type: string
          description: The space key for `space` type, and content id for `parent_page`
            and `existing_page`
        type:
          enum:
          - space
          - existing_page
          - parent_page
          type: string
    UserArrayWithLinks:
      description: Same as UserArray but with `_links` property.
      allOf:
      - "$ref": "#/components/schemas/UserArray"
      - type: object
        required:
        - _links
        additionalProperties: false
        properties:
          _links:
            "$ref": "#/components/schemas/GenericLinks"
    ContentTemplate:
      type: object
      required:
      - templateId
      - name
      - description
      - labels
      - templateType
      - _expandable
      - _links
      additionalProperties: false
      properties:
        templateId:
          type: string
        _expandable:
          type: object
          additionalProperties: false
          properties:
            body:
              type: string
        body:
          "$ref": "#/components/schemas/ContentBody"
        _links:
          "$ref": "#/components/schemas/GenericLinks"
        description:
          type: string
        templateType:
          type: string
        name:
          type: string
        labels:
          type: array
          items:
            "$ref": "#/components/schemas/Label"
    Relation:
      additionalProperties: false
      required:
      - name
      - _expandable
      - _links
      type: object
      properties:
        name:
          type: string
        _expandable:
          properties:
            source:
              type: string
            relationData:
              type: string
            target:
              type: string
          additionalProperties: false
          required:
          - relationData
          - source
          - target
          type: object
        source:
          type: object
          additionalProperties: true
        relationData:
          "$ref": "#/components/schemas/RelationData"
        _links:
          "$ref": "#/components/schemas/GenericLinks"
        target:
          type: object
          additionalProperties: true
    Theme:
      allOf:
      - "$ref": "#/components/schemas/ThemeNoLinks"
      - properties:
          _links:
            "$ref": "#/components/schemas/GenericLinks"
        type: object
        required:
        - _links
        additionalProperties: false
    SpaceArray:
      additionalProperties: false
      type: object
      required:
      - results
      - start
      - limit
      - size
      - _links
      properties:
        _links:
          "$ref": "#/components/schemas/GenericLinks"
        results:
          items:
            "$ref": "#/components/schemas/Space"
          type: array
        size:
          format: int32
          type: integer
        limit:
          type: integer
          format: int32
        start:
          format: int32
          type: integer
    AffectedObject:
      type: object
      required:
      - name
      - objectType
      additionalProperties: false
      properties:
        objectType:
          type: string
        name:
          type: string
    CQLPersonalDataMigrationRequest:
      type: object
      required:
      - queryStrings
      additionalProperties: false
      properties:
        queryStrings:
          type: array
          items:
            type: string
          description: A list of queries with user identifiers. Maximum of 100 queries.
          example:
          - type = page and creator != admin and space = DEV
      description: The CQL queries to be converted.
    User:
      type: object
      required:
      - type
      - accountId
      - accountType
      - email
      - publicName
      - profilePicture
      - displayName
      - _expandable
      - _links
      additionalProperties: false
      properties:
        accountId:
          description: |-
            The account ID of the user, which uniquely identifies the user across all Atlassian products.
            For example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`.
          type: string
        userKey:
          type: string
          description: |-
            This property is no longer available and will be removed from the documentation soon.
            Use `accountId` instead.
            See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.
        _links:
          "$ref": "#/components/schemas/GenericLinks"
        displayName:
          type: string
          description: The display name of the user. Depending on the user's privacy
            setting, this may be the same as publicName.
        username:
          type: string
          description: |-
            This property is no longer available and will be removed from the documentation soon.
            Use `accountId` instead.
            See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.
        profilePicture:
          "$ref": "#/components/schemas/Icon"
        type:
          type: string
          enum:
          - known
          - unknown
          - anonymous
          - user
        details:
          "$ref": "#/components/schemas/UserDetails"
        personalSpace:
          "$ref": "#/components/schemas/Space"
        _expandable:
          additionalProperties: false
          type: object
          properties:
            operations:
              type: string
            details:
              type: string
            personalSpace:
              type: string
        publicName:
          description: The public name or nickname of the user. Will always contain
            a value.
          type: string
        accountType:
          type: string
          enum:
          - atlassian
          - app (if this user is a bot user created on behalf of an Atlassian app)
          description: The account type of the user, may return empty string if unavailable.
        email:
          description: The email address of the user. Depending on the user's privacy
            setting, this may return an empty string.
          type: string
        operations:
          type: array
          items:
            "$ref": "#/components/schemas/OperationCheckResult"
    TaskPageResponse:
      additionalProperties: false
      type: object
      required:
      - results
      - start
      - limit
      - size
      properties:
        size:
          format: int32
          type: integer
        limit:
          format: int32
          type: integer
        start:
          format: int32
          type: integer
        results:
          type: array
          items:
            "$ref": "#/components/schemas/Task"
    ContentRestrictionUpdate:
      properties:
        operation:
          description: The restriction operation applied to content.
          type: string
          enum:
          - administer
          - copy
          - create
          - delete
          - export
          - move
          - purge
          - purge_version
          - read
          - restore
          - update
          - use
        restrictions:
          additionalProperties: false
          type: object
          properties:
            group:
              items:
                additionalProperties: false
                required:
                - type
                - name
                type: object
                description: A group that the restriction will be applied to.
                properties:
                  name:
                    type: string
                    description: The name of the group.
                  type:
                    description: Set to 'group'.
                    enum:
                    - group
                    type: string
              type: array
              description: |-
                The groups that the restrictions will be applied to. This array must
                have at least one item, otherwise it should be omitted.
            user:
              items:
                description: |-
                  A user that the restriction will be applied to. Either the `username`
                  or the `userKey` must be specified to identify the user.
                properties:
                  type:
                    description: Set to 'known'.
                    enum:
                    - known
                    - unknown
                    - anonymous
                    - user
                    type: string
                  username:
                    type: string
                    description: |-
                      This property is no longer available and will be removed from the documentation soon.
                      Use `accountId` instead.
                      See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.
                  accountId:
                    type: string
                    description: |-
                      The account ID of the user, which uniquely identifies the user across all Atlassian products.
                      For example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`.
                  userKey:
                    type: string
                    description: |-
                      This property is no longer available and will be removed from the documentation soon.
                      Use `accountId` instead.
                      See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.
                additionalProperties: false
                type: object
                required:
                - type
                - accountId
              type: array
              description: |-
                The users that the restrictions will be applied to. This array must
                have at least one item, otherwise it should be omitted.
          description: |-
            The users/groups that the restrictions will be applied to. At least one of
            `user` or `group` must be specified for this object.
      type: object
      required:
      - operation
      - restrictions
      additionalProperties: false
    ThemeNoLinks:
      description: Theme object without links. Used in ThemeArray.
      properties:
        themeKey:
          type: string
        description:
          type: string
        icon:
          "$ref": "#/components/schemas/Icon"
        name:
          type: string
      type: object
      required:
      - themeKey
      - name
      - description
      - icon
      additionalProperties: false
    SpaceSettings:
      required:
      - routeOverrideEnabled
      - _links
      type: object
      additionalProperties: false
      properties:
        routeOverrideEnabled:
          description: |-
            Defines whether an override for the space home should be used. This is
            used in conjunction with a space theme provided by an app. For
            example, if this property is set to true, a theme can display a page
            other than the space homepage when users visit the root URL for a
            space. This property allows apps to provide content-only theming
            without overriding the space home.
          type: boolean
        _links:
          "$ref": "#/components/schemas/GenericLinks"
    ContentComment:
      allOf:
      - "$ref": "#/components/schemas/Content"
      - additionalProperties: false
        type: object
        required:
        - metadata
        - extensions
        - _links
        properties:
          _links:
            "$ref": "#/components/schemas/GenericLinks"
          metadata:
            "$ref": "#/components/schemas/ContentMetadata"
          extensions:
            properties:
              resolution:
                type: object
                properties:
                  status:
                    type: string
                  lastModifiedDate:
                    type: string
                    format: date-time
                  lastModifier:
                    properties:
                      type:
                        type: string
                      operations:
                        type: array
                        items:
                          "$ref": "#/components/schemas/OperationCheckResult"
                      profilePicture:
                        "$ref": "#/components/schemas/Icon"
                      displayName:
                        type: string
                    type: object
              inlineProperties:
                properties:
                  markerRef:
                    type: string
                  originalSelection:
                    type: string
                required:
                - originalSelection
                - markerRef
                type: object
              location:
                type: string
            required:
            - location
            type: object
      description: Representation of a comment (content)
    ButtonLookAndFeel:
      required:
      - backgroundColor
      - color
      type: object
      additionalProperties: false
      properties:
        color:
          type: string
        backgroundColor:
          type: string
    LookAndFeel:
      properties:
        content:
          "$ref": "#/components/schemas/ContentLookAndFeel"
        links:
          properties:
            color:
              type: string
          type: object
          required:
          - color
          additionalProperties: false
        bordersAndDividers:
          additionalProperties: false
          required:
          - color
          type: object
          properties:
            color:
              type: string
        header:
          "$ref": "#/components/schemas/HeaderLookAndFeel"
        headings:
          type: object
          required:
          - color
          additionalProperties: false
          properties:
            color:
              type: string
        menus:
          "$ref": "#/components/schemas/MenusLookAndFeel"
      required:
      - headings
      - links
      - menus
      - header
      - content
      - bordersAndDividers
      type: object
      additionalProperties: false
    ThemeArray:
      properties:
        results:
          type: array
          items:
            "$ref": "#/components/schemas/ThemeNoLinks"
        size:
          format: int32
          type: integer
        limit:
          type: integer
          format: int32
        start:
          format: int32
          type: integer
        _links:
          "$ref": "#/components/schemas/GenericLinks"
      additionalProperties: false
      required:
      - results
      - start
      - limit
      - size
      - _links
      type: object
    SpaceUpdate:
      type: object
      additionalProperties: false
      properties:
        name:
          type: string
          maxLength: 200
          description: The name of the space.
        homepage:
          additionalProperties: false
          type: object
          required:
          - id
          properties:
            id:
              type: string
              description: The ID of the page.
          description: The page to set as the homepage of the space.
        description:
          "$ref": "#/components/schemas/SpaceDescriptionCreate"
    GenericLinks:
      additionalProperties:
        type: string
      type: object
    LookAndFeelType:
      required:
      - selected
      type: object
      additionalProperties: false
      description: The object for choosing the look and feel settings for the site
        or a space.
      properties:
        selected:
          enum:
          - global
          - custom
          type: string
          description: |-
            The look and feel scheme. If you set this to `global`, you must specify
            the current global look and feel settings as a `global` object in this
            request. Similarly, if you set this to `custom`, you must specify the
            current custom look and feel settings as a `custom` object in this request.
        global:
          "$ref": "#/components/schemas/LookAndFeel"
        custom:
          "$ref": "#/components/schemas/LookAndFeel"
    UserDetails:
      properties:
        personal:
          type: object
          additionalProperties: false
          properties:
            phone:
              type: string
              description: |-
                This property has been deprecated due to privacy changes. There is no replacement. See the
                [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)
                for details.
            email:
              description: |-
                This property has been deprecated due to privacy changes. Use the `User.email` property instead. See the
                [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)
                for details.
              type: string
            im:
              description: |-
                This property has been deprecated due to privacy changes. There is no replacement. See the
                [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)
                for details.
              type: string
            website:
              type: string
              description: |-
                This property has been deprecated due to privacy changes. There is no replacement. See the
                [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)
                for details.
        business:
          additionalProperties: false
          type: object
          properties:
            department:
              description: |-
                This property has been deprecated due to privacy changes. There is no replacement. See the
                [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)
                for details.
              type: string
            location:
              type: string
              description: |-
                This property has been deprecated due to privacy changes. There is no replacement. See the
                [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)
                for details.
            position:
              type: string
              description: |-
                This property has been deprecated due to privacy changes. There is no replacement. See the
                [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)
                for details.
      additionalProperties: false
      type: object
    BulkUserLookupArray:
      properties:
        start:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        limit:
          type: integer
          format: int32
        results:
          items:
            "$ref": "#/components/schemas/BulkUserLookup"
          type: array
        _links:
          "$ref": "#/components/schemas/GenericLinks"
      required:
      - results
      - start
      - limit
      - size
      - _links
      type: object
    SpaceWatch:
      properties:
        contentId:
          type: string
        watcher:
          "$ref": "#/components/schemas/SpaceWatchUser"
        type:
          type: string
        spaceKey:
          type: string
      required:
      - type
      - watcher
      - spaceKey
      type: object
      additionalProperties: false
    VersionArray:
      properties:
        _links:
          "$ref": "#/components/schemas/GenericLinks"
        size:
          format: int32
          type: integer
        start:
          type: integer
          format: int32
        limit:
          format: int32
          type: integer
        results:
          type: array
          items:
            "$ref": "#/components/schemas/Version"
      required:
      - results
      - start
      - limit
      - size
      - _links
      type: object
      additionalProperties: false
    CopyPageHierarchyTitleOptions:
      type: object
      properties:
        search:
          type: string
        prefix:
          type: string
        replace:
          type: string
    Watch:
      properties:
        contentId:
          type: string
        watcher:
          "$ref": "#/components/schemas/WatchUser"
        type:
          type: string
      additionalProperties: false
      required:
      - type
      - watcher
      - contentId
      type: object
    BlueprintTemplateArray:
      properties:
        _links:
          "$ref": "#/components/schemas/GenericLinks"
        limit:
          type: integer
          format: int32
        size:
          format: int32
          type: integer
        start:
          format: int32
          type: integer
        results:
          items:
            "$ref": "#/components/schemas/BlueprintTemplate"
          type: array
      additionalProperties: false
      required:
      - results
      - start
      - limit
      - size
      - _links
      type: object
    SpacePermissionV2:
      description: |-
        This object represents a single space permission. Permissions consist of
        at least one operation object with an accompanying subjects object.

        The following combinations of `operation.type` and `operation.target` values are
        valid for the `operation` object:

          - 'create': 'page', 'blogpost', 'comment', 'attachment'
          - 'read': 'space'
          - 'delete': 'page', 'blogpost', 'comment', 'attachment'
          - 'export': 'space'
          - 'administer': 'space'
      properties:
        id:
          type: integer
          format: int64
        subject:
          type: object
          required:
          - type
          - identifier
          additionalProperties: false
          description: The user or group that the permission applies to.
          properties:
            identifier:
              description: |-
                for type=user, identifier should be user's accountId or `anonymous` for anonymous users
                for type=group, identifier should be name of the group
              type: string
            type:
              type: string
              enum:
              - user
              - group
        _links:
          "$ref": "#/components/schemas/GenericLinks"
        operation:
          type: object
          required:
          - key
          - target
          additionalProperties: false
          properties:
            key:
              enum:
              - administer
              - copy
              - create
              - delete
              - export
              - move
              - purge
              - purge_version
              - read
              - restore
              - update
              - use
              type: string
            target:
              description: The space or content type that the operation applies to.
              type: string
              enum:
              - page
              - blogpost
              - comment
              - attachment
              - space
      type: object
      required:
      - subject
      - operation
      additionalProperties: false
    LookAndFeelSettings:
      required:
      - selected
      - global
      - custom
      type: object
      additionalProperties: false
      properties:
        theme:
          "$ref": "#/components/schemas/LookAndFeel"
        global:
          "$ref": "#/components/schemas/LookAndFeel"
        custom:
          "$ref": "#/components/schemas/LookAndFeel"
        selected:
          enum:
          - global
          - custom
          type: string
    MacroInstance:
      type: object
      additionalProperties: false
      properties:
        _links:
          "$ref": "#/components/schemas/GenericLinks"
        body:
          type: string
        parameters:
          additionalProperties: true
          type: object
        name:
          type: string
    ChangedValue:
      additionalProperties: false
      type: object
      required:
      - name
      - oldValue
      - newValue
      properties:
        oldValue:
          type: string
        name:
          type: string
        newValue:
          type: string
    Container:
      description: |-
        Container for content. This can be either a space (containing a page or blogpost)
        or a page/blog post (containing an attachment or comment)
      type: object
      additionalProperties: true
    ContentRestrictionUpdateArray:
      type: array
      items:
        "$ref": "#/components/schemas/ContentRestrictionUpdate"
    ContentAttachment:
      allOf:
      - "$ref": "#/components/schemas/Content"
      - type: object
        required:
        - metadata
        - extensions
        - _links
        additionalProperties: false
        properties:
          _links:
            "$ref": "#/components/schemas/GenericLinks"
          metadata:
            properties:
              mediaType:
                type: string
            type: object
          extensions:
            type: object
            properties:
              position:
                format: int32
                type: integer
      description: Representation of an attachment (content)
    ContentPage:
      description: Representation of a page (content)
      allOf:
      - "$ref": "#/components/schemas/Content"
      - type: object
        required:
        - metadata
        - extensions
        - _links
        additionalProperties: false
        properties:
          _links:
            "$ref": "#/components/schemas/GenericLinks"
          metadata:
            "$ref": "#/components/schemas/ContentMetadata"
          extensions:
            properties:
              position:
                type: integer
                format: int32
            type: object
    ContentPropertyUpdate:
      properties:
        version:
          additionalProperties: false
          type: object
          required:
          - number
          properties:
            number:
              description: |-
                The new version for the updated content property. Set this to the
                current version number incremented by one. To get the current
                version number, use 'Get content property' and retrieve
                `version.number`.
              format: int32
              type: integer
            minorEdit:
              description: |-
                If `minorEdit` is set to 'true', no notification email or activity
                stream will be generated for the change.
              default: true
              type: boolean
          description: The version number of the property.
        value:
          description: The value of the property.
          maxProperties: 1
          type: object
          minProperties: 1
          additionalProperties:
            type: string
      additionalProperties: false
      required:
      - value
      - version
      type: object
    LongTaskStatusWithLinks:
      allOf:
      - "$ref": "#/components/schemas/LongTaskStatus"
      - additionalProperties: false
        type: object
        required:
        - _links
        properties:
          _links:
            "$ref": "#/components/schemas/GenericLinks"
      description: Same as LongTaskStatus but with `_links` property.
    ContentProperty:
      required:
      - id
      - key
      - value
      - _links
      type: object
      additionalProperties: false
      properties:
        value:
          description: The value of the content property. This can be empty or a complex
            object.
          additionalProperties: true
          type: object
        version:
          additionalProperties: false
          required:
          - when
          - message
          - number
          - minorEdit
          type: object
          properties:
            message:
              type: string
            number:
              type: integer
              format: int32
            when:
              format: date-time
              type: string
            minorEdit:
              type: boolean
        key:
          type: string
        content:
          "$ref": "#/components/schemas/Content"
        id:
          format: int32
          type: integer
        _links:
          "$ref": "#/components/schemas/GenericLinks"
    ContentId:
      type: string
  parameters:
    spaceExpand:
      style: form
      in: query
      required: false
      name: expand
      description: |-
        A multi-value parameter indicating which properties of the spaces to
        expand, where:

          - `settings` returns the settings for the space, similar to [Get space settings](#api-space-spaceKey-settings-get).
          - `metadata.labels` returns the space labels, which are used to categorize the space.
          - `operations` returns the operations for a space, which are used when setting permissions.
          - `lookAndFeel` returns information about the look and feel of the space, including the color scheme.
          - `permissions` returns the permissions for the space. Note that this may return permissions for deleted groups,
          because deleting a group doesn't remove associated space permissions.
          - `icon` returns information about space icon.
          - `description.plain` returns the description of the space.
          - `description.view` returns the description of the space.
          - `theme` returns information about the space theme.
          - `homepage` returns information about the space homepage.
      schema:
        items:
          type: string
          enum:
          - settings
          - metadata.labels
          - operations
          - lookAndFeel
          - permissions
          - icon
          - description.plain
          - description.view
          - theme
          - homepage
        type: array
    contentExpand:
      schema:
        type: array
        items:
          type: string
          enum:
          - childTypes.all
          - childTypes.attachment
          - childTypes.comment
          - childTypes.page
          - container
          - metadata.currentuser
          - metadata.properties
          - metadata.labels
          - metadata.frontend
          - operations
          - children.page
          - children.attachment
          - children.comment
          - restrictions.read.restrictions.user
          - restrictions.read.restrictions.group
          - restrictions.update.restrictions.user
          - restrictions.update.restrictions.group
          - history
          - history.lastUpdated
          - history.previousVersion
          - history.contributors
          - history.nextVersion
          - ancestors
          - body
          - version
          - descendants.page
          - descendants.attachment
          - descendants.comment
          - space
      description: |-
        A multi-value parameter indicating which properties of the content to expand.

        - `childTypes.all` returns whether the content has attachments, comments, or child pages.
        Use this if you only need to check whether the content has children of a particular type.
        - `childTypes.attachment` returns whether the content has attachments.
        - `childTypes.comment` returns whether the content has comments.
        - `childTypes.page` returns whether the content has child pages.
        - `container` returns the space that the content is in. This is the same as the information
        returned by [Get space](#api-space-spaceKey-get).
        - `metadata.currentuser` returns information about the current user in relation to the content,
        including when they last viewed it, modified it, contributed to it, or added it as a favorite.
        - `metadata.properties` returns content properties that have been set via the Confluence REST API.
        - `metadata.labels` returns the labels that have been added to the content.
        - `metadata.frontend` this property is only used by Atlassian.
        - `operations` returns the operations for the content, which are used when setting permissions.
        - `children.page` returns pages that are descendants at the level immediately below the content.
        - `children.attachment` returns all attachments for the content.
        - `children.comment` returns all comments on the content.
        - `restrictions.read.restrictions.user` returns the users that have permission to read the content.
        - `restrictions.read.restrictions.group` returns the groups that have permission to read the content. Note that
        this may return deleted groups, because deleting a group doesn't remove associated restrictions.
        - `restrictions.update.restrictions.user` returns the users that have permission to update the content.
        - `restrictions.update.restrictions.group` returns the groups that have permission to update the content. Note that
        this may return deleted groups because deleting a group doesn't remove associated restrictions.
        - `history` returns the history of the content, including the date it was created.
        - `history.lastUpdated` returns information about the most recent update of the content, including
        who updated it and when it was updated.
        - `history.previousVersion` returns information about the update prior to the current content update.
        - `history.contributors` returns all of the users who have contributed to the content.
        - `history.nextVersion` returns information about the update after to the current content update.
        - `ancestors` returns the parent page, if the content is a page.
        - `body` returns the body of the content in different formats, including the editor format,
        view format, and export format.
        - `version` returns information about the most recent update of the content, including who updated it
        and when it was updated.
        - `descendants.page` returns pages that are descendants at any level below the content.
        - `descendants.attachment` returns all attachments for the content, same as `children.attachment`.
        - `descendants.comment` returns all comments on the content, same as `children.comment`.
        - `space` returns the space that the content is in. This is the same as the information returned by
        [Get space](#api-space-spaceKey-get).

        In addition, the following comment-specific expansions can be used:
        - `extensions.inlineProperties` returns inline comment-specific properties.
        - `extensions.resolution` returns the resolution status of each comment.
      name: expand
      required: false
      in: query
      style: form
x-atlassian-narrative:
  documents:
  - anchor: about
    title: About
    body: |-
      This is the reference for the Confluence Cloud REST API. This API is the primary way to get and
      modify data in Confluence Cloud, whether you are developing an app or any other integration.
      Use it to interact with Confluence entities, like pages and blog posts, spaces, users, groups,
      and more.

      **NOTE:** Personal data that is used to identify users, such as `username` and `userKey`, has
      been removed from the Confluence Cloud REST API. In addition, other personal data (for example, email)
      is now restricted by a user's profile settings (or in the case of managed accounts, the visibility
      settings decided by the site administrator). You must update your apps to accommodate these changes,
      if you have not done so already. This change was previously announced on 01 October 2018 and followed
      by a deprecation period (see the [announcement](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)).
  - title: Authentication and authorization
    anchor: auth
    body: |-
      **Authentication:** If you are building a Cloud app, authentication is implemented via JWT (see [Authentication for apps](https://developer.atlassian.com/cloud/confluence/authentication-for-apps/)). Otherwise, if you are authenticating directly against the REST API, the REST API supports basic auth (see [Basic auth for REST APIs](https://developer.atlassian.com/cloud/confluence/basic-auth-for-rest-apis/)).

      **Authorization:** If you are building a Cloud app, authorization can be implemented by [scopes](https://developer.atlassian.com/cloud/confluence/scopes/) or by [OAuth 2.0 user impersonation](https://developer.atlassian.com/cloud/confluence/oauth-2-jwt-bearer-tokens-for-apps). Otherwise, if you are making calls directly against the REST API, authorization is based on the user used in the authentication process.

      See [Security overview](https://developer.atlassian.com/cloud/jira/platform/security-overview/) for more details on authentication and authorization.
  - body: |-
      The Confluence REST API uses the [standard HTTP status codes](https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html).

      Responses that return an error status code will also return a response body, similar to the following:
      ```json
      {
        "statusCode": 404,
        "data": {
          "authorized": false,
          "valid": false,
          "errors": [
            {
              "message": {
                "translation": "This is an example error message.",
                "args": []
              }
            }
          ],
          "successful": false
        },
        "message": "This is an example error message."
      }
      ```
    anchor: status-code
    title: Status codes
  - anchor: using
    title: Using the REST API
    body: |-
      **Expansion:** The Confluence REST API uses resource expansion: some parts of a resource are not returned unless explicitly specified. This simplifies responses and minimizes network traffic.

      To expand part of a resource in a request, use the `expand` query parameter and specify the entities to be expanded. If you need to expand nested entities, use the `.` dot notation. For example, the following request will expand information about the requested content's space and labels:
      ```
      GET /wiki/rest/api/content/{id}?expand=space,metadata.labels
      ```
      **Pagination:** The Confluence REST API uses pagination: a method that returns a response with multiple objects can only return a limited number at one time. This limits the size of responses and conserves server resources.

      Use the 'limit' and 'start' query parameters to specify pagination:

      - `limit` is the number of objects to return per page. This may be restricted by system limits.
      - `start` is the index of the first item returned in the page of results. The base index is 0.

      For example, the following request will return ten content objects, starting from the fifth object.
      ```
      GET /wiki/rest/api/content?start=4,limit=10
      ```
      **Special headers:**

      - `X-Atlassian-Token: no-check` request header must be specified for methods
      that are protected from Cross Site Request Forgery (XSRF/CSRF) attacks. This is
      stated in the method description, if required. For more information, see this
      [KB article](https://confluence.atlassian.com/cloudkb/xsrf-check-failed-when-calling-cloud-apis-826874382.html).
  - body: |-
      **Webhooks:** A webhook is a user-defined callback over HTTP. You can use Confluence webhooks to notify your app or web application when certain events occur in Confluence. For example, when a page is created or updated. To learn more, see [Webhooks](https://developer.atlassian.com/cloud/confluence/modules/webhook/).

      **Content properties:** Content properties are a key-value storage associated with a piece of Confluence content. If you are building an app, this is one form of persistence that you can use. You can use the Confluence REST API to get, update, and delete content properties. To learn more, see [Content properties in the REST API](https://developer.atlassian.com/cloud/confluence/content-properties/).

      **CQL:** The Confluence Query Language (CQL) allows you to perform complex searches for content using an SQL-like syntax in the `search` resource. To learn more, see [Advanced searching using CQL](https://developer.atlassian.com/cloud/confluence/advanced-searching-using-cql/).
    anchor: capabilities
    title: Capabilities
